/* -*- mode:c; mode:view-*- */
/****************************************************************************
 * Automatically generated by tb_sqlpp_post.pl
 *
 * !!! WARNING !!!
 * !!!   THIS IS AN AUTOMATICALLY GENERATED SCRIPT FILE !!!
 * !!!   DO NOT EDIT THIS FILE !!!
 *
 ****************************************************************************/





SET DEFINE OFF;





create or replace view dictionary
(table_name, comments)
as
select /*+ no_merge */ o.name, c.comment_str
from sys._dd_obj o, sys._dd_comment c
where o.obj_id = c.obj_id(+)
and c.col_no = -1 
and o.owner_id = (select user_id from sys._dd_user where name = 'SYSCAT')
and o.type_no = 2
and (o.name like 'USER%'
     or o.name like 'ALL%'
     or (o.name like 'DBA%'
         and exists (
                     SELECT NULL
                     FROM   SYS._DD_SYSAUTH
                     WHERE  GRANTEE_ID = USERENV('SCHEMAID')
                     AND  (PRIV_NO = -483
                           OR PRIV_NO IN (
                                          SELECT USER_ID FROM SYS._DD_USER
                                          WHERE NAME = 'DBA')
                          )
                    )
        )
    )
union all
select o.name, c.comment_str
from sys._dd_obj o, sys._dd_comment c
where o.obj_id = c.obj_id(+)
and c.col_no = -1 
and o.owner_id = (select user_id from sys._dd_user where name = 'SYS')
and o.type_no = 2
and o.name like 'V$%'
union all
select o.name, c.comment_str
from sys._dd_obj o, sys._dd_comment c
where o.obj_id = c.obj_id(+)
and o.owner_id = (select user_id from sys._dd_user where name = 'SYSCAT')
and o.name in ('DICTIONARY', 'DICTIONARY_COLUMNS', 'DUAL', 'SESSION_ROLES',
               'NLS_SESSION_PARAMETERS')
and c.col_no = -1
union all
select so.name, 'A synonym for ' || ro.name || '.'
from sys._dd_obj so, 
     sys._dd_syn sy, 
     sys._dd_obj ro 
     where so.type_no = 3
     and so.owner_id = 1
     and so.obj_id = sy.obj_id
     and so.name in ('DICT')
     and sy.ref_name = ro.name
     and ro.owner_id = (select user_id from sys._dd_user where name = 'SYSCAT')
     and ro.type_no = 2
     union all
     select so.name, 'A synonym for ' || ro.name || '.'
     from sys._dd_obj so, 
     sys._dd_syn sy, 
     sys._dd_obj ro 
     where so.type_no = 3
     and so.owner_id = 1
     and so.obj_id = sy.obj_id
     and sy.ref_name = ro.name
     and ro.owner_id = 0
     and ro.type_no = 2
     and (
          ro.OBJ_ID IN (
                        SELECT OBJ_ID
                        FROM   SYS._DD_OBJAUTH
                        WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
                       )          
          OR EXISTS (
                     SELECT NULL
                     FROM   (SELECT SAU2.PRIV_NO
                             FROM   SYS._DD_SYSAUTH SAU2
                             START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                             CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                            ) SAU
                     WHERE (SAU.PRIV_NO    = -483
                             OR SAU.PRIV_NO = -482
                             OR SAU.PRIV_NO = -481
                             OR SAU.PRIV_NO = -480
                             OR SAU.PRIV_NO = -485
                             OR SAU.PRIV_NO = -473
                             OR SAU.PRIV_NO IN (
                                   SELECT USER_ID FROM SYS._DD_USER
                                   WHERE NAME = 'DBA')
                            )
                    )
          )
          ;

          create or replace public synonym dictionary for dictionary;
          create or replace public synonym dict for dictionary;
          grant select on dictionary to public;

          

create or replace view dictionary_columns
(table_name, column_name, comments)
as
select /*+ no_merge */ o.name, cl.name, c.comment_str
from sys._dd_obj o, sys._dd_comment c, sys._dd_col cl
where o.obj_id = cl.obj_id
  and o.owner_id = (select user_id from sys._dd_user where name = 'SYS')
  and o.type_no = 2
  and o.name like 'V$%'
  and cl.obj_id = c.obj_id(+)
  and cl.col_no = c.col_no(+)
union
select o.name, cl.name, c.comment_str
from sys._dd_obj o, sys._dd_comment c, sys._dd_col cl
where o.obj_id = cl.obj_id
  and o.owner_id = (select user_id from sys._dd_user where name = 'SYSCAT')
  and o.type_no = 2
  and (o.name like 'USER%'
       or o.name like 'ALL%'
       or (o.name like 'DBA%'
           and exists (
            SELECT NULL
             FROM   SYS._DD_SYSAUTH
             WHERE  GRANTEE_ID = USERENV('SCHEMAID')
               AND  (PRIV_NO = -483
                     OR PRIV_NO IN (
                           SELECT USER_ID FROM SYS._DD_USER
                           WHERE NAME = 'DBA')
                    )
             )
          )
      )
  and cl.obj_id = c.obj_id(+)
  and cl.col_no = c.col_no(+)
union
select o.name, cl.name, c.comment_str
from sys._dd_obj o, sys._dd_comment c, sys._dd_col cl
where o.obj_id = cl.obj_id
  and o.owner_id = (select user_id from sys._dd_user where name = 'SYSCAT')
  and o.name in ('DICTIONARY', 'DICTIONARY_COLUMNS', 'DUAL', 'SESSION_ROLES',
        'NLS_SESSION_PARAMETERS')
  and cl.obj_id = c.obj_id(+)
  and cl.col_no = c.col_no(+)
union
select so.name, cl.name, c.comment_str
from sys._dd_obj so, 
     sys._dd_syn sy, 
     sys._dd_obj ro, 
     sys._dd_comment c,
     sys._dd_col cl
where so.type_no = 3
  and so.owner_id = 1
  and so.obj_id = sy.obj_id
  and sy.ref_name = ro.name
  and ro.owner_id = 0
  and ro.type_no = 2
  and (
       ro.OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
       OR EXISTS (
            SELECT NULL
            FROM   (SELECT SAU2.PRIV_NO
                    FROM   SYS._DD_SYSAUTH SAU2
                    START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                    CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                   ) SAU
            WHERE (SAU.PRIV_NO    = -483
                    OR SAU.PRIV_NO = -482
                    OR SAU.PRIV_NO = -481
                    OR SAU.PRIV_NO = -480
                    OR SAU.PRIV_NO = -485
                    OR SAU.PRIV_NO = -473
                    OR SAU.PRIV_NO IN (
                          SELECT USER_ID FROM SYS._DD_USER
                          WHERE NAME = 'DBA')
                   )
          )
      )
  and ro.obj_id = cl.obj_id
  and cl.obj_id = c.obj_id(+)
  and cl.col_no = c.col_no(+)
;

create or replace public synonym dictionary_columns for dictionary_columns;
create or replace public synonym dict_columns for dictionary_columns;
create or replace public synonym dict_cols for dictionary_columns;
grant select on dictionary_columns to public;



create or replace view _sv_catalog
(owner, object_name, object_type, obj_id, object_type_no)
as
    select /*+ no_merge */ u.name, o.name, object_types.name, o.obj_id, o.type_no
    from   sys._dd_user u,
           (select name, type_no, owner_id, obj_id
            from   sys._dd_obj
            where  type_no in (
                      -- 0,
                      1,
                      -- -999,
                      2,
                      3,
                      4)
           ) o,
           sys.object_types
    where  o.owner_id = u.user_id and o.type_no = object_types.type_no
;

create or replace view dba_catalog
as
    select /*+ no_merge */ owner, object_name, object_name table_name, object_type from _sv_catalog
;

create or replace view all_catalog
as
    select /*+ no_merge */ owner, object_name, object_name table_name, object_type from _sv_catalog
    where  owner = USERENV('SCHEMA') or owner = 'PUBLIC'
          
       or  obj_id IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
          
       or (
              object_type_no in (
                  1,
                  2,
                  3
              )
              AND  EXISTS (SELECT NULL
                   FROM   (SELECT SAU2.PRIV_NO
                           FROM   SYS._DD_SYSAUTH SAU2
                           START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                           CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                          ) SAU
                   WHERE (SAU.PRIV_NO    = -483
                           OR SAU.PRIV_NO = -482
                           OR SAU.PRIV_NO = -481
                           OR SAU.PRIV_NO = -480
                           OR SAU.PRIV_NO = -485
                           OR SAU.PRIV_NO = -473
                           OR SAU.PRIV_NO IN (
                                 SELECT USER_ID FROM SYS._DD_USER
                                 WHERE NAME = 'DBA')
                          )
                  )
          )

       or (
              object_type_no = 4
              and
              exists (
               select null
               from   sys._dd_sysauth sau
               where  sau.grantee_id = USERENV('SCHEMAID')
                 and  (sau.priv_no    = -459
                       or sau.priv_no = -473
                       or sau.priv_no in (
                             select user_id from sys._dd_user
                             where name = 'DBA')
                      ))
          )
;

create or replace view user_catalog
as
    select /*+ no_merge */ object_name, object_name table_name, object_type from _sv_catalog
    where  owner = USERENV('SCHEMA')
;

create or replace public synonym dba_catalog for dba_catalog;
create or replace public synonym all_catalog for all_catalog;
create or replace public synonym user_catalog for user_catalog;

grant select on all_catalog to public;
grant select on user_catalog to public;


CREATE OR REPLACE VIEW TAB (TNAME, TABTYPE)
AS
    SELECT /*+ no_merge */ O.NAME, T.NAME
    FROM   (SELECT NAME, OWNER_ID, TYPE_NO
            FROM   SYS._DD_OBJ
            WHERE  TYPE_NO IN (
                      1,
                      2,
                      3)
           ) O,
           SYS.OBJECT_TYPES T
    WHERE  O.OWNER_ID = USERENV('SCHEMAID') AND O.TYPE_NO = T.TYPE_NO
;

CREATE OR REPLACE PUBLIC SYNONYM TAB FOR TAB;
GRANT SELECT ON TAB TO PUBLIC;




create or replace view _sv_col_privs
(
    table_name, column_name,
    owner_id, grantor_id, grantee_id,
    owner, grantor, grantee,
    privilege,
    grantable
)
as
    select /*+ no_merge */
        o.name, c.name,
        u_owner.user_id, u_grantor.user_id, u_grantee.user_id,
        u_owner.name, u_grantor.name, u_grantee.name,
        op.name,
        decode(bitand(objauth.flags, 1), 1,
               'YES', 'NO')
    from
        sys._dd_objauth objauth,
        sys._dd_obj o, sys._dd_col c,
        sys._dd_user u_owner, sys._dd_user u_grantor, sys._dd_user u_grantee,
        sys.object_privileges op
    where
        objauth.col_no > -1 and 
        o.obj_id = objauth.obj_id and
        c.obj_id = objauth.obj_id and
        c.col_no = objauth.col_no and
        u_owner.user_id = o.owner_id           and
        u_grantor.user_id = objauth.grantor_id and
        u_grantee.user_id = objauth.grantee_id and
        op.priv_no = objauth.priv_no
;

CREATE OR REPLACE VIEW ALL_COL_PRIVS AS
    SELECT /*+ no_merge */
        GRANTEE, OWNER,
        TABLE_NAME, COLUMN_NAME, GRANTOR,
        PRIVILEGE, GRANTABLE
    FROM
        SYSCAT._SV_COL_PRIVS
    WHERE
        USERENV('SCHEMAID') IN (OWNER_ID, GRANTOR_ID, GRANTEE_ID) OR
        GRANTEE = 'PUBLIC'
;

CREATE OR REPLACE VIEW DBA_COL_PRIVS AS
    SELECT /*+ no_merge */
        GRANTEE, OWNER,
        TABLE_NAME, COLUMN_NAME, GRANTOR,
        PRIVILEGE, GRANTABLE
    FROM
        SYSCAT._SV_COL_PRIVS
;

CREATE OR REPLACE VIEW USER_COL_PRIVS AS
    SELECT /*+ no_merge */
        GRANTEE, OWNER,
        TABLE_NAME, COLUMN_NAME, GRANTOR,
        PRIVILEGE, GRANTABLE
    FROM
        SYSCAT._SV_COL_PRIVS
    WHERE
        USERENV('SCHEMAID') IN (OWNER_ID, GRANTOR_ID, GRANTEE_ID)
;



CREATE OR REPLACE VIEW ALL_COL_PRIVS_MADE AS
    SELECT /*+ no_merge */
        GRANTEE, OWNER,
        TABLE_NAME, COLUMN_NAME, GRANTOR,
        PRIVILEGE, GRANTABLE
    FROM
        SYSCAT._SV_COL_PRIVS
    WHERE
        USERENV('SCHEMAID') IN (OWNER_ID, GRANTOR_ID)
;

CREATE OR REPLACE VIEW USER_COL_PRIVS_MADE AS
    SELECT /*+ no_merge */
        GRANTEE,
        TABLE_NAME, COLUMN_NAME, GRANTOR,
        PRIVILEGE, GRANTABLE
    FROM
        SYSCAT._SV_COL_PRIVS
    WHERE
        OWNER_ID = USERENV('SCHEMAID')
;



CREATE OR REPLACE VIEW ALL_COL_PRIVS_RECD AS
    SELECT /*+ no_merge */
        GRANTEE, OWNER,
        TABLE_NAME, COLUMN_NAME, GRANTOR,
        PRIVILEGE, GRANTABLE
    FROM
        SYSCAT._SV_COL_PRIVS
    WHERE
        GRANTEE IN (USERENV('SCHEMA'), 'PUBLIC')
;

CREATE OR REPLACE VIEW USER_COL_PRIVS_RECD AS
    SELECT /*+ no_merge */
        OWNER,
        TABLE_NAME, COLUMN_NAME, GRANTOR,
        PRIVILEGE, GRANTABLE
    FROM
        SYSCAT._SV_COL_PRIVS
    WHERE
        GRANTEE_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_COL_PRIVS FOR ALL_COL_PRIVS;
CREATE OR REPLACE PUBLIC SYNONYM DBA_COL_PRIVS FOR DBA_COL_PRIVS;
CREATE OR REPLACE PUBLIC SYNONYM USER_COL_PRIVS FOR USER_COL_PRIVS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_COL_PRIVS_MADE FOR ALL_COL_PRIVS_MADE;
CREATE OR REPLACE PUBLIC SYNONYM USER_COL_PRIVS_MADE FOR USER_COL_PRIVS_MADE;
CREATE OR REPLACE PUBLIC SYNONYM ALL_COL_PRIVS_RECD FOR ALL_COL_PRIVS_RECD;
CREATE OR REPLACE PUBLIC SYNONYM USER_COL_PRIVS_RECD FOR USER_COL_PRIVS_RECD;
GRANT SELECT ON ALL_COL_PRIVS TO PUBLIC;
GRANT SELECT ON USER_COL_PRIVS TO PUBLIC;
GRANT SELECT ON ALL_COL_PRIVS_MADE TO PUBLIC;
GRANT SELECT ON USER_COL_PRIVS_MADE TO PUBLIC;
GRANT SELECT ON ALL_COL_PRIVS_RECD TO PUBLIC;
GRANT SELECT ON USER_COL_PRIVS_RECD TO PUBLIC;




create or replace view _sv_cons_columns
(owner, constraint_name,
 table_name, column_name, position,
 
 owner_id, obj_id, con_id, ref_con_id, con_type_no, ref_act)
as
    select /*+ ordered no_merge */
        u.name, con.name, o.name, col.name,
        case when con.type_no not in (1,
                                     7) then
            cc.pos_no
        end,
        
        o.owner_id, o.obj_id, con.con_id, con.ref_con_id,
        con.type_no, con.ref_act
    from sys._dd_user u, sys._dd_obj o,
         sys._dd_con con, sys._dd_ccol cc,
         sys._dd_col col

    where con.con_id = cc.con_id
      and con.obj_id = col.obj_id
      and con.type_no != 12
      and cc.col_no = col.col_no
      and con.obj_id = o.obj_id
      and o.owner_id = u.user_id
;

CREATE OR REPLACE VIEW DBA_CONS_COLUMNS
AS
    SELECT /*+ no_merge */
        OWNER, CONSTRAINT_NAME, TABLE_NAME, COLUMN_NAME, POSITION
    FROM _SV_CONS_COLUMNS
;

CREATE OR REPLACE VIEW ALL_CONS_COLUMNS
AS
    SELECT /*+ no_merge */
        OWNER, CONSTRAINT_NAME, TABLE_NAME, COLUMN_NAME, POSITION
    FROM _SV_CONS_COLUMNS
    WHERE OWNER_ID = USERENV('SCHEMAID') OR OWNER_ID = 1
          
       OR EXISTS (
            SELECT NULL
            FROM   (SELECT SAU2.PRIV_NO
                    FROM   SYS._DD_SYSAUTH SAU2
                    START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                    CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                   ) SAU
            WHERE (SAU.PRIV_NO    = -483
                    OR SAU.PRIV_NO = -482
                    OR SAU.PRIV_NO = -481
                    OR SAU.PRIV_NO = -480
                    OR SAU.PRIV_NO = -485
                    OR SAU.PRIV_NO = -473
                    OR SAU.PRIV_NO IN (
                          SELECT USER_ID FROM SYS._DD_USER
                          WHERE NAME = 'DBA')
                   )
          )
          
      OR  OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;



CREATE OR REPLACE VIEW ALL_CONS_COLUMNS_INFO
AS
    SELECT /*+ no_merge */
        OWNER, CON_ID, CONSTRAINT_NAME, TABLE_NAME, COLUMN_NAME, POSITION,
        decode(con_type_no,
            1, 'CHECK',
            2, 'PRIMARY KEY',
            3, 'UNIQUE',
            4, 'REFERENTIAL',
            7, 'NOT NULL',
            -1, 'READ ONLY VIEW',
            -2, 'VIEW WITH CHECK OPTION') con_type,
        decode(con_type_no, 4,
                decode (ref_act,
                1, 'CASCADE',
                2, 'SET NULL', 'NO ACTION')
        ) DELETE_RULE,
        REF_CON_ID
    FROM _SV_CONS_COLUMNS
    WHERE OWNER_ID = USERENV('SCHEMAID') OR OWNER_ID = 1
          
       OR EXISTS (
            SELECT NULL
            FROM   (SELECT SAU2.PRIV_NO
                    FROM   SYS._DD_SYSAUTH SAU2
                    START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                    CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                   ) SAU
            WHERE (SAU.PRIV_NO    = -483
                    OR SAU.PRIV_NO = -482
                    OR SAU.PRIV_NO = -481
                    OR SAU.PRIV_NO = -480
                    OR SAU.PRIV_NO = -485
                    OR SAU.PRIV_NO = -473
                    OR SAU.PRIV_NO IN (
                          SELECT USER_ID FROM SYS._DD_USER
                          WHERE NAME = 'DBA')
                   )
          )
          
      OR  OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE VIEW USER_CONS_COLUMNS
AS
    SELECT /*+ no_merge */ OWNER, CONSTRAINT_NAME, TABLE_NAME, COLUMN_NAME, POSITION
    FROM _SV_CONS_COLUMNS
    WHERE OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_CONS_COLUMNS FOR DBA_CONS_COLUMNS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_CONS_COLUMNS FOR ALL_CONS_COLUMNS;
CREATE OR REPLACE PUBLIC SYNONYM USER_CONS_COLUMNS FOR USER_CONS_COLUMNS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_CONS_COLUMNS_INFO
FOR ALL_CONS_COLUMNS_INFO;
GRANT SELECT ON ALL_CONS_COLUMNS_INFO TO PUBLIC;
GRANT SELECT ON ALL_CONS_COLUMNS TO PUBLIC;
GRANT SELECT ON USER_CONS_COLUMNS TO PUBLIC;




create or replace view _sv_log_group_columns
(owner, log_group_name, table_name, column_name, position, logging_property,
 
 owner_id, obj_id)
as
    select /*+ ordered no_merge */
        u.name, con.name, o.name, col.name,
        case when con.type_no not in (1,
                                     7) then
            cc.pos_no
        end,
        decode(0, 1, 'NO LOG', 'LOG'),
        
        o.owner_id, o.obj_id
    from sys._dd_user u, sys._dd_obj o,
         sys._dd_con con, sys._dd_col col,
         sys._dd_ccol cc

    where con.con_id = cc.con_id
      and con.obj_id = col.obj_id
      and con.type_no = 12
      and cc.col_no = col.col_no
      and con.obj_id = o.obj_id
      and o.owner_id = u.user_id
;

CREATE OR REPLACE VIEW DBA_LOG_GROUP_COLUMNS
AS
    SELECT /*+ no_merge */
        OWNER, LOG_GROUP_NAME, TABLE_NAME, COLUMN_NAME, POSITION,
        LOGGING_PROPERTY
    FROM _SV_LOG_GROUP_COLUMNS
;

CREATE OR REPLACE VIEW ALL_LOG_GROUP_COLUMNS
AS
    SELECT /*+ no_merge */
        OWNER, LOG_GROUP_NAME, TABLE_NAME, COLUMN_NAME, POSITION,
        LOGGING_PROPERTY
    FROM _SV_LOG_GROUP_COLUMNS
    WHERE OWNER_ID = USERENV('SCHEMAID') OR OWNER_ID = 1
          
       OR EXISTS (
            SELECT NULL
            FROM   (SELECT SAU2.PRIV_NO
                    FROM   SYS._DD_SYSAUTH SAU2
                    START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                    CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                   ) SAU
            WHERE (SAU.PRIV_NO    = -483
                    OR SAU.PRIV_NO = -482
                    OR SAU.PRIV_NO = -481
                    OR SAU.PRIV_NO = -480
                    OR SAU.PRIV_NO = -485
                    OR SAU.PRIV_NO = -473
                    OR SAU.PRIV_NO IN (
                          SELECT USER_ID FROM SYS._DD_USER
                          WHERE NAME = 'DBA')
                   )
          )
          
      OR  OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE VIEW USER_LOG_GROUP_COLUMNS
AS
    SELECT /*+ no_merge */ OWNER, LOG_GROUP_NAME, TABLE_NAME, COLUMN_NAME, POSITION,
        LOGGING_PROPERTY
    FROM _SV_LOG_GROUP_COLUMNS
    WHERE OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_LOG_GROUP_COLUMNS FOR DBA_LOG_GROUP_COLUMNS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_LOG_GROUP_COLUMNS FOR ALL_LOG_GROUP_COLUMNS;
CREATE OR REPLACE PUBLIC SYNONYM USER_LOG_GROUP_COLUMNS FOR USER_LOG_GROUP_COLUMNS;
GRANT SELECT ON DBA_LOG_GROUP_COLUMNS TO PUBLIC;
GRANT SELECT ON ALL_LOG_GROUP_COLUMNS TO PUBLIC;
GRANT SELECT ON USER_LOG_GROUP_COLUMNS TO PUBLIC;






-- CHECK, PRIMARY KEY, UNIQUE
create or replace view _sv_con_ordinary
(owner_id, obj_id, idx_id,
 constraint_name, type_no, table_name, cond, flags,
 r_owner, r_constraint_name, ref_act)
as
    select /*+ ordered no_merge */
        obj.owner_id,
        obj.obj_id,
        con.idx_id,

        con.name,
        con.type_no,
        obj.name,
        long_to_char(con.condition),
        con.flags,

        NULL, NULL, -- r_owner, r_constraint_name
        con.ref_act
    from
        sys._dd_obj obj,
        sys._dd_con con
    where
        obj.obj_id = con.obj_id and
        con.type_no in
            (1,
             2,
             3)
;

-- REFERENTIAL
create or replace view _sv_con_ref
(owner_id, obj_id, idx_id,
 constraint_name, type_no, table_name, cond, flags,
 r_owner, r_constraint_name, ref_act)
as
    select /*+ no_merge */
        obj.owner_id,
        obj.obj_id,
        con.idx_id,

        con.name,
        con.type_no,
        obj.name,
        long_to_char(con.condition),
        con.flags,

        ref_owner.name,
        ref_con.name,
        con.ref_act
    from
        sys._dd_con con,
        sys._dd_obj obj,
        sys._dd_con ref_con,
        sys._dd_obj ref_obj,
        sys._dd_user ref_owner
    where
        obj.obj_id = con.obj_id and
        con.type_no = 4 and
        ref_con.con_id = con.ref_con_id and
        ref_obj.obj_id = ref_con.obj_id and
        ref_owner.user_id = ref_obj.owner_id
;

-- NOT NULL
create or replace view _sv_con_notnull
(owner_id, obj_id, idx_id,
 constraint_name, type_no, table_name, cond, flags,
 r_owner, r_constraint_name, ref_act)
as
    select /*+ ordered no_merge */
        obj.owner_id,
        obj.obj_id,
        -1,

        con.name,
        7, -- type_no
        obj.name,
        '"' || col.name || '" IS NOT NULL', -- cond

        con.flags,

        NULL, NULL, -- r_owner, r_constraint_name
        con.ref_act
    from
        sys._dd_obj obj,
        sys._dd_con con,
        sys._dd_ccol ccol,
        sys._dd_col col
    where
        obj.obj_id = col.obj_id and
        con.obj_id = col.obj_id and
        obj.obj_id = con.obj_id and
        con.type_no = 7 and
        ccol.con_id = con.con_id and
        col.col_no = ccol.col_no
;

-- VIEW (WITH READ ONLY / WITH CHECK OPTION)

create or replace view _sv_con_view
(owner_id, obj_id, idx_id,
 constraint_name, type_no, table_name, cond, flags,
 r_owner, r_constraint_name, ref_act)
as
    select /*+ no_merge */
        obj.owner_id,
        obj.obj_id,
        -1,

        NULL, -- name
        decode(v.property,
               1, -1,
               2, -2),
        obj.name,
        NULL, -- cond
        0, -- flags

        NULL, NULL, -- r_owner, r_constraint_name
        NULL -- ref_act
    from
        sys._dd_view v,
        sys._dd_obj obj
    where
        v.property <> 0 and
        obj.obj_id = v.obj_id
;

-- ALL CONSTRAINTS

create or replace view _sv_constraints
(owner, constraint_name, con_type, constraint_type,
 table_name, search_condition, r_owner, r_constraint_name,
 delete_rule, validated, generated, status, index_owner, index_name,
 
 obj_id, owner_id)
as
    select /*+ no_merge */
        u.name,
        constraint_name,

        -- con_type
        decode(con1.type_no,
            1, 'CHECK',
            2, 'PRIMARY KEY',
            3, 'UNIQUE',
            4, 'REFERENTIAL',
            7, 'NOT NULL',
            -1, 'READ ONLY VIEW',
            -2, 'VIEW WITH CHECK OPTION'
        ),

        -- constraint_type
        decode(con1.type_no,
            1, 'C',
            2, 'P',
            3, 'U',
            4, 'R',
            
            7, 'C',
            -1, 'O',
            -2, 'V'
        ),

        table_name,
        cond,

        r_owner,
        r_constraint_name,

        -- delete_rule
        decode(con1.type_no, 4,
                decode (con1.ref_act,
                    1, 'CASCADE',
                    2, 'SET NULL', 'NO ACTION')
              ),

        -- validated
        decode(bitand(con1.flags, 4),
                4, 'VALIDATED', 'NOT VALIDATED'),

        -- generated (name)
        decode(bitand(con1.flags, 8),
               8, 'GENERATED NAME', 'USER NAME'),

        -- status
        decode(bitand(con1.flags, 1),
               1, 'DISABLED', 'ENABLED'),

        iu.name,
        io.name,

        con1.obj_id,
        u.user_id
    from
        (
            select * from _sv_con_ordinary
            union all
            select * from _sv_con_ref
            union all
            select * from _sv_con_notnull
            union all
            select * from _sv_con_view
        ) con1,
        sys._dd_user u,
        sys._dd_obj io,
        sys._dd_user iu
    where
        u.user_id = con1.owner_id
    and con1.idx_id = io.obj_id(+)
    and io.owner_id = iu.user_id(+)
;

create or replace view dba_constraints
as
    select /*+ no_merge */
        owner, constraint_name, con_type, constraint_type,
        table_name, search_condition,
        r_owner, r_constraint_name, delete_rule, validated, generated, status,
        index_owner, index_name
    from _sv_constraints
;

create or replace view all_constraints
as
    select /*+ no_merge */
        owner, constraint_name, con_type, constraint_type,
        table_name, search_condition,
        r_owner, r_constraint_name, delete_rule, validated, generated, status,
        index_owner, index_name
    from _sv_constraints
    where  owner_id = USERENV('SCHEMAID') or owner = 'PUBLIC'
          
       or  obj_id IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
          
       or  exists (
               SELECT NULL
               FROM   (SELECT SAU2.PRIV_NO
                       FROM   SYS._DD_SYSAUTH SAU2
                       START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                       CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                      ) SAU
               WHERE (SAU.PRIV_NO    = -483
                       OR SAU.PRIV_NO = -482
                       OR SAU.PRIV_NO = -481
                       OR SAU.PRIV_NO = -480
                       OR SAU.PRIV_NO = -485
                       OR SAU.PRIV_NO = -473
                       OR SAU.PRIV_NO IN (
                             SELECT USER_ID FROM SYS._DD_USER
                             WHERE NAME = 'DBA')
                      )
          )
;


create or replace view user_constraints as
    select /*+ no_merge */
        owner, constraint_name, con_type, constraint_type,
        table_name, search_condition,
        r_owner, r_constraint_name, delete_rule, validated, generated, status,
        index_owner, index_name
    from _sv_constraints
    where owner_id = USERENV('SCHEMAID')
;

create or replace public synonym dba_constraints for dba_constraints;
create or replace public synonym all_constraints for all_constraints;
create or replace public synonym user_constraints for user_constraints;

grant select on all_constraints to public;
grant select on user_constraints to public;




create or replace view _sv_log_groups
(owner, log_group_name, table_name, log_group_type, always, generated,
 
 owner_id, obj_id)
as
    select /*+ ordered no_merge */
        u.name, con.name, o.name,
        case con.type_no
            when 14 then 'PRIMARY KEY LOGGING'
            when 15  then 'UNIQUE KEY LOGGING'
            when 16 then 'FOREIGN KEY LOGGING'
            when 17     then 'ALL COLUMN LOGGING'
            else 'USER LOG GROUP'
        end,
        decode(1, 1, 'ALWAYS', 'CONDITIONAL'),
        decode(con.type_no, 12,
                'USER NAME', 'GENERATED NAME'),
        
        o.owner_id, o.obj_id
    from sys._dd_user u, sys._dd_obj o, sys._dd_con con
    where con.obj_id = o.obj_id
      and (
        con.type_no = 12 or
        con.type_no = 14 or
        con.type_no = 15 or
        con.type_no = 16 or
        con.type_no = 17)
      and o.owner_id = u.user_id
;

CREATE OR REPLACE VIEW DBA_LOG_GROUPS
AS
    SELECT /*+ no_merge */ OWNER, LOG_GROUP_NAME, TABLE_NAME, LOG_GROUP_TYPE, ALWAYS, GENERATED
    FROM _SV_LOG_GROUPS
;

CREATE OR REPLACE VIEW ALL_LOG_GROUPS
AS
    SELECT /*+ no_merge */ OWNER, LOG_GROUP_NAME, TABLE_NAME, LOG_GROUP_TYPE, ALWAYS, GENERATED
    FROM _SV_LOG_GROUPS
    WHERE OWNER_ID = USERENV('SCHEMAID') OR OWNER_ID = 1
          
       OR EXISTS (
            SELECT NULL
            FROM   (SELECT SAU2.PRIV_NO
                    FROM   SYS._DD_SYSAUTH SAU2
                    START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                    CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                   ) SAU
            WHERE (SAU.PRIV_NO    = -483
                    OR SAU.PRIV_NO = -482
                    OR SAU.PRIV_NO = -481
                    OR SAU.PRIV_NO = -480
                    OR SAU.PRIV_NO = -485
                    OR SAU.PRIV_NO = -473
                    OR SAU.PRIV_NO IN (
                          SELECT USER_ID FROM SYS._DD_USER
                          WHERE NAME = 'DBA')
                   )
          )
          
      OR  OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE VIEW USER_LOG_GROUPS
AS
    SELECT /*+ no_merge */ OWNER, LOG_GROUP_NAME, TABLE_NAME, LOG_GROUP_TYPE, ALWAYS, GENERATED
    FROM _SV_LOG_GROUPS
    WHERE OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_LOG_GROUPS FOR DBA_LOG_GROUPS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_LOG_GROUPS FOR ALL_LOG_GROUPS;
CREATE OR REPLACE PUBLIC SYNONYM USER_LOG_GROUPS FOR USER_LOG_GROUPS;
GRANT SELECT ON DBA_LOG_GROUPS TO PUBLIC;
GRANT SELECT ON ALL_LOG_GROUPS TO PUBLIC;
GRANT SELECT ON USER_LOG_GROUPS TO PUBLIC;




CREATE OR REPLACE VIEW DBA_DATA_FILES
(FILE_NAME, FILE_ID, TABLESPACE_NAME, BYTES, BLOCKS, STATUS, RELATIVE_FNO,
 AUTOEXTENSIBLE, MAXBYTES, MAXBLOCKS, INCREMENT_BY)
AS
    SELECT /*+ no_merge */ VT_DBF.NAME,
           VT_DF.FILE#,
           TS.NAME,
           VT_DF_BM.BLOCKS * VT_DF.BLKSIZE,
           VT_DF_BM.BLOCKS,
           'AVAILABLE',
           VT_DF.RELNO,
           DECODE(VT_DF_BM.AUTOEXTEND, 0, 'NO', 'YES'),
           DECODE(VT_DF_BM.AUTOEXTEND, 0, 0, VT_DF.BLKSIZE * VT_DF_BM.MAX_SIZE),
           DECODE(VT_DF_BM.AUTOEXTEND, 0, 0, VT_DF_BM.MAX_SIZE),
           VT_DF_BM.INCREMENT
    FROM   SYS._DD_TS TS,
           SYS._VT_DATAFILE VT_DF, SYS._VT_DATAFILE_HEADER VT_DF_HDR,
           SYS._VT_DATAFILE_BM VT_DF_BM, SYS._VT_DBFILE VT_DBF
    WHERE  TS.TS_ID = VT_DF.TSNO
      AND  VT_DF.FILE# = VT_DF_HDR.FILE#
      AND  VT_DF.FILE# = VT_DF_BM.FILE#
      AND  VT_DF.NAME = VT_DBF.FILE#
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_DATA_FILES FOR DBA_DATA_FILES;
CREATE OR REPLACE PUBLIC SYNONYM DBA_DATAFILES FOR DBA_DATA_FILES;




CREATE OR REPLACE VIEW DBA_TEMP_FILES
(FILE_NAME, FILE_ID, TABLESPACE_NAME, BYTES, BLOCKS, STATUS, RELATIVE_FNO,
 AUTOEXTENSIBLE, MAXBYTES, MAXBLOCKS, INCREMENT_BY)
AS
    SELECT /*+ no_merge */ VT_DBF.NAME,
           VT_DF.FILE#,
           TS.NAME,
           VT_DF.BLKSIZE * VT_DF.BLOCKS,
           VT_DF.BLOCKS,
           'AVAILABLE',
           VT_DF.RFILE#,
           DECODE(VT_DF.AUTOEXTEND, 0, 'NO', 'YES'),
           DECODE(VT_DF.AUTOEXTEND, 0, 0, VT_DF.BLKSIZE * VT_DF.MAX_SIZE),
           DECODE(VT_DF.AUTOEXTEND, 0, 0, VT_DF.MAX_SIZE),
           VT_DF.INCREMENT
    FROM   SYS._DD_TS TS,
           SYS._VT_TEMPFILE VT_DF, SYS._VT_DBFILE VT_DBF
    WHERE  TS.TS_ID = VT_DF.TS#
      AND  VT_DF.NAME = VT_DBF.FILE#
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TEMP_FILES FOR DBA_TEMP_FILES;
CREATE OR REPLACE PUBLIC SYNONYM DBA_TEMPFILES FOR DBA_TEMP_FILES;



CREATE OR REPLACE VIEW DBA_IDX_COLUMNS
(INDEX_OWNER, INDEX_NAME, TABLE_OWNER, TABLE_NAME,
 COLUMN_NAME, COLUMN_POSITION, COLUMN_LENGTH, DESCEND)
AS
    SELECT /*+ no_merge */ IO.NAME, IDX.NAME, BO.NAME, BASE.NAME,
           C.NAME, IC.POS_NO + 1, C.LEN,
           decode(bitand(IC.property, 1), 1, 'DESC', 'ASC')
    FROM   SYS._DD_COL C, SYS._DD_USER BO, SYS._DD_OBJ BASE, SYS._DD_USER IO,
           SYS._DD_OBJ IDX, SYS._DD_ICOL IC, SYS._DD_IDX I
    WHERE IC.OBJ_ID = I.OBJ_ID
      AND I.TYPE_NO IN (1,
                        4,
                        10,
                        11,
                        12,
                        13,
                        16)
      AND IO.USER_ID = IDX.OWNER_ID
      AND IDX.OBJ_ID = I.OBJ_ID
      AND BASE.OBJ_ID = I.BO_ID
      AND BASE.OWNER_ID = BO.USER_ID
      AND C.OBJ_ID = BASE.OBJ_ID
      AND IC.COL_NO = C.COL_NO

UNION ALL

    SELECT IO.NAME, IDX.NAME, BO.NAME, BASE.NAME,
           '- EXPRESSION COLUMN -', IC.POS_NO + 1, NULL,
           decode(bitand(IC.property, 1), 1, 'DESC', 'ASC')
    FROM   SYS._DD_USER BO, SYS._DD_OBJ BASE, SYS._DD_USER IO,
           SYS._DD_OBJ IDX, SYS._DD_ICOL IC, SYS._DD_IDX I
    WHERE IC.OBJ_ID = I.OBJ_ID
      AND I.TYPE_NO IN 1
      AND IO.USER_ID = IDX.OWNER_ID
      AND IDX.OBJ_ID = I.OBJ_ID
      AND BASE.OBJ_ID = I.BO_ID
      AND BASE.OWNER_ID = BO.USER_ID
      AND IC.COL_NO = -1
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_IDX_COLUMNS FOR DBA_IDX_COLUMNS;
CREATE OR REPLACE PUBLIC SYNONYM DBA_IND_COLUMNS FOR DBA_IDX_COLUMNS;


CREATE OR REPLACE VIEW ALL_IDX_COLUMNS
(INDEX_OWNER, INDEX_NAME, TABLE_OWNER, TABLE_NAME,
 COLUMN_NAME, COLUMN_POSITION, COLUMN_LENGTH, DESCEND)
AS
    SELECT /*+ no_merge */ IO.NAME, IDX.NAME, BO.NAME, BASE.NAME,
           C.NAME, IC.POS_NO + 1, C.LEN,
           decode(bitand(IC.property, 1), 1, 'DESC', 'ASC')
    FROM   SYS._DD_COL C, SYS._DD_USER BO, SYS._DD_OBJ BASE, SYS._DD_USER IO,
           SYS._DD_OBJ IDX, SYS._DD_ICOL IC, SYS._DD_IDX I
    WHERE IC.OBJ_ID = I.OBJ_ID
      AND I.TYPE_NO IN (1,
                        4,
                        10,
                        11,
                        12,
                        13,
                        16)
      AND IO.USER_ID = IDX.OWNER_ID
      AND IDX.OBJ_ID = I.OBJ_ID
      AND BASE.OBJ_ID = I.BO_ID
      AND BASE.OWNER_ID = BO.USER_ID
      AND C.OBJ_ID = BASE.OBJ_ID
      AND C.COL_NO = IC.COL_NO
      AND (IDX.OWNER_ID = USERENV('SCHEMAID')
           OR
           IDX.OWNER_ID = 1
           OR EXISTS (SELECT NULL
                      FROM   (SELECT SAU2.PRIV_NO
                              FROM   SYS._DD_SYSAUTH SAU2
                              START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                              CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                             ) SAU
                      WHERE (SAU.PRIV_NO    = -483
                              OR SAU.PRIV_NO = -482
                              OR SAU.PRIV_NO = -481
                              OR SAU.PRIV_NO = -480
                              OR SAU.PRIV_NO = -485
                              OR SAU.PRIV_NO = -473
                              OR SAU.PRIV_NO IN (
                                    SELECT USER_ID FROM SYS._DD_USER
                                    WHERE NAME = 'DBA')
                             )
                     )
           OR BASE.OWNER_ID = USERENV('SCHEMAID')
           OR BASE.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
           )

UNION ALL

    SELECT IO.NAME, IDX.NAME, BO.NAME, BASE.NAME,
           '- EXPRESSION COLUMN -', IC.POS_NO + 1, NULL,
           decode(bitand(IC.property, 1), 1, 'DESC', 'ASC')
    FROM   SYS._DD_USER BO, SYS._DD_OBJ BASE, SYS._DD_USER IO,
           SYS._DD_OBJ IDX, SYS._DD_ICOL IC, SYS._DD_IDX I
    WHERE IC.OBJ_ID = I.OBJ_ID
      AND I.TYPE_NO = 1
      AND IO.USER_ID = IDX.OWNER_ID
      AND IDX.OBJ_ID = I.OBJ_ID
      AND BASE.OBJ_ID = I.BO_ID
      AND BASE.OWNER_ID = BO.USER_ID
      AND IC.COL_NO = -1
      AND (IDX.OWNER_ID = USERENV('SCHEMAID')
           OR
           IDX.OWNER_ID = 1
           OR EXISTS (SELECT NULL
                      FROM   (SELECT SAU2.PRIV_NO
                              FROM   SYS._DD_SYSAUTH SAU2
                              START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                              CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                             ) SAU
                      WHERE (SAU.PRIV_NO    = -483
                              OR SAU.PRIV_NO = -482
                              OR SAU.PRIV_NO = -481
                              OR SAU.PRIV_NO = -480
                              OR SAU.PRIV_NO = -485
                              OR SAU.PRIV_NO = -473
                              OR SAU.PRIV_NO IN (
                                    SELECT USER_ID FROM SYS._DD_USER
                                    WHERE NAME = 'DBA')
                             )
                     )
           OR BASE.OWNER_ID = USERENV('SCHEMAID')
           OR BASE.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
           )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_IDX_COLUMNS FOR ALL_IDX_COLUMNS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_IND_COLUMNS FOR ALL_IDX_COLUMNS;
GRANT SELECT ON ALL_IDX_COLUMNS TO PUBLIC;

CREATE OR REPLACE VIEW USER_IDX_COLUMNS
(INDEX_NAME, TABLE_OWNER, TABLE_NAME,
 COLUMN_NAME, COLUMN_POSITION, COLUMN_LENGTH, DESCEND)
AS
    SELECT /*+ no_merge */ IDX.NAME, BO.NAME, BASE.NAME,
           C.NAME, IC.POS_NO + 1, C.LEN,
           decode(bitand(IC.property, 1), 1, 'DESC', 'ASC')
    FROM   SYS._DD_COL C, SYS._DD_USER BO, SYS._DD_OBJ BASE,
           SYS._DD_OBJ IDX, SYS._DD_ICOL IC, SYS._DD_IDX I
    WHERE IC.OBJ_ID = I.OBJ_ID
      AND I.TYPE_NO IN (1,
                        4,
                        10,
                        11,
                        12,
                        13,
                        16)
      AND IDX.OBJ_ID = I.OBJ_ID
      AND BASE.OBJ_ID = I.BO_ID
      AND BASE.OWNER_ID = BO.USER_ID
      AND C.OBJ_ID = BASE.OBJ_ID
      AND IC.COL_NO = C.COL_NO
      AND IDX.OWNER_ID = USERENV('SCHEMAID')

UNION ALL

    SELECT IDX.NAME, BO.NAME, BASE.NAME,
           '- EXPRESSION COLUMN -', IC.POS_NO + 1, NULL,
           decode(bitand(IC.property, 1), 1, 'DESC', 'ASC')
    FROM   SYS._DD_USER BO, SYS._DD_OBJ BASE,
           SYS._DD_OBJ IDX, SYS._DD_ICOL IC, SYS._DD_IDX I
    WHERE IC.OBJ_ID = I.OBJ_ID
      AND I.TYPE_NO = 1
      AND IDX.OBJ_ID = I.OBJ_ID
      AND BASE.OBJ_ID = I.BO_ID
      AND BASE.OWNER_ID = BO.USER_ID
      AND IC.COL_NO = -1
      AND IDX.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_IDX_COLUMNS FOR USER_IDX_COLUMNS;
CREATE OR REPLACE PUBLIC SYNONYM USER_IND_COLUMNS FOR USER_IDX_COLUMNS;
GRANT SELECT ON USER_IDX_COLUMNS TO PUBLIC;



CREATE OR REPLACE VIEW ALL_IDX_COLUMNS_INFO
(INDEX_OWNER, INDEX_NAME, TABLE_OWNER, TABLE_NAME, UNIQUENESS, DISTINCT_KEYS,
 LEAF_BLOCKS, COLUMN_NAME, COLUMN_POSITION, COLUMN_LENGTH, DESCEND)
AS
    SELECT /*+ no_merge */ IO.NAME, IDX.NAME, BO.NAME, BASE.NAME,
    DECODE(BITAND(I.FLAGS, 4), 0, 'NONUNIQUE', 'UNIQUE'),
    i.distinct_key, i.leaf_blk_cnt,
           C.NAME, IC.POS_NO + 1, C.LEN,
           decode(bitand(IC.property, 1), 1, 'DESC', 'ASC')
    FROM   SYS._DD_COL C, SYS._DD_USER BO,SYS._DD_OBJ BASE,SYS._DD_USER IO,SYS._DD_OBJ IDX,SYS._DD_ICOL IC, SYS._DD_IDX I
    WHERE IC.OBJ_ID = I.OBJ_ID
      AND I.TYPE_NO IN (1,
                        4,
                        10,
                        11,
                        12,
                        13,
                        16)
      AND IO.USER_ID = IDX.OWNER_ID
      AND IDX.OBJ_ID = I.OBJ_ID
      AND (IDX.OWNER_ID = USERENV('SCHEMAID')
           OR
           IDX.OWNER_ID = 1
           OR EXISTS (SELECT NULL
                      FROM   (SELECT SAU2.PRIV_NO
                              FROM   SYS._DD_SYSAUTH SAU2
                              START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                              CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                             ) SAU
                      WHERE (SAU.PRIV_NO    = -483
                              OR SAU.PRIV_NO = -482
                              OR SAU.PRIV_NO = -481
                              OR SAU.PRIV_NO = -480
                              OR SAU.PRIV_NO = -485
                              OR SAU.PRIV_NO = -473
                              OR SAU.PRIV_NO IN (
                                    SELECT USER_ID FROM SYS._DD_USER
                                    WHERE NAME = 'DBA')
                             )
                     )
           OR BASE.OWNER_ID = USERENV('SCHEMAID')
           OR BASE.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
           )
      AND BASE.OBJ_ID = I.BO_ID
      AND BASE.OWNER_ID = BO.USER_ID
      AND C.OBJ_ID = BASE.OBJ_ID
      AND C.COL_NO = IC.COL_NO
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_IDX_COLUMNS_INFO FOR ALL_IDX_COLUMNS_INFO;
GRANT SELECT ON ALL_IDX_COLUMNS_INFO TO PUBLIC;



CREATE OR REPLACE VIEW ALL_IDX_AND_LOB_COLUMNS_INFO
(TABLE_OWNER, TABLE_NAME, INDEX_OWNER, INDEX_NAME, INDEX_TYPE, COLUMN_NAME,
 COLUMN_POSITION)
AS
    SELECT /*+ LEADING(IC I) NO_MERGE */
        BU.NAME, BO.NAME, IU.NAME,
        IDX.NAME, 
        DECODE(BITAND(I.FLAGS, 16), 0, '',
               'FUNCTION-BASED ') ||
        DECODE(I.TYPE_NO, 
               1, 
                'NORMAL' || DECODE(BITAND(I.FLAGS, 64), 0, 
                                   '', '/REV'),
               4, 'IOT - TOP',
               10, 'R-TREE',
               11, 'DOMAIN',
               12, 'DOMAIN',
               13, 'CONTEXT',
               16, 'BITMAP',
               'UNKNOWN'),
        C.NAME, IC.POS_NO + 1
    FROM   
        SYS._DD_COL C, SYS._DD_USER BU, SYS._DD_OBJ BO, SYS._DD_USER IU,
        SYS._DD_OBJ IDX, SYS._DD_ICOL IC, SYS._DD_IDX I
    WHERE IC.OBJ_ID = I.OBJ_ID
      AND I.TYPE_NO IN (1,
                        4,
                        10,
                        11,
                        12,
                        13,
                        16)
      AND IU.USER_ID = IDX.OWNER_ID
      AND IDX.OBJ_ID = I.OBJ_ID
      AND BO.OBJ_ID = I.BO_ID
      AND BO.OWNER_ID = BU.USER_ID
      AND C.OBJ_ID = BO.OBJ_ID
      AND C.COL_NO = IC.COL_NO
      AND (IDX.OWNER_ID = USERENV('SCHEMAID')
           OR
           IDX.OWNER_ID = 1
           OR EXISTS (SELECT NULL
                      FROM   (SELECT SAU2.PRIV_NO
                              FROM   SYS._DD_SYSAUTH SAU2
                              START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                              CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                             ) SAU
                      WHERE (SAU.PRIV_NO    = -483
                              OR SAU.PRIV_NO = -482
                              OR SAU.PRIV_NO = -481
                              OR SAU.PRIV_NO = -480
                              OR SAU.PRIV_NO = -485
                              OR SAU.PRIV_NO = -473
                              OR SAU.PRIV_NO IN (
                                    SELECT USER_ID FROM SYS._DD_USER
                                    WHERE NAME = 'DBA')
                             )
                     )
           OR BO.OWNER_ID = USERENV('SCHEMAID')
           OR BO.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
           )

UNION ALL

    SELECT /*+ LEADING(IC I) */
        BU.NAME, BO.NAME, IU.NAME,
        IDX.NAME,
        DECODE(BITAND(I.FLAGS, 16), 0, '',
               'FUNCTION-BASED ') || 'NORMAL',
        '- EXPRESSION COLUMN -', IC.POS_NO + 1
    FROM   
        SYS._DD_USER BU, SYS._DD_OBJ BO, SYS._DD_USER IU,
        SYS._DD_OBJ IDX, SYS._DD_ICOL IC, SYS._DD_IDX I
    WHERE IC.OBJ_ID = I.OBJ_ID
      AND I.TYPE_NO = 1
      AND IU.USER_ID = IDX.OWNER_ID
      AND IDX.OBJ_ID = I.OBJ_ID
      AND BO.OBJ_ID = I.BO_ID
      AND BO.OWNER_ID = BU.USER_ID
      AND IC.COL_NO = -1
      AND (IDX.OWNER_ID = USERENV('SCHEMAID')
           OR
           IDX.OWNER_ID = 1
           OR EXISTS (SELECT NULL
                      FROM   (SELECT SAU2.PRIV_NO
                              FROM   SYS._DD_SYSAUTH SAU2
                              START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                              CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                             ) SAU
                      WHERE (SAU.PRIV_NO    = -483
                              OR SAU.PRIV_NO = -482
                              OR SAU.PRIV_NO = -481
                              OR SAU.PRIV_NO = -480
                              OR SAU.PRIV_NO = -485
                              OR SAU.PRIV_NO = -473
                              OR SAU.PRIV_NO IN (
                                    SELECT USER_ID FROM SYS._DD_USER
                                    WHERE NAME = 'DBA')
                             )
                     )
           OR BO.OWNER_ID = USERENV('SCHEMAID')
           OR BO.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
           )
           
UNION ALL

    SELECT /*+ LEADING(L I) */
        BU.NAME, BO.NAME, IU.NAME,
        IDX.NAME, 
        'LOB',
        C.NAME, 1
    FROM   
        SYS._DD_COL C, SYS._DD_USER BU, SYS._DD_OBJ BO, SYS._DD_USER IU,
        SYS._DD_OBJ IDX, SYS._DD_LOB L, SYS._DD_IDX I
    WHERE L.IDX_ID = I.OBJ_ID
      AND I.TYPE_NO = 8
      AND IU.USER_ID = IDX.OWNER_ID
      AND IDX.OBJ_ID = I.OBJ_ID
      AND BO.OBJ_ID = I.BO_ID
      AND BO.OWNER_ID = BU.USER_ID
      AND C.OBJ_ID = BO.OBJ_ID
      AND C.COL_NO = L.COL_NO
      AND (IDX.OWNER_ID = USERENV('SCHEMAID')
           OR
           IDX.OWNER_ID = 1
           OR EXISTS (SELECT NULL
                      FROM   (SELECT SAU2.PRIV_NO
                              FROM   SYS._DD_SYSAUTH SAU2
                              START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                              CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                             ) SAU
                      WHERE (SAU.PRIV_NO    = -483
                              OR SAU.PRIV_NO = -482
                              OR SAU.PRIV_NO = -481
                              OR SAU.PRIV_NO = -480
                              OR SAU.PRIV_NO = -485
                              OR SAU.PRIV_NO = -473
                              OR SAU.PRIV_NO IN (
                                    SELECT USER_ID FROM SYS._DD_USER
                                    WHERE NAME = 'DBA')
                             )
                     )
           OR BO.OWNER_ID = USERENV('SCHEMAID')
           OR BO.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
           )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_IDX_AND_LOB_COLUMNS_INFO 
    FOR ALL_IDX_AND_LOB_COLUMNS_INFO;
GRANT SELECT ON ALL_IDX_AND_LOB_COLUMNS_INFO TO PUBLIC;


CREATE OR REPLACE VIEW DBA_IDX_EXPRESSIONS
(INDEX_OWNER, INDEX_NAME, TABLE_OWNER, TABLE_NAME,
 COLUMN_POSITION, COLUMN_EXPRESSION)
AS
    SELECT /*+ no_merge */ IO.NAME, I.NAME, BO.NAME, B.NAME, IC.POS_NO + 1, IC.EXPRESSION
    FROM SYS._DD_ICOL IC, SYS._DD_OBJ I, SYS._DD_OBJ B,
         SYS._DD_USER IO, SYS._DD_USER BO
    WHERE IC.COL_NO = -1        
      AND IC.OBJ_ID = I.OBJ_ID
      AND IC.BO_ID = B.OBJ_ID
      AND IO.USER_ID = I.OWNER_ID
      AND BO.USER_ID = B.OWNER_ID
/

CREATE OR REPLACE PUBLIC SYNONYM DBA_IDX_EXPRESSIONS FOR DBA_IDX_EXPRESSIONS;
CREATE OR REPLACE PUBLIC SYNONYM DBA_IND_EXPRESSIONS FOR DBA_IDX_EXPRESSIONS;

CREATE OR REPLACE VIEW ALL_IDX_EXPRESSIONS
(INDEX_OWNER, INDEX_NAME, TABLE_OWNER, TABLE_NAME,
 COLUMN_POSITION, COLUMN_EXPRESSION)
AS
    SELECT /*+ no_merge */ IO.NAME, I.NAME, BO.NAME, B.NAME, IC.POS_NO + 1, IC.EXPRESSION
    FROM SYS._DD_ICOL IC, SYS._DD_OBJ I, SYS._DD_OBJ B,
         SYS._DD_USER IO, SYS._DD_USER BO
    WHERE IC.COL_NO = -1        
      AND IC.OBJ_ID = I.OBJ_ID
      AND IC.BO_ID = B.OBJ_ID
      AND IO.USER_ID = I.OWNER_ID
      AND BO.USER_ID = B.OWNER_ID
      AND (BO.USER_ID = USERENV('SCHEMAID') OR BO.USER_ID = 1
           
          OR EXISTS (SELECT NULL
                     FROM   (SELECT SAU2.PRIV_NO
                             FROM   SYS._DD_SYSAUTH SAU2
                             START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                             CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                            ) SAU
                     WHERE (SAU.PRIV_NO    = -483
                             OR SAU.PRIV_NO = -482
                             OR SAU.PRIV_NO = -481
                             OR SAU.PRIV_NO = -480
                             OR SAU.PRIV_NO = -485
                             OR SAU.PRIV_NO = -473
                             OR SAU.PRIV_NO IN (
                                   SELECT USER_ID FROM SYS._DD_USER
                                   WHERE NAME = 'DBA')
                            )
                    )
              
          OR B.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
        )
/

CREATE OR REPLACE PUBLIC SYNONYM ALL_IDX_EXPRESSIONS FOR ALL_IDX_EXPRESSIONS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_IND_EXPRESSIONS FOR ALL_IDX_EXPRESSIONS;
GRANT SELECT ON ALL_IDX_EXPRESSIONS TO PUBLIC;
GRANT SELECT ON ALL_IND_EXPRESSIONS TO PUBLIC;

CREATE OR REPLACE VIEW USER_IDX_EXPRESSIONS
(INDEX_NAME, TABLE_NAME, COLUMN_POSITION, COLUMN_EXPRESSION)
AS
    SELECT /*+ no_merge */ I.NAME, B.NAME, IC.POS_NO + 1, IC.EXPRESSION
    FROM SYS._DD_ICOL IC, SYS._DD_OBJ I, SYS._DD_OBJ B,
         SYS._DD_USER IO, SYS._DD_USER BO
    WHERE IC.COL_NO = -1        
      AND IC.OBJ_ID = I.OBJ_ID
      AND IC.BO_ID = B.OBJ_ID
      AND IO.USER_ID = I.OWNER_ID
      AND BO.USER_ID = B.OWNER_ID
      AND (BO.USER_ID = USERENV('SCHEMAID') OR IO.USER_ID = USERENV('SCHEMAID'))
/

CREATE OR REPLACE PUBLIC SYNONYM USER_IDX_EXPRESSIONS FOR USER_IDX_EXPRESSIONS;
CREATE OR REPLACE PUBLIC SYNONYM USER_IND_EXPRESSIONS FOR USER_IDX_EXPRESSIONS;
GRANT SELECT ON USER_IDX_EXPRESSIONS TO PUBLIC;
GRANT SELECT ON USER_IND_EXPRESSIONS TO PUBLIC;



CREATE OR REPLACE VIEW _sv_indexes
(OWNER, INDEX_NAME, INDEX_TYPE, TABLE_OWNER, TABLE_NAME, TABLE_TYPE,
 UNIQUENESS, TABLESPACE_NAME, INI_TRANS, PCT_FREE,
 INITIAL_EXTENT, NEXT_EXTENT, LOGGING,
 BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS,
  CLUSTERING_FACTOR, STATUS,
 NUM_ROWS,  LAST_ANALYZED, PARTITIONED, BUFFER_POOL,
 GENERATED_BY_SYSTEM, REFERENTIAL, obj_id, owner_id, MAX_EXTENTS,
 INCLUDE_COLUMN, MIN_EXTENTS, PCTTHRES, VISIBILITY, 
 ITYP_OWNER, ITYP_NAME, PARAMETERS, DOMIDX_STATUS, DOMIDX_OPSTATUS, DOMIDX_MANAGEMENT,
 BO_ID)
AS
    SELECT /*+ ordered no_merge */IU.NAME, IO.NAME,
           DECODE(BITAND(I.FLAGS, 16), 0, '',
                         'FUNCTION-BASED ') ||
           DECODE(I.TYPE_NO, 1, 'NORMAL' ||
                  DECODE(BITAND(I.FLAGS, 64), 0, '', '/REV'),
                  4, 'IOT - TOP',
                  8, 'LOB',
                  18, 'LOB - DEDUP',
                  10, 'R-TREE',
                  11, 'DOMAIN',
                  12, 'DOMAIN',
                  13, 'CONTEXT',
                  16, 'BITMAP',
                  'UNKNOWN'),
           BU.NAME, BO.NAME,
           DECODE(BO.TYPE_NO,
                  0, 'INDEX',
                  1, 'TABLE',
                  2, 'VIEW',
                  3, 'SYNONYM',
                  'UNDEFINED'),
           DECODE(BITAND(I.FLAGS, 4), 0, 'NONUNIQUE', 'UNIQUE'),
           TS.NAME, I.INITRANS, I.PCTFREE,
           VT_TS.BLKSIZE * TS.UNIT, --IE.BYTES,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           DECODE(BITAND(I.FLAGS, 1), 0, 'YES', 'NO'),
           I.BLEVEL, I.LEAF_BLK_CNT, I.DISTINCT_KEY, I.CLUFAC,
           DECODE(BITAND(I.FLAGS, 2), 0, 'VALID',
                  'UNUSABLE'),
           TRUNC(I.ROW_CNT), I.ANALYZETIME,
           DECODE(BITAND(I.FLAGS, 256 +
                       512), 0, 'NO', 'YES'),
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT'),
           DECODE(BITAND(IO.FLAGS, 4), 0, 'N', 'Y'),
           DECODE(BITAND(I.FLAGS, 128+4)
                   , 128, 'YES', 'NO'),
           IO.OBJ_ID, IU.USER_ID, S.MAX_EXTS,
           TO_NUMBER(DECODE(I.INCLCOL, -1, NULL, I.INCLCOL)),
           TO_NUMBER(DECODE(BITAND(I.FLAGS, 256 +
                                   512), 0, 1, NULL)),
           I.PCTTHRES,
           DECODE(BITAND(I.FLAGS, 131072), 0, 'VISIBLE', 'INVISIBLE'),
           CAST (NULL AS VARCHAR2(30)),
           CAST (NULL AS VARCHAR2(30)),
           CAST (NULL AS VARCHAR2(1000)),
           CAST (NULL AS VARCHAR2(3)),
           CAST (NULL AS VARCHAR2(12)),
           CAST (NULL AS VARCHAR2(14)),
           I.BO_ID
    FROM   SYS._DD_USER BU, SYS._DD_OBJ BO,
           SYS._DD_IDX I, SYS._DD_OBJ IO, SYS._DD_USER IU,
           SYS._DD_SGMT S, SYS._DD_TS TS,
           SYS._VT_TABLESPACE VT_TS
    WHERE  IU.USER_ID = IO.OWNER_ID
      AND  IO.OBJ_ID = I.OBJ_ID
      AND  BO.OBJ_ID = I.BO_ID
      AND  BITAND(BO.FLAGS, 128) != 128
      AND  BU.USER_ID = BO.OWNER_ID
      AND  I.SGMT_ID = S.SGMT_ID(+)
      AND  S.TS_ID = TS.TS_ID(+)
      AND  TS.TS_ID = VT_TS.TSNO(+)
;


CREATE OR REPLACE VIEW DBA_INDEXES
(OWNER, INDEX_NAME, INDEX_TYPE, TABLE_OWNER, TABLE_NAME, TABLE_TYPE,
 UNIQUENESS, TABLESPACE_NAME, INI_TRANS, PCT_FREE,
 INITIAL_EXTENT, NEXT_EXTENT, LOGGING,
 BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS,
  CLUSTERING_FACTOR, STATUS,
 NUM_ROWS,  LAST_ANALYZED, PARTITIONED, BUFFER_POOL,
 GENERATED_BY_SYSTEM, REFERENTIAL, MAX_EXTENTS, INCLUDE_COLUMN,
 MIN_EXTENTS, PCT_THRESHOLD, VISIBILITY, ITYP_OWNER, ITYP_NAME,  
 PARAMETERS, DOMIDX_STATUS, DOMIDX_OPSTATUS, DOMIDX_MANAGEMENT)
AS
    SELECT /*+ no_merge */ OWNER, INDEX_NAME, INDEX_TYPE, TABLE_OWNER, TABLE_NAME, TABLE_TYPE,
           UNIQUENESS, TABLESPACE_NAME, INI_TRANS, PCT_FREE,
           INITIAL_EXTENT, NEXT_EXTENT, LOGGING,
           BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS,
            CLUSTERING_FACTOR, STATUS,
           NUM_ROWS,  LAST_ANALYZED, PARTITIONED, BUFFER_POOL,
           GENERATED_BY_SYSTEM, REFERENTIAL, MAX_EXTENTS, INCLUDE_COLUMN,
           MIN_EXTENTS, PCTTHRES, VISIBILITY, ITYP_OWNER, ITYP_NAME, 
           PARAMETERS, DOMIDX_STATUS, DOMIDX_OPSTATUS, DOMIDX_MANAGEMENT
    FROM _sv_indexes
;
CREATE OR REPLACE PUBLIC SYNONYM DBA_INDEXES FOR DBA_INDEXES;

CREATE OR REPLACE VIEW ALL_INDEXES
(OWNER, INDEX_NAME, INDEX_TYPE, TABLE_OWNER, TABLE_NAME, TABLE_TYPE,
 UNIQUENESS, TABLESPACE_NAME, INI_TRANS, PCT_FREE,
 INITIAL_EXTENT, NEXT_EXTENT, LOGGING,
 BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS,
  CLUSTERING_FACTOR, STATUS,
 NUM_ROWS,  LAST_ANALYZED, PARTITIONED, BUFFER_POOL,
 GENERATED_BY_SYSTEM, REFERENTIAL, MAX_EXTENTS, INCLUDE_COLUMN,
 MIN_EXTENTS, PCT_THRESHOLD, VISIBILITY, ITYP_OWNER, ITYP_NAME,  
 PARAMETERS, DOMIDX_STATUS, DOMIDX_OPSTATUS, DOMIDX_MANAGEMENT)
AS
    SELECT /*+ no_merge */ OWNER, INDEX_NAME, INDEX_TYPE, TABLE_OWNER, TABLE_NAME, TABLE_TYPE,
           UNIQUENESS, TABLESPACE_NAME, INI_TRANS, PCT_FREE,
           INITIAL_EXTENT, NEXT_EXTENT, LOGGING,
           BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS,
            CLUSTERING_FACTOR, STATUS,
           NUM_ROWS,  LAST_ANALYZED, PARTITIONED, BUFFER_POOL,
           GENERATED_BY_SYSTEM, REFERENTIAL, MAX_EXTENTS, INCLUDE_COLUMN,
           MIN_EXTENTS, PCTTHRES, VISIBILITY, ITYP_OWNER, ITYP_NAME,
           PARAMETERS, DOMIDX_STATUS, DOMIDX_OPSTATUS, DOMIDX_MANAGEMENT
    FROM _sv_indexes
    WHERE OWNER_ID = USERENV('SCHEMAID') or OWNER_ID = 1
          
       OR
       (
          (exists (SELECT NULL 
                   FROM   SYS._DD_OBJAUTH OA
                   WHERE  GRANTEE_ID in (SELECT /*+no_unnest*/USER_ID FROM X$USER_ROLE)
                   AND    OA.OBJ_ID = _sv_indexes.BO_ID)
          )
       )
          
       OR
          (exists (SELECT NULL
                   FROM   (SELECT SAU2.PRIV_NO
                           FROM   SYS._DD_SYSAUTH SAU2
                           START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                           CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                          ) SAU
                   WHERE (SAU.PRIV_NO    = -483
                           OR SAU.PRIV_NO = -482
                           OR SAU.PRIV_NO = -481
                           OR SAU.PRIV_NO = -480
                           OR SAU.PRIV_NO = -485
                           OR SAU.PRIV_NO = -473
                           OR SAU.PRIV_NO IN (
                                 SELECT USER_ID FROM SYS._DD_USER
                                 WHERE NAME = 'DBA')
                          )
                  )
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_INDEXES FOR ALL_INDEXES;
GRANT SELECT ON ALL_INDEXES TO PUBLIC;

CREATE OR REPLACE VIEW USER_INDEXES
(INDEX_NAME, INDEX_TYPE, TABLE_OWNER, TABLE_NAME, TABLE_TYPE, UNIQUENESS,
 TABLESPACE_NAME, INI_TRANS, PCT_FREE, INITIAL_EXTENT, NEXT_EXTENT,
 LOGGING, BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS,
  CLUSTERING_FACTOR, STATUS,
 NUM_ROWS,  LAST_ANALYZED, PARTITIONED, BUFFER_POOL,
 GENERATED_BY_SYSTEM, REFERENTIAL, MAX_EXTENTS, INCLUDE_COLUMN,
 MIN_EXTENTS, PCT_THRESHOLD, VISIBILITY, ITYP_OWNER, ITYP_NAME,  
 PARAMETERS, DOMIDX_STATUS, DOMIDX_OPSTATUS, DOMIDX_MANAGEMENT)
AS
SELECT /*+ no_merge */ INDEX_NAME, INDEX_TYPE, TABLE_OWNER, TABLE_NAME, TABLE_TYPE, UNIQUENESS,
       TABLESPACE_NAME, INI_TRANS, PCT_FREE,
       INITIAL_EXTENT, NEXT_EXTENT, LOGGING,
       BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS,
        CLUSTERING_FACTOR, STATUS,
       NUM_ROWS, LAST_ANALYZED, PARTITIONED, BUFFER_POOL,
       GENERATED_BY_SYSTEM, REFERENTIAL, MAX_EXTENTS, INCLUDE_COLUMN,
       MIN_EXTENTS, PCTTHRES, VISIBILITY, ITYP_OWNER, ITYP_NAME,
       PARAMETERS, DOMIDX_STATUS, DOMIDX_OPSTATUS, DOMIDX_MANAGEMENT
FROM   _sv_indexes
WHERE  owner_id = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_INDEXES FOR USER_INDEXES;
GRANT SELECT ON USER_INDEXES TO PUBLIC;



CREATE OR REPLACE VIEW "_SV_OBJ"
(OBJ_ID, OWNER_ID, TYPE_NO, NAME,  FLAGS)
AS
    SELECT /*+ no_merge */ O.OBJ_ID, O.OWNER_ID, O.TYPE_NO, O.NAME,  O.FLAGS
    FROM SYS._DD_OBJ O
    WHERE TYPE_NO != 8
UNION
    SELECT O.OBJ_ID, O.OWNER_ID, O.TYPE_NO, BO.NAME,  O.FLAGS
    FROM SYS._DD_OBJ O, SYS._DD_PSMUNIT P, SYS._DD_OBJ BO
    WHERE O.TYPE_NO = 8
      AND O.OBJ_ID = P.BODY_OBJ_ID
      AND P.OBJ_ID = BO.OBJ_ID
;



create or replace view _sv_objects
(owner, object_name, subobject_name, obj_id, object_type,
 created, last_ddl_time, timestamp, status, temporary,
 
 object_type_no, owner_id)
as
    select /*+ no_merge */
        u.name, o.name, o.subname, o.obj_id, object_types.name,
        o.ctime, o.mtime, to_char(o.stime, 'YYYY-MM-DD:HH24:MI:SS'),
        decode(bitand(o.flags, 128), 0, 'VALID', 'INVALID'),
        case t.flags
        when null then 'N'
        else decode(bitand(t.flags, 96), 0, 'N', 'Y')
        end,
        o.type_no,
        u.user_id
    from
        sys._dd_obj o,
        sys._dd_user u,
        sys.object_types,
        sys._dd_tbl t
    where o.owner_id = u.user_id
      and o.type_no <> 0
      and o.type_no = object_types.type_no
      and o.obj_id = t.obj_id (+)

union all

    select
        u.name, o.name, o.subname, o.obj_id, object_types.name,
        o.ctime, o.mtime, to_char(o.stime, 'YYYY-MM-DD:HH24:MI:SS'),
        decode(bitand(o.flags, 128), 0, 'VALID', 'INVALID'),
        'N',
        o.type_no,
        u.user_id
    from
        sys._dd_obj o,
        sys._dd_user u,
        sys.object_types,
        sys._dd_idx i
    where o.owner_id = u.user_id
      and o.type_no = 0
      and o.type_no = object_types.type_no
      and o.obj_id = i.obj_id
      and i.type_no IN (1, 
                        4,
                        8,
                        18,
                        10,
                        11,
                        12,
                        13,
                        16)

union all

    select u.name, l.link_name, NULL, NULL, 'DATABASE LINK',
           l.ctime, to_date(null), NULL, 'VALID', 'N', NULL, u.user_id
    from sys._dd_dblink l, sys._dd_user u
    where l.owner_id = u.user_id


;



create or replace view dba_objects
as
    select /*+ no_merge */
        owner, object_name, subobject_name, obj_id as "OBJECT_ID",
        object_type, object_type_no, created, last_ddl_time, timestamp,
        status, temporary
    from _sv_objects
;

create or replace view all_objects
as
    select /*+ no_merge */
        owner, object_name, subobject_name, obj_id as "OBJECT_ID",
        object_type, object_type_no, created, last_ddl_time, timestamp,
        status, temporary
    from _sv_objects
    where owner_id = USERENV('SCHEMAID') or owner_id = 1
          
       or
       (
          obj_id IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
       )
          
       or
       (
          object_type_no in (
                0,
                1,
                2,
                3,
                10,
                11,
                14,
                15,
                22
          )
          and
          (exists (SELECT NULL
                   FROM   (SELECT SAU2.PRIV_NO
                           FROM   SYS._DD_SYSAUTH SAU2
                           START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                           CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                          ) SAU
                   WHERE (SAU.PRIV_NO    = -483
                           OR SAU.PRIV_NO = -482
                           OR SAU.PRIV_NO = -481
                           OR SAU.PRIV_NO = -480
                           OR SAU.PRIV_NO = -485
                           OR SAU.PRIV_NO = -473
                           OR SAU.PRIV_NO IN (
                                 SELECT USER_ID FROM SYS._DD_USER
                                 WHERE NAME = 'DBA')
                          )
                  )
          )
       )
       or
       (
          object_type_no = 4
          and
          (exists (
               select null
               from   sys._dd_sysauth sau
               where  sau.grantee_id = USERENV('SCHEMAID')
                 and  (sau.priv_no    = -459
                       or sau.priv_no = -473
                       or sau.priv_no in (
                             select user_id from sys._dd_user
                             where name = 'DBA')
                      ))
          )
       )
       or
       (
          object_type_no in (
                5,
                6,
                7
          )
          and
          (exists (
               select null
               from   sys._dd_sysauth sau
               where  sau.grantee_id = USERENV('SCHEMAID')
                 and  (sau.priv_no    = -449
                       or sau.priv_no = -452
                       or sau.priv_no = -473
                       or sau.priv_no in (
                             select user_id from sys._dd_user
                             where name = 'DBA')
                      ))
          )
       )
       or
       (
          object_type_no = 8
          and
          (exists (
               select null
               from   sys._dd_sysauth sau
               where  sau.grantee_id = USERENV('SCHEMAID')
                 and  (sau.priv_no    = -452
                       or sau.priv_no = -473
                       or sau.priv_no in (
                             select user_id from sys._dd_user
                             where name = 'DBA')
                      ))
          )
       )
       or
       (
          object_type_no = 9
          and
          (exists (
               select null
               from   sys._dd_sysauth sau
               where  sau.grantee_id = USERENV('SCHEMAID')
                 and  (sau.priv_no    = -447
                       or sau.priv_no = -473
                       or sau.priv_no in (
                             select user_id from sys._dd_user
                             where name = 'DBA')
                      ))
          )
       )
       or
       (
          object_type_no = 18
          and
          (exists (
               select null
               from   sys._dd_sysauth sau
               where  sau.grantee_id = USERENV('SCHEMAID')
                 and  (sau.priv_no    = -436
                       or sau.priv_no = -435
                       or sau.priv_no = -473
                       or sau.priv_no in (
                             select user_id from sys._dd_user
                             where name = 'DBA')
                      ))
          )
       )
       or
       (
          object_type_no = 21
          and
          (exists (
               select null
               from   sys._dd_sysauth sau
               where  sau.grantee_id = USERENV('SCHEMAID')
                 and  (sau.priv_no    = -452
                       or sau.priv_no = -473
                       or sau.priv_no in (
                             select user_id from sys._dd_user
                             where name = 'DBA')
                      ))
          )
       )
       or
       (
          object_type_no = 24
          and
          (exists (
               select null
               from   sys._dd_sysauth sau
               where  sau.grantee_id = USERENV('SCHEMAID')
                 and  (sau.priv_no    = -452
                       or sau.priv_no = -473
                       or sau.priv_no in (
                             select user_id from sys._dd_user
                             where name = 'DBA')
                      ))
          )
       )
;

create or replace view user_objects
as
    select /*+ no_merge */
        object_name, subobject_name, obj_id as "OBJECT_ID",
        object_type, object_type_no, created, last_ddl_time, timestamp,
        status, temporary
    from syscat._sv_objects
    where owner_id = USERENV('SCHEMAID')
;

create or replace public synonym dba_objects for dba_objects;
create or replace public synonym all_objects for all_objects;
create or replace public synonym user_objects for user_objects;

grant select on all_objects to public;
grant select on user_objects to public;



CREATE OR REPLACE VIEW DBA_ROLES
(ROLE, PASSWORD_REQUIRED)
AS
    SELECT /*+ no_merge */ NAME, DECODE(PASSWORD, NULL, 'NO', 'YES')
    FROM SYS._DD_USER
    WHERE TYPE_NO = 0
      AND NAME NOT IN ('PUBLIC')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_ROLES FOR DBA_ROLES;



CREATE OR REPLACE VIEW DBA_ROLE_PRIVS
(GRANTEE, GRANTED_ROLE, ADMIN_OPTION, DEFAULT_ROLE)
AS
    SELECT /*+ no_merge */
        U_GRANTEE.NAME, U_ROLE.NAME,
        DECODE(SYSAUTH.FLAGS, 0, 'NO', 4, 'YES', 'ERR'),
        DECODE(U_GRANTEE.DFLT_ROLE,
            0, 'NO',
            1, 'YES',
            2,
                CASE WHEN (U_GRANTEE.USER_ID, U_ROLE.USER_ID) IN
                           (SELECT USER_ID, ROLE_ID FROM SYS._DD_DFLTROLE)
                    THEN 'YES' ELSE 'NO' END,
            'ERR')
    FROM
        SYS._DD_SYSAUTH SYSAUTH,
        SYS._DD_USER U_GRANTEE, SYS._DD_USER U_ROLE
    WHERE
        U_GRANTEE.USER_ID = SYSAUTH.GRANTEE_ID AND
        U_ROLE.USER_ID = SYSAUTH.PRIV_NO
;

CREATE OR REPLACE VIEW USER_ROLE_PRIVS AS
    SELECT * FROM DBA_ROLE_PRIVS
    WHERE GRANTEE IN (USERENV('SCHEMA'), 'PUBLIC')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_ROLE_PRIVS FOR DBA_ROLE_PRIVS;
CREATE OR REPLACE PUBLIC SYNONYM USER_ROLE_PRIVS FOR USER_ROLE_PRIVS;
GRANT SELECT ON USER_ROLE_PRIVS TO PUBLIC;



CREATE OR REPLACE VIEW SYS_OBJECTS
(OBJECT_TYPE, OBJECT_TYPE_NO, SEGMENT_TYPE_NO, OBJECT_ID,
 HEADER_FILE, HEADER_BLOCK, TS_NUMBER, SEGMENT_ID)
AS
    SELECT /*+ no_merge */ 'TABLE', 1, 1, T.OBJ_ID,
        FLOOR (T.SHDRDBA / 4194304), BITAND (T.SHDRDBA, 4194303),
        T.TS_ID, T.SGMT_ID
    FROM SYS._DD_TBL T
    UNION ALL
    SELECT 'TABLE PARTITION', 10, 1, TP.OBJ_ID,
        FLOOR (TP.SHDRDBA / 4194304), BITAND (TP.SHDRDBA, 4194303),
        TP.TS_ID, TP.SGMT_ID
    FROM SYS._DD_TBLPART TP
    UNION ALL
    SELECT 'TABLE SUBPARTITION', 14, 1,
        TSP.OBJ_ID, FLOOR (TSP.SHDRDBA / 4194304),
        BITAND (TSP.SHDRDBA, 4194303), TSP.TS_ID, TSP.SGMT_ID
    FROM SYS._DD_TBLSUBPART TSP
    UNION ALL
    SELECT 'INDEX',
           0, 2, I.OBJ_ID,
        FLOOR (I.SHDRDBA / 4194304), BITAND (I.SHDRDBA, 4194303),
        I.TS_ID, I.SGMT_ID
    FROM SYS._DD_IDX I
    UNION ALL
    SELECT 'INDEX PARTITION', 11, 2, IP.OBJ_ID,
        FLOOR (IP.SHDRDBA / 4194304), BITAND (IP.SHDRDBA, 4194303),
        IP.TS_ID, IP.SGMT_ID
    FROM SYS._DD_IDXPART IP
    UNION ALL
    SELECT 'INDEX SUBPARTITION', 15, 2,
        ISP.OBJ_ID,
        FLOOR (ISP.SHDRDBA / 4194304), BITAND (ISP.SHDRDBA, 4194303),
        ISP.TS_ID, ISP.SGMT_ID
    FROM SYS._DD_IDXSUBPART ISP
    UNION ALL
    SELECT 'LOB', 12, 3, L.OBJ_ID,
        FLOOR (L.SHDRDBA / 4194304), BITAND (L.SHDRDBA, 4194303),
        L.TS_ID, L.SGMT_ID
    FROM SYS._DD_LOB L
    UNION ALL
    SELECT 'LOB PARTITION', 12, 3, LP.PART_OBJ_ID,
        FLOOR (LP.SHDRDBA / 4194304), BITAND (LP.SHDRDBA, 4194303),
        LP.TS_ID, LP.SGMT_ID
    FROM SYS._DD_LOBPART LP
    UNION ALL
    SELECT 'LOB SUBPARTITION', 12, 3,
        LSP.SUBPART_OBJ_ID,
        FLOOR (LSP.SHDRDBA / 4194304), BITAND (LSP.SHDRDBA, 4194303),
        LSP.TS_ID, LSP.SGMT_ID
    FROM SYS._DD_LOBSUBPART LSP
;

CREATE OR REPLACE PUBLIC SYNONYM SYS_OBJECTS FOR SYS_OBJECTS;



CREATE OR REPLACE VIEW DBA_SEGMENTS
(OWNER, SEGMENT_NAME, PARTITION_NAME, SEGMENT_TYPE,
 TABLESPACE_NAME, HEADER_FILE, HEADER_BLOCK,
 BLOCKS, EXTENTS, RELATIVE_FNO, BUFFER_POOL, MAX_EXTENTS,
 BYTES, INITIAL_EXTENT, NEXT_EXTENT)
AS
    SELECT OWNER, SEGMENT_NAME, PARTITION_NAME, SEGMENT_TYPE,
        TABLESPACE_NAME, HEADER_FILE, HEADER_BLOCK,
        BLOCKS, EXTENTS, RELATIVE_FNO, BUFFER_POOL, MAX_EXTENTS,
        BLOCKS * (SELECT VALUE FROM VT_PARAMETER
                  WHERE NAME='DB_BLOCK_SIZE') AS BYTES,
        INITIAL_EXTENT, NEXT_EXTENT
    FROM
        (SELECT /*+ no_merge */ U.NAME AS OWNER, O.NAME AS SEGMENT_NAME,
               O.SUBNAME AS PARTITION_NAME, SO.OBJECT_TYPE AS SEGMENT_TYPE,
               TS.NAME AS TABLESPACE_NAME, F.FILE_ID AS HEADER_FILE,
               SO.HEADER_BLOCK AS HEADER_BLOCK, SO.HEADER_FILE AS RELATIVE_FNO,
               DECODE(S.BUFPOOL, 1, 'KEEP',
                                 2, 'RECYCLE', 'DEFAULT')
               AS BUFFER_POOL, S.MAX_EXTS AS MAX_EXTENTS,
               VT_TS.BLKSIZE * TS.UNIT AS INITIAL_EXTENT, --IE.BYTES,
               DECODE(S.NEXT_EXT, 0, SYS_OP_NEXT_EXTENT(S.TS_ID,S.SHDRDBA), 
                                  S.NEXT_EXT * VT_TS.BLKSIZE) AS NEXT_EXTENT,
               SYS_OP_EXTENT_CNT(S.TS_ID, S.SHDRDBA) AS EXTENTS,
               SYS_OP_EXTBLK_CNT(S.TS_ID, S.SHDRDBA) AS BLOCKS
        FROM   SYS._DD_USER U, SYS._DD_TS TS, SYS._DD_SGMT S, SYS._DD_FILE F,
               SYS._DD_OBJ O, SYS_OBJECTS SO, SYS._VT_TABLESPACE VT_TS
        WHERE  S.TS_ID = TS.TS_ID
          AND  S.TS_ID = F.TS_ID
          AND  TS.TS_ID = VT_TS.TSNO(+)
          AND  FLOOR (S.SHDRDBA / 4194304) = F.REL_FILE_NO
          AND  O.OWNER_ID = U.USER_ID
          AND  S.SGMT_ID = SO.SEGMENT_ID
          AND  SO.OBJECT_ID = O.OBJ_ID
          AND  S.SHDRDBA != 0)
    UNION ALL
    SELECT 'SYS', 'UNDO_SGMT', '', 'UNDO', TS.NAME,
           F.FILE_ID, BITAND (S.SHDRDBA, 4194303),
           R.RSSIZE, R.EXTENTS,
           FLOOR (S.SHDRDBA / 4194304),
           'DEFAULT', -1, null, null, null
           
           
    FROM   SYS._DD_TS TS, SYS._DD_USGMT S, SYS._DD_FILE F, SYS._VT_ROLLSTAT R 
    WHERE  S.TS_ID = TS.TS_ID
      AND  S.TS_ID = F.TS_ID
      AND  FLOOR (S.SHDRDBA / 4194304) = F.REL_FILE_NO
      AND  S.US_NO = R.USN
;

CREATE OR REPLACE VIEW ALL_SEGMENTS
(OWNER, SEGMENT_NAME, PARTITION_NAME, SEGMENT_TYPE,
 TABLESPACE_NAME, HEADER_FILE, HEADER_BLOCK,
 BLOCKS, EXTENTS, RELATIVE_FNO, BUFFER_POOL, MAX_EXTENTS,
 BYTES, INITIAL_EXTENT, NEXT_EXTENT)
AS
    SELECT OWNER, SEGMENT_NAME, PARTITION_NAME, SEGMENT_TYPE,
        TABLESPACE_NAME, HEADER_FILE, HEADER_BLOCK,
        BLOCKS, EXTENTS,
        RELATIVE_FNO, BUFFER_POOL, MAX_EXTENTS,
        BLOCKS * (SELECT VALUE FROM VT_PARAMETER
                  WHERE NAME='DB_BLOCK_SIZE') AS BYTES,
        INITIAL_EXTENT, NEXT_EXTENT
    FROM
    (SELECT /*+ no_merge */ U.NAME AS OWNER, O.NAME AS SEGMENT_NAME,
           O.SUBNAME AS PARTITION_NAME, SO.OBJECT_TYPE AS SEGMENT_TYPE,
           TS.NAME AS TABLESPACE_NAME, F.FILE_ID AS HEADER_FILE,
           SO.HEADER_BLOCK AS HEADER_BLOCK, SO.HEADER_FILE AS RELATIVE_FNO,
           DECODE(S.BUFPOOL, 1, 'KEEP',
                  2, 'RECYCLE', 'DEFAULT')
           AS BUFFER_POOL, S.MAX_EXTS AS MAX_EXTENTS,
           VT_TS.BLKSIZE * TS.UNIT AS INITIAL_EXTENT, --IE.BYTES,
           DECODE(S.NEXT_EXT, 0, SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA),
                              S.NEXT_EXT * VT_TS.BLKSIZE) AS NEXT_EXTENT,
           SYS_OP_EXTENT_CNT(S.TS_ID, S.SHDRDBA) AS EXTENTS,
           SYS_OP_EXTBLK_CNT(S.TS_ID, S.SHDRDBA) AS BLOCKS
        FROM   SYS._DD_USER U, SYS._DD_TS TS, SYS._DD_SGMT S, SYS._DD_FILE F,
               SYS._DD_OBJ O, SYS_OBJECTS SO, SYS._VT_TABLESPACE VT_TS
        WHERE  S.TS_ID = TS.TS_ID
          AND  S.TS_ID = F.TS_ID
          AND  TS.TS_ID = VT_TS.TSNO(+)
          AND  FLOOR (S.SHDRDBA / 4194304) = F.REL_FILE_NO
          AND  O.OWNER_ID = U.USER_ID
          AND  S.SGMT_ID = SO.SEGMENT_ID
          AND  SO.OBJECT_ID = O.OBJ_ID
          AND  S.SHDRDBA != 0
          AND  (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1
              
           OR  (O.TYPE_NO = 0
                AND
                O.OBJ_ID IN (
                  SELECT I.OBJ_ID
                  FROM   SYS._DD_OBJAUTH OA, SYS._DD_IDX I
                  WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
                  AND    OA.OBJ_ID = I.BO_ID
                )
               )
           OR  (O.TYPE_NO = 1
                AND
                O.OBJ_ID IN (
                  SELECT OBJ_ID
                  FROM   SYS._DD_OBJAUTH
                  WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
                )
               )
           OR  (O.TYPE_NO = 10
                AND
                O.OBJ_ID IN (
                  SELECT TP.OBJ_ID
                  FROM   SYS._DD_OBJAUTH OA, SYS._DD_TBLPART TP
                  WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
                  AND    OA.OBJ_ID = TP.BO_ID
                )
               )
           OR  (O.TYPE_NO = 11
                AND
                O.OBJ_ID IN (
                  SELECT IP.OBJ_ID
                  FROM   SYS._DD_OBJAUTH OA, SYS._DD_IDXPART IP, SYS._DD_IDX I
                  WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
                  AND    IP.BO_ID = I.OBJ_ID
                  AND    OA.OBJ_ID = I.BO_ID
                )
               )
           OR  (O.TYPE_NO = 14
                AND
                O.OBJ_ID IN (
                  SELECT TSP.OBJ_ID
                  FROM   SYS._DD_OBJAUTH OA, SYS._DD_TBLSUBPART TSP, SYS._DD_TBLPART TP
                  WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
                  AND    TSP.BO_ID = TP.OBJ_ID
                  AND    OA.OBJ_ID = TP.BO_ID
                )
               )
           OR  (O.TYPE_NO = 15
                AND
                O.OBJ_ID IN (
                  SELECT ISP.OBJ_ID
                  FROM   SYS._DD_OBJAUTH OA, SYS._DD_IDXSUBPART ISP,
                         SYS._DD_IDXPART IP, SYS._DD_IDX I
                  WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
                  AND    ISP.BO_ID = IP.OBJ_ID
                  AND    IP.BO_ID = I.OBJ_ID
                  AND    OA.OBJ_ID = I.BO_ID
                )
               )
              
           OR
              (exists (SELECT NULL
                       FROM   (SELECT SAU2.PRIV_NO
                               FROM   SYS._DD_SYSAUTH SAU2
                               START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                               CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                              ) SAU
                       WHERE (SAU.PRIV_NO    = -483
                               OR SAU.PRIV_NO = -482
                               OR SAU.PRIV_NO = -481
                               OR SAU.PRIV_NO = -480
                               OR SAU.PRIV_NO = -485
                               OR SAU.PRIV_NO = -473
                               OR SAU.PRIV_NO IN (
                                     SELECT USER_ID FROM SYS._DD_USER
                                     WHERE NAME = 'DBA')
                              )
                      )
              )
         )
    )
;

CREATE OR REPLACE VIEW USER_SEGMENTS
(SEGMENT_NAME, PARTITION_NAME, SEGMENT_TYPE, TABLESPACE_NAME,
 HEADER_FILE, HEADER_BLOCK,
 BLOCKS, EXTENTS, RELATIVE_FNO, BUFFER_POOL, MAX_EXTENTS,
 BYTES, INITIAL_EXTENT, NEXT_EXTENT)
AS
    SELECT /*+ no_merge */  SEGMENT_NAME, PARTITION_NAME, SEGMENT_TYPE, TABLESPACE_NAME,
            HEADER_FILE, HEADER_BLOCK,
            BLOCKS, EXTENTS, RELATIVE_FNO, BUFFER_POOL, MAX_EXTENTS,
            BYTES, INITIAL_EXTENT, NEXT_EXTENT
    FROM    DBA_SEGMENTS
    WHERE   OWNER = USERENV('SCHEMA')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_SEGMENTS FOR DBA_SEGMENTS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_SEGMENTS FOR ALL_SEGMENTS;
CREATE OR REPLACE PUBLIC SYNONYM USER_SEGMENTS FOR USER_SEGMENTS;
GRANT SELECT ON ALL_SEGMENTS TO PUBLIC;
GRANT SELECT ON USER_SEGMENTS TO PUBLIC;



CREATE OR REPLACE VIEW DBA_UNDO_SGMTS
    (SEGMENT_ID, TABLESPACE_NAME, FILE_ID, BLOCK_ID,
--   INITIAL_EXTENT,NEXT_EXTENT,
     STATUS, RELATIVE_FNO)
AS
SELECT /*+ no_merge */ S.US_NO, TS.NAME, FLOOR (S.SHDRDBA / 4194304), BITAND (S.SHDRDBA, 4194303),
--     S.INIEXTS * TS.BLOCKSIZE,
--       DECODE(BITAND(TS.FLAGS, 3), 1, TO_NUMBER(NULL),
--                                      S.EXTSIZE * TS.BLOCKSIZE),
       DECODE(S.STATUS, 0, 'ONLINE', 1, 'OFFLINE',
              2, 'OFFLINE_PENDING', 'DROPPED'),
       F.REL_FILE_NO
FROM SYS._DD_USGMT S, SYS._DD_TS TS, SYS._DD_FILE F
WHERE S.TS_ID = TS.TS_ID
  AND S.TS_ID = F.TS_ID
  AND FLOOR (S.SHDRDBA / 4194304) = F.REL_FILE_NO
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_UNDO_SGMTS FOR DBA_UNDO_SGMTS;
CREATE OR REPLACE PUBLIC SYNONYM DBA_ROLLBACK_SEGS FOR DBA_UNDO_SGMTS;



create or replace view _sv_synonyms
(owner, synonym_name, org_object_owner, org_object_name,
 
 owner_id, obj_id)
as
    select /*+ no_merge */ u.name, o.name, s.ref_owner, s.ref_name, o.owner_id, o.obj_id
    from sys._dd_user u, sys._dd_syn s, sys._dd_obj o
    where o.obj_id = s.obj_id
      and o.type_no = 3
      and o.owner_id = u.user_id
;

create or replace view dba_synonyms
as
    select /*+ no_merge */ owner, synonym_name, org_object_owner, org_object_name
    from _sv_synonyms
;

create or replace view all_synonyms
as
    select /*+ no_merge */ owner, synonym_name, org_object_owner, org_object_name
    from _sv_synonyms
    where owner_id = USERENV('SCHEMAID') or owner_id = 1
          
       or (exists (SELECT NULL
                   FROM   (SELECT SAU2.PRIV_NO
                           FROM   SYS._DD_SYSAUTH SAU2
                           START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                           CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                          ) SAU
                   WHERE (SAU.PRIV_NO    = -483
                           OR SAU.PRIV_NO = -482
                           OR SAU.PRIV_NO = -481
                           OR SAU.PRIV_NO = -480
                           OR SAU.PRIV_NO = -485
                           OR SAU.PRIV_NO = -473
                           OR SAU.PRIV_NO IN (
                                 SELECT USER_ID FROM SYS._DD_USER
                                 WHERE NAME = 'DBA')
                          )
                  )
          )
       or
          
           (OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
           )
;

create or replace view user_synonyms
as
    select /*+ no_merge */ synonym_name, org_object_owner, org_object_name
    from _sv_synonyms
    where owner_id = USERENV('SCHEMAID')
;

create or replace public synonym dba_synonyms for dba_synonyms;
create or replace public synonym all_synonyms for all_synonyms;
create or replace public synonym user_synonyms for user_synonyms;

grant select on all_synonyms to public;
grant select on user_synonyms to public;



CREATE OR REPLACE VIEW DBA_SYS_PRIVS
(GRANTEE, PRIVILEGE, ADMIN_OPTION)
AS
    SELECT /*+ no_merge */
        U_GRANTEE.NAME, SYSPRIV.NAME,
        DECODE(SYSAUTH.FLAGS, 0, 'NO', 4, 'YES', 'ERR')
    FROM
        SYS._DD_SYSAUTH SYSAUTH,
        SYS._DD_USER U_GRANTEE, SYS.SYSTEM_PRIVILEGES SYSPRIV
    WHERE
        U_GRANTEE.USER_ID = SYSAUTH.GRANTEE_ID AND
        SYSPRIV.PRIV_NO = SYSAUTH.PRIV_NO
;

CREATE OR REPLACE VIEW USER_SYS_PRIVS
(USERNAME, PRIVILEGE, ADMIN_OPTION)
AS
    SELECT /*+ no_merge */ GRANTEE, PRIVILEGE, ADMIN_OPTION FROM DBA_SYS_PRIVS
    WHERE GRANTEE IN (USERENV('SCHEMA'), 'PUBLIC')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_SYS_PRIVS FOR DBA_SYS_PRIVS;
CREATE OR REPLACE PUBLIC SYNONYM USER_SYS_PRIVS FOR USER_SYS_PRIVS;
GRANT SELECT ON USER_SYS_PRIVS TO PUBLIC;




CREATE OR REPLACE VIEW DBA_TBL_COL_STATISTICS
(TABLE_OWNER, TABLE_NAME, COLUMN_NAME,
 NUM_DISTINCT, LOW_VALUE, HIGH_VALUE, DENSITY, NUM_NULLS, NUM_BUCKETS,
 LAST_ANALYZED, SAMPLE_SIZE, AVG_COL_LEN)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME, C.NAME,
           H.DISTINCT_CNT, H.LOW_VAL, H.HIGH_VAL, H.DENSITY, H.NULL_CNT,
           H.BUCKET_CNT,
           H.TIMESTAMP_NO, H.SAMPLE_SIZE,
           H.AVG_COL_SIZE
    FROM SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_HIST_HEAD H, SYS._DD_USER U
    WHERE O.OBJ_ID = C.OBJ_ID
      AND C.OBJ_ID = H.OBJ_ID
      AND C.COL_NO = H.COL_NO
      AND O.TYPE_NO IN (1, 2)
      AND O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TBL_COL_STATISTICS FOR DBA_TBL_COL_STATISTICS;
CREATE OR REPLACE PUBLIC SYNONYM DBA_TAB_COL_STATISTICS FOR DBA_TBL_COL_STATISTICS;

CREATE OR REPLACE VIEW ALL_TBL_COL_STATISTICS
(TABLE_OWNER, TABLE_NAME, COLUMN_NAME,
 NUM_DISTINCT, LOW_VALUE, HIGH_VALUE, DENSITY, NUM_NULLS, NUM_BUCKETS,
 LAST_ANALYZED, SAMPLE_SIZE, AVG_COL_LEN)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME, C.NAME,
           H.DISTINCT_CNT, H.LOW_VAL, H.HIGH_VAL, H.DENSITY, H.NULL_CNT,
           H.BUCKET_CNT,
           H.TIMESTAMP_NO, H.SAMPLE_SIZE,
           H.AVG_COL_SIZE
    FROM SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_HIST_HEAD H, SYS._DD_USER U
    WHERE O.OBJ_ID = C.OBJ_ID
      AND C.OBJ_ID = H.OBJ_ID
      AND C.COL_NO = H.COL_NO
      AND O.TYPE_NO IN (1, 2)
      AND O.OWNER_ID = U.USER_ID
      AND (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1)

    UNION

    SELECT U.NAME, O.NAME, C.NAME,
           H.DISTINCT_CNT, H.LOW_VAL, H.HIGH_VAL, H.DENSITY, H.NULL_CNT,
           H.BUCKET_CNT,
           H.TIMESTAMP_NO, H.SAMPLE_SIZE,
           H.AVG_COL_SIZE
    FROM SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_HIST_HEAD H, SYS._DD_USER U
    WHERE O.OBJ_ID = C.OBJ_ID
      AND C.OBJ_ID = H.OBJ_ID
      AND C.COL_NO = H.COL_NO
      AND O.TYPE_NO IN (1, 2)
      AND O.OWNER_ID = U.USER_ID
           
      AND EXISTS (SELECT NULL
                  FROM   (SELECT SAU2.PRIV_NO
                          FROM   SYS._DD_SYSAUTH SAU2
                          START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                          CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                         ) SAU
                  WHERE (SAU.PRIV_NO    = -483
                          OR SAU.PRIV_NO = -482
                          OR SAU.PRIV_NO = -481
                          OR SAU.PRIV_NO = -480
                          OR SAU.PRIV_NO = -485
                          OR SAU.PRIV_NO = -473
                          OR SAU.PRIV_NO IN (
                                SELECT USER_ID FROM SYS._DD_USER
                                WHERE NAME = 'DBA')
                         )
                 )

    UNION

    SELECT U.NAME, O.NAME, C.NAME,
           H.DISTINCT_CNT, H.LOW_VAL, H.HIGH_VAL, H.DENSITY, H.NULL_CNT,
           H.BUCKET_CNT,
           H.TIMESTAMP_NO, H.SAMPLE_SIZE,
           H.AVG_COL_SIZE
    FROM SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_HIST_HEAD H, SYS._DD_USER U
    WHERE O.OBJ_ID = C.OBJ_ID
      AND C.OBJ_ID = H.OBJ_ID
      AND C.COL_NO = H.COL_NO
      AND O.TYPE_NO IN (1, 2)
      AND O.OWNER_ID = U.USER_ID
          
      AND O.OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TBL_COL_STATISTICS FOR ALL_TBL_COL_STATISTICS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_TAB_COL_STATISTICS FOR ALL_TBL_COL_STATISTICS;
GRANT SELECT ON ALL_TBL_COL_STATISTICS TO PUBLIC;

CREATE OR REPLACE VIEW USER_TBL_COL_STATISTICS
(TABLE_NAME, COLUMN_NAME,
 NUM_DISTINCT, LOW_VALUE, HIGH_VALUE, DENSITY, NUM_NULLS, NUM_BUCKETS,
 LAST_ANALYZED, SAMPLE_SIZE, AVG_COL_LEN)
AS
SELECT /*+ no_merge */ TABLE_NAME, COLUMN_NAME,
       NUM_DISTINCT, LOW_VALUE, HIGH_VALUE, DENSITY, NUM_NULLS, NUM_BUCKETS,
       LAST_ANALYZED, SAMPLE_SIZE, AVG_COL_LEN
FROM   DBA_TBL_COL_STATISTICS
WHERE  TABLE_OWNER = USERENV('SCHEMA')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TBL_COL_STATISTICS FOR USER_TBL_COL_STATISTICS;
CREATE OR REPLACE PUBLIC SYNONYM USER_TAB_COL_STATISTICS FOR USER_TBL_COL_STATISTICS;
GRANT SELECT ON USER_TBL_COL_STATISTICS TO PUBLIC;





create or replace view _sv_tbl_columns
(owner, table_name, column_name,
 data_type, data_type_no, data_type_owner, data_length, data_precision, data_scale, nullable,
 column_id, data_default, default_length, 
 char_col_decl_length, char_length, char_used, virtual_column, hidden_column,
 segment_column_id, internal_column_id, qualified_col_name, num_nulls, 
 
 obj_id, owner_id)
as
    select /*+ no_merge */
        u.name, o.name, c.name,
        decode(c.type_no,
            1, 'NUMBER',
            2, 'CHAR',
            3, 'VARCHAR',
            4, 'RAW',
            5, 'DATE',
            6, 'TIME('||c.scale||')',
            7, 'TIMESTAMP('||c.scale||')',
            8, 'INTERVAL YEAR('||c.precision||') TO MONTH',
            9,
                'INTERVAL DAY('||c.precision||') TO SECOND('||c.scale||')',
            10, 'LONG',
            11, 'LONG RAW',
            12, decode(c.precision, 1, 'GEOMETRY',
                                                3, 'PIVOT',
                                   'BLOB'),
            13, decode(c.precision, 2, 'XMLTYPE',
                                   'CLOB'),
            14, 'BFILE',
            15, 'ROWID',
            18, 'NCHAR',
            19, 'NVARCHAR',
            20, 'NCLOB',
            21, 'TIMESTAMP('||c.scale||') WITH TIME ZONE',
            22, 'TIMESTAMP('||c.scale||') WITH LOCAL TIME ZONE',
            23, 'BINARY_FLOAT',
            24, 'BINARY_DOUBLE',
            32, ot.name,
            29, ot.name,
            17, 'UNKNOWN',
            'ERROR'),
        c.type_no, ut.name,
        case when c.type_no in (18,
                                19) then 
        decode(vncs.nchar_characterset_name, 'UTF16', 2, 'UTF8', 3, 2)*c.len
        else c.len 
        end,
        decode (c.precision,
            38, to_number(NULL),
            -128, to_number(NULL),
            c.precision),
        case when c.scale = -128 then null else c.scale end,
        decode(c.not_null, 0, 'Y', 'N'),
        c.col_no,
        c.dfltval_exp_txt,
        length(c.dfltval_exp_txt),
        case when c.type_no in (2,
                                3,
                                18,
                                19,
                                13) then c.len
        when c.type_no in (20) then c.len / 
            decode(vncs.nchar_characterset_name, 'UTF16', 2, 'UTF8', 3, 2)
        else c.len
        end,
        case when c.type_no not in (2,
                                    3,
                                    18,
                                    19) then 0
        else c.len
        end,
        case when c.type_no not in (2,
                                    3,
                                    18,
                                    19) then null
        else decode(bitand(c.property, 256),
                    0, 'B', 'C')
        end,
        decode(bitand(c.property, 33554432), 0, 'N', 'Y'),
        decode(bitand(c.property, 32), 0, 'N', 'Y'),
        CAST (NULL AS NUMBER), 
        CAST (NULL AS NUMBER), 
        CAST (NULL AS VARCHAR2(4000)),
        CAST (NULL AS NUMBER),
        o.obj_id, o.owner_id
    from sys._dd_obj o, sys._dd_col c, sys._dd_user u, 
        sys._vt_nls_character_set vncs, sys._dd_coltype ac, sys._dd_obj ot,
        sys._dd_user ut, sys._dd_oid od
    where o.obj_id = c.obj_id
      and o.owner_id = u.user_id
      and c.obj_id = ac.obj_id(+) and c.col_no = ac.col_no(+)
      and ac.toid = od.oid(+)
      and od.obj_id = ot.obj_id(+)
      and ot.owner_id = ut.user_id(+)
;

create or replace view dba_tbl_columns
as
    select /*+ no_merge */
        owner, table_name, column_name,
        data_type, data_type_owner, data_length, data_precision, data_scale, nullable,
        column_id, data_default, default_length, char_col_decl_length, 
        char_length, char_used, virtual_column
    from _sv_tbl_columns
    where hidden_column = 'N'
;

create or replace view all_tbl_columns_with_dno
as
    select /*+ no_merge */
        owner, table_name, column_name,
        data_type, data_type_no, data_type_owner, data_length, data_precision, data_scale, nullable,
        column_id, data_default, default_length,  char_col_decl_length, 
        char_length, char_used, virtual_column,
        obj_id 
    from _sv_tbl_columns
    where (owner_id = USERENV('SCHEMAID') or owner_id = 1
          
       or  obj_id IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
          
       or (
              exists (SELECT NULL
                      FROM   (SELECT SAU2.PRIV_NO
                              FROM   SYS._DD_SYSAUTH SAU2
                              START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                              CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                             ) SAU
                      WHERE (SAU.PRIV_NO    = -483
                              OR SAU.PRIV_NO = -482
                              OR SAU.PRIV_NO = -481
                              OR SAU.PRIV_NO = -480
                              OR SAU.PRIV_NO = -485
                              OR SAU.PRIV_NO = -473
                              OR SAU.PRIV_NO IN (
                                    SELECT USER_ID FROM SYS._DD_USER
                                    WHERE NAME = 'DBA')
                             )
                     )
          ))
      and hidden_column = 'N'
;

create or replace view all_tbl_columns
as
    select /*+ no_merge */
        owner, table_name, column_name,
        data_type, data_type_owner, data_length, data_precision, data_scale, nullable,
        column_id, data_default, default_length, char_col_decl_length, 
        char_length, char_used, virtual_column,
        obj_id 
    from _sv_tbl_columns
    where (owner_id = USERENV('SCHEMAID') or owner_id = 1
          
       or  obj_id IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
          
       or (
              exists (SELECT NULL
                      FROM   (SELECT SAU2.PRIV_NO
                              FROM   SYS._DD_SYSAUTH SAU2
                              START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                              CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                             ) SAU
                      WHERE (SAU.PRIV_NO    = -483
                              OR SAU.PRIV_NO = -482
                              OR SAU.PRIV_NO = -481
                              OR SAU.PRIV_NO = -480
                              OR SAU.PRIV_NO = -485
                              OR SAU.PRIV_NO = -473
                              OR SAU.PRIV_NO IN (
                                    SELECT USER_ID FROM SYS._DD_USER
                                    WHERE NAME = 'DBA')
                             )
                     )
          ))
      and hidden_column = 'N'
;

create or replace view user_tbl_columns
as
    select /*+ no_merge */
        table_name, column_name,
        data_type, data_type_owner, data_length, data_precision, data_scale, nullable,
        column_id, data_default, default_length, char_col_decl_length, 
        char_length, char_used, virtual_column
    from _sv_tbl_columns
    where owner_id = USERENV('SCHEMAID')
      and hidden_column = 'N'
;

create or replace public synonym dba_tbl_columns for dba_tbl_columns;
create or replace public synonym dba_tab_columns for dba_tbl_columns;
create or replace public synonym all_tbl_columns_with_dno for all_tbl_columns_with_dno;
create or replace public synonym all_tbl_columns for all_tbl_columns;
create or replace public synonym all_tab_columns for all_tbl_columns;
create or replace public synonym user_tbl_columns for user_tbl_columns;
create or replace public synonym user_tab_columns for user_tbl_columns;

grant select on all_tbl_columns to public;
grant select on user_tbl_columns to public;
grant select on all_tbl_columns_with_dno to public;



create or replace view dba_tbl_cols
as
    select /*+ no_merge */
        owner, table_name, column_name,
        data_type, data_type_owner, data_length, data_precision, data_scale, nullable,
        column_id, data_default, default_length, num_nulls, char_col_decl_length, 
        char_length, char_used, hidden_column, virtual_column, 
        segment_column_id, internal_column_id, qualified_col_name
    from _sv_tbl_columns
;

create or replace view all_tbl_cols
as
    select /*+ no_merge */
        owner, table_name, column_name,
        data_type, data_type_owner, data_length, data_precision, data_scale, nullable,
        column_id, data_default, default_length, num_nulls, char_col_decl_length, 
        char_length, char_used, hidden_column, virtual_column, 
        segment_column_id, internal_column_id, qualified_col_name,
        obj_id 
    from _sv_tbl_columns
    where (owner_id = USERENV('SCHEMAID') or owner_id = 1
          
       or  obj_id IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
          
       or (
              exists (SELECT NULL
                      FROM   (SELECT SAU2.PRIV_NO
                              FROM   SYS._DD_SYSAUTH SAU2
                              START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                              CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                             ) SAU
                      WHERE (SAU.PRIV_NO    = -483
                              OR SAU.PRIV_NO = -482
                              OR SAU.PRIV_NO = -481
                              OR SAU.PRIV_NO = -480
                              OR SAU.PRIV_NO = -485
                              OR SAU.PRIV_NO = -473
                              OR SAU.PRIV_NO IN (
                                    SELECT USER_ID FROM SYS._DD_USER
                                    WHERE NAME = 'DBA')
                             )
                     )
          ))
;

create or replace view user_tbl_cols
as
    select /*+ no_merge */
        table_name, column_name,
        data_type, data_type_owner, data_length, data_precision, data_scale, nullable,
        column_id, data_default, default_length, num_nulls, char_col_decl_length, 
        char_length, char_used, hidden_column, virtual_column, 
        segment_column_id, internal_column_id, qualified_col_name
    from _sv_tbl_columns
    where owner_id = USERENV('SCHEMAID')
;

create or replace public synonym dba_tbl_cols for dba_tbl_cols;
create or replace public synonym dba_tab_cols for dba_tbl_cols;
create or replace public synonym all_tbl_cols for all_tbl_cols;
create or replace public synonym all_tab_cols for all_tbl_cols;
create or replace public synonym user_tbl_cols for user_tbl_cols;
create or replace public synonym user_tab_cols for user_tbl_cols;

grant select on all_tbl_cols to public;
grant select on user_tbl_cols to public;



CREATE OR REPLACE VIEW DBA_TBL_HISTOGRAMS
(OWNER, TABLE_NAME, COLUMN_NAME, ENDPOINT_NUMBER, ENDPOINT_VALUE,
 ENDPOINT_ACTUAL_VALUE)
AS
    SELECT /*+ no_merge */ U.NAME,
           O.NAME, C.NAME,
           H.BUCKET,
           H.END_POINT,
           H.END_POINT_ACTUAL
    FROM SYS._DD_USER U, SYS._DD_OBJ O, SYS._DD_COL C, SYS._DD_HISTOGRAM H,
        SYS._DD_HIST_HEAD HH
    WHERE O.OBJ_ID = C.OBJ_ID
      AND O.OWNER_ID = U.USER_ID
      AND H.HIST_HEAD_ID = HH.HIST_HEAD_ID
      AND C.OBJ_ID = HH.OBJ_ID
      AND C.COL_NO = HH.COL_NO
      AND O.TYPE_NO IN (1, 2)
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TBL_HISTOGRAMS FOR DBA_TBL_HISTOGRAMS;
CREATE OR REPLACE PUBLIC SYNONYM DBA_TAB_HISTOGRAMS FOR DBA_TBL_HISTOGRAMS;

CREATE OR REPLACE VIEW ALL_TBL_HISTOGRAMS
(OWNER, TABLE_NAME, COLUMN_NAME, ENDPOINT_NUMBER, ENDPOINT_VALUE,
 ENDPOINT_ACTUAL_VALUE)
AS
    SELECT /*+ no_merge */ U.NAME,
           O.NAME, C.NAME,
           H.BUCKET,
           H.END_POINT,
           H.END_POINT_ACTUAL
    FROM SYS._DD_USER U, SYS._DD_OBJ O, SYS._DD_COL C, SYS._DD_HISTOGRAM H,
        SYS._DD_HIST_HEAD HH
    WHERE O.OBJ_ID = C.OBJ_ID
      AND O.OWNER_ID = U.USER_ID
      AND H.HIST_HEAD_ID = HH.HIST_HEAD_ID
      AND C.COL_NO = HH.COL_NO
      AND C.OBJ_ID = HH.OBJ_ID
      AND O.TYPE_NO IN (1, 2)
      AND (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1)

    UNION

    SELECT U.NAME,
           O.NAME, C.NAME,
           H.BUCKET,
           H.END_POINT,
           H.END_POINT_ACTUAL
    FROM SYS._DD_USER U, SYS._DD_OBJ O, SYS._DD_COL C, SYS._DD_HISTOGRAM H,
        SYS._DD_HIST_HEAD HH
    WHERE O.OBJ_ID = C.OBJ_ID
      AND O.OWNER_ID = U.USER_ID
      AND H.HIST_HEAD_ID = HH.HIST_HEAD_ID
      AND C.OBJ_ID = HH.OBJ_ID
      AND C.COL_NO = HH.COL_NO
      AND O.TYPE_NO IN (1, 2)
      AND EXISTS (SELECT NULL
                  FROM   (SELECT SAU2.PRIV_NO
                          FROM   SYS._DD_SYSAUTH SAU2
                          START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                          CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                         ) SAU
                  WHERE (SAU.PRIV_NO    = -483
                          OR SAU.PRIV_NO = -482
                          OR SAU.PRIV_NO = -481
                          OR SAU.PRIV_NO = -480
                          OR SAU.PRIV_NO = -485
                          OR SAU.PRIV_NO = -473
                          OR SAU.PRIV_NO IN (
                                SELECT USER_ID FROM SYS._DD_USER
                                WHERE NAME = 'DBA')
                         )
                 )

    UNION

    SELECT U.NAME,
           O.NAME, C.NAME,
           H.BUCKET,
           H.END_POINT,
           H.END_POINT_ACTUAL
    FROM SYS._DD_USER U, SYS._DD_OBJ O, SYS._DD_COL C, SYS._DD_HISTOGRAM H,
        SYS._DD_HIST_HEAD HH
    WHERE O.OBJ_ID = C.OBJ_ID
      AND O.OWNER_ID = U.USER_ID
      AND H.HIST_HEAD_ID = HH.HIST_HEAD_ID
      AND C.OBJ_ID = HH.OBJ_ID
      AND C.COL_NO = HH.COL_NO
      AND O.TYPE_NO IN (1, 2)
          
      AND O.OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TBL_HISTOGRAMS FOR ALL_TBL_HISTOGRAMS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_TAB_HISTOGRAMS FOR ALL_TBL_HISTOGRAMS;
GRANT SELECT ON ALL_TBL_HISTOGRAMS TO PUBLIC;

CREATE OR REPLACE VIEW USER_TBL_HISTOGRAMS
(TABLE_NAME, COLUMN_NAME, ENDPOINT_NUMBER, ENDPOINT_VALUE, ENDPOINT_ACTUAL_VALUE)
AS
SELECT TABLE_NAME, COLUMN_NAME, ENDPOINT_NUMBER, ENDPOINT_VALUE, ENDPOINT_ACTUAL_VALUE
FROM   DBA_TBL_HISTOGRAMS
WHERE  OWNER = USERENV('SCHEMA')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TBL_HISTOGRAMS FOR USER_TBL_HISTOGRAMS;
CREATE OR REPLACE PUBLIC SYNONYM USER_TAB_HISTOGRAMS FOR USER_TBL_HISTOGRAMS;
GRANT SELECT ON USER_TBL_HISTOGRAMS TO PUBLIC;






CREATE OR REPLACE VIEW DBA_TBL_PRIVS
(GRANTEE, OWNER, TABLE_NAME, GRANTOR, PRIVILEGE, GRANTABLE)
AS
    SELECT /*+ no_merge */ UE.NAME, U.NAME, O.NAME, UR.NAME, OPM.NAME,
           DECODE(BITAND(OA.FLAGS,1), 1, 'YES', 'NO')
    FROM SYS._DD_OBJAUTH OA, SYS._DD_OBJ O, SYS._DD_USER U,
         SYS._DD_USER UR, SYS._DD_USER UE, SYS.OBJECT_PRIVILEGES OPM
    WHERE OA.COL_NO = -1
      AND OA.OBJ_ID = O.OBJ_ID
      AND OA.GRANTOR_ID = UR.USER_ID
      AND OA.GRANTEE_ID = UE.USER_ID
      AND U.USER_ID = O.OWNER_ID
      AND OPM.PRIV_NO = OA.PRIV_NO
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TBL_PRIVS FOR DBA_TBL_PRIVS;
CREATE OR REPLACE PUBLIC SYNONYM DBA_TAB_PRIVS FOR DBA_TBL_PRIVS;

CREATE OR REPLACE VIEW ALL_TBL_PRIVS
AS
    SELECT /*+ no_merge */ *
    FROM   DBA_TBL_PRIVS
    WHERE  USERENV('SCHEMA') IN (GRANTEE, OWNER, GRANTOR) OR GRANTEE = 'PUBLIC'
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TBL_PRIVS FOR ALL_TBL_PRIVS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_TAB_PRIVS FOR ALL_TBL_PRIVS;
GRANT SELECT ON ALL_TBL_PRIVS TO PUBLIC;

CREATE OR REPLACE VIEW USER_TBL_PRIVS
AS
    SELECT /*+ no_merge */ *
    FROM   DBA_TBL_PRIVS
    WHERE  USERENV('SCHEMA') IN (GRANTEE, OWNER, GRANTOR)
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TBL_PRIVS FOR USER_TBL_PRIVS;
CREATE OR REPLACE PUBLIC SYNONYM USER_TAB_PRIVS FOR USER_TBL_PRIVS;
GRANT SELECT ON USER_TBL_PRIVS TO PUBLIC;




CREATE OR REPLACE VIEW ALL_TBL_PRIVS_MADE
AS
SELECT /*+ no_merge */ *
FROM   DBA_TBL_PRIVS
WHERE  OWNER = USERENV('SCHEMA') OR GRANTOR = USERENV('SCHEMA')
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TBL_PRIVS_MADE FOR ALL_TBL_PRIVS_MADE;
CREATE OR REPLACE PUBLIC SYNONYM ALL_TAB_PRIVS_MADE FOR ALL_TBL_PRIVS_MADE;
GRANT SELECT ON ALL_TBL_PRIVS_MADE TO PUBLIC;

CREATE OR REPLACE VIEW USER_TBL_PRIVS_MADE
AS
SELECT /*+ no_merge */ GRANTEE, TABLE_NAME, GRANTOR, PRIVILEGE, GRANTABLE
FROM   DBA_TBL_PRIVS
WHERE  OWNER = USERENV('SCHEMA')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TBL_PRIVS_MADE FOR USER_TBL_PRIVS_MADE;
CREATE OR REPLACE PUBLIC SYNONYM USER_TAB_PRIVS_MADE FOR USER_TBL_PRIVS_MADE;
GRANT SELECT ON USER_TBL_PRIVS_MADE TO PUBLIC;





CREATE OR REPLACE VIEW ALL_TBL_PRIVS_RECD
AS
SELECT /*+ no_merge */ GRANTEE, OWNER, TABLE_NAME, GRANTOR, PRIVILEGE, GRANTABLE
FROM   DBA_TBL_PRIVS
WHERE  GRANTEE = USERENV('SCHEMA') OR GRANTEE = 'PUBLIC'
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TBL_PRIVS_RECD FOR ALL_TBL_PRIVS_RECD;
CREATE OR REPLACE PUBLIC SYNONYM ALL_TAB_PRIVS_RECD FOR ALL_TBL_PRIVS_RECD;
GRANT SELECT ON ALL_TBL_PRIVS_RECD TO PUBLIC;

CREATE OR REPLACE VIEW USER_TBL_PRIVS_RECD
AS
SELECT /*+ no_merge */ OWNER, TABLE_NAME, GRANTOR, PRIVILEGE, GRANTABLE
FROM   DBA_TBL_PRIVS
WHERE  GRANTEE = USERENV('SCHEMA')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TBL_PRIVS_RECD FOR USER_TBL_PRIVS_RECD;
CREATE OR REPLACE PUBLIC SYNONYM USER_TAB_PRIVS_RECD FOR USER_TBL_PRIVS_RECD;
GRANT SELECT ON USER_TBL_PRIVS_RECD TO PUBLIC;




create or replace view _tab_statistics
(obj_id, sample_size, analyze_time)
as
    select /*+ no_merge */ obj_id, max(sample_size), max(timestamp_no)
    from sys._dd_hist_head
    group by obj_id
;

CREATE OR REPLACE VIEW DBA_TABLES
(OWNER, TABLE_NAME, TABLESPACE_NAME, PCT_FREE, INI_TRANS, LOGGING,
 NUM_ROWS, BLOCKS, AVG_ROW_LEN, DEGREE, SAMPLE_SIZE, LAST_ANALYZED,
 PARTITIONED, BUFFER_POOL, ROW_MOVEMENT, DURATION, COMPRESSION, DROPPED,
 READ_ONLY, TEMPORARY, MAX_EXTENTS, IOT_TYPE, INITIAL_EXTENT, NEXT_EXTENT,
 MIN_EXTENTS, IS_VIRTUAL)
AS
    SELECT /*+ no_merge */ T.USER_NAME, T.TABLE_NAME, 
           DECODE(BITAND(T.FLAGS, 256),
                  256, '',
                  DECODE(BITAND(T.FLAGS, 512),
                         512, '', TS.NAME 
                  )
           ),
           MOD(T.PCTFREE, 100), T.INITRANS,
           DECODE(BITAND(T.FLAGS, 2), 0, 'YES', 'NO'),
           TRUNC(T.ROW_CNT), T.BLK_CNT, T.AVG_RLN, T.DOP,
           T.SAMPLE_SIZE, T.ANALYZE_TIME,
           DECODE(BITAND(T.FLAGS, 8),
                         8, 'YES', 'NO'),
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT'),
           DECODE(BITAND(T.FLAGS, 131072),
                         131072, 'ENABLED', 'DISABLED'),
           DECODE(BITAND(T.FLAGS, 32),
                  32, 'TRANSACTION',
                  DECODE(BITAND(T.FLAGS, 64),
                         64, 'SESSION'
                  )
           ),
           DECODE(BITAND(T.FLAGS, 262144),
                         262144, 'YES', 'NO'),
           DECODE(BITAND(OBJ_FLAGS, 128),
                         128, 'YES', 'NO'),
           DECODE(BITAND(T.FLAGS, 32768),
                         32768, 'YES', 'NO'),
           DECODE(BITAND(T.FLAGS, 32),
                  32, 'YES',
                  DECODE(BITAND(T.FLAGS, 64),
                         64, 'YES', 'NO'
                  )
           ),
           S.MAX_EXTS,
           DECODE(BITAND(T.FLAGS, 256),
                  256, 'IOT',
                  DECODE(BITAND(T.FLAGS, 512),
                         512, 'IOT_OVERFLOW', NULL
                  )
           ),
           VT_TS.BLKSIZE * TS.UNIT, --IE.BYTES,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           NVL2(TS.UNIT, 1, NULL), --IE.MIN_EXTENTS, 
           DECODE(BITAND(T.FLAGS, 4),
                                  4, 'Y', 'N')
    FROM   SYS._DD_TS TS, SYS._DD_SGMT S,
           (SELECT U.NAME AS USER_NAME, T.SGMT_ID, T.PCTFREE, T.INITRANS,
                   T.ROW_CNT,
                   T.BLK_CNT, T.AVG_RLN, T.DOP,
                   T.SAMPLE_SIZE, T.ANALYZE_TIME, T.FLAGS,
                   T.NAME AS TABLE_NAME, T.OWNER_ID, OBJ_FLAGS
            FROM   SYS._DD_USER U,
                   (SELECT T.SGMT_ID, T.PCTFREE, T.INITRANS, T.ROW_CNT,
                           T.BLK_CNT,
                           T.AVG_RLN, T.DOP,
                           S.SAMPLE_SIZE, 
                           T.ANALYZETIME AS ANALYZE_TIME, 
                           T.FLAGS, O.NAME, O.OWNER_ID, O.FLAGS AS OBJ_FLAGS
                    FROM   SYS._DD_TBL T,
                           (SELECT OBJ_ID, NAME, OWNER_ID, FLAGS
                            FROM   SYS._DD_OBJ
                            WHERE  TYPE_NO = 1
                            AND OBJ_ID NOT IN 
                                (SELECT OBJ_ID
                                 FROM SYS._DD_RECYCLEBIN)
                           ) O, _TAB_STATISTICS S
                    WHERE  T.OBJ_ID = O.OBJ_ID
                      AND  T.OBJ_ID = S.OBJ_ID(+)
                   ) T
            WHERE  U.USER_ID = T.OWNER_ID
           ) T,
           SYS._VT_TABLESPACE VT_TS
    WHERE  T.SGMT_ID = S.SGMT_ID(+)
      AND  S.TS_ID = TS.TS_ID(+)
      AND  TS.TS_ID = VT_TS.TSNO(+)
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TABLES FOR DBA_TABLES;

-- ALL_TABLES

CREATE OR REPLACE VIEW ALL_TABLES
(OWNER, TABLE_NAME, TABLESPACE_NAME, PCT_FREE, INI_TRANS, LOGGING,
 NUM_ROWS, BLOCKS, AVG_ROW_LEN, DEGREE, SAMPLE_SIZE, LAST_ANALYZED,
 PARTITIONED, BUFFER_POOL, ROW_MOVEMENT, DURATION, COMPRESSION, DROPPED,
 READ_ONLY, TEMPORARY, MAX_EXTENTS, IOT_TYPE, INITIAL_EXTENT, NEXT_EXTENT,
 MIN_EXTENTS, IS_VIRTUAL)
AS
SELECT USER_NAME, TABLE_NAME, TABLESPACE_NAME, PCT_FREE, INITRANS,
       LOGGING, NUM_ROWS, BLK_CNT, AVG_RLN, DOP, SAMPLE_SIZE, ANALYZE_TIME,
       PARTITIONED, BUFFER_POOL, ROW_MOVEMENT, DURATION, COMPRESSION,
       DROPPED, READ_ONLY, TEMPORARY, MAX_EXTS, IOT_TYPE, INITIAL_EXTENT,
       TO_NUMBER(DECODE(NEXT_EXT, 0,
                        DECODE(SHDRDBA, 0, NULL,
                               SYS_OP_NEXT_EXTENT(TS_ID, SHDRDBA)),
                        NEXT_EXT * BLKSIZE)),
       MIN_EXTENTS, IS_VIRTUAL
FROM (
    SELECT /*+ no_merge */ T.USER_NAME, T.TABLE_NAME,
           DECODE(BITAND(T.FLAGS, 256),
                  256, '',
                  DECODE(BITAND(T.FLAGS, 512),
                         512, '', TS.NAME 
                  )
           ) TABLESPACE_NAME,
           MOD(T.PCTFREE, 100) PCT_FREE, T.INITRANS,
           DECODE(BITAND(T.FLAGS, 2),
                  0, 'YES', 'NO') LOGGING,
           TRUNC(T.ROW_CNT) NUM_ROWS, T.BLK_CNT, T.AVG_RLN, T.DOP,
           T.SAMPLE_SIZE, T.ANALYZE_TIME,
           DECODE(BITAND(T.FLAGS, 8),
                  8, 'YES', 'NO') PARTITIONED,
           DECODE(S.BUFPOOL, 1, 'KEEP',
                  2, 'RECYCLE', 'DEFAULT') BUFFER_POOL,
           DECODE(BITAND(T.FLAGS, 131072),
                 131072, 'ENABLED', 'DISABLED') ROW_MOVEMENT,
           DECODE(BITAND(T.FLAGS, 32),
                  32, 'TRANSACTION',
                  DECODE(BITAND(T.FLAGS, 64),
                         64, 'SESSION'
                  )
           ) DURATION,
           DECODE(BITAND(T.FLAGS, 262144),
                  262144, 'YES', 'NO') COMPRESSION,
           DECODE(BITAND(OBJ_FLAGS, 128),
                  128, 'YES', 'NO') DROPPED,
           DECODE(BITAND(T.FLAGS, 32768),
                  32768, 'YES', 'NO') READ_ONLY,
           DECODE(BITAND(T.FLAGS, 32),
                  32, 'YES',
                  DECODE(BITAND(T.FLAGS, 64),
                         64, 'YES', 'NO'
                  )
           ) TEMPORARY,
           S.MAX_EXTS,
           DECODE(BITAND(T.FLAGS, 256),
                  256, 'IOT',
                  DECODE(BITAND(T.FLAGS, 512),
                         512, 'IOT_OVERFLOW', NULL
                  )
           ) IOT_TYPE,
           VT_TS.BLKSIZE * TS.UNIT INITIAL_EXTENT,
           S.NEXT_EXT, S.SHDRDBA, S.TS_ID, VT_TS.BLKSIZE,
           NVL2(TS.UNIT, 1, NULL) MIN_EXTENTS, --IE.MIN_EXTENTS, 
           DECODE(BITAND(T.FLAGS, 4),
                  4, 'Y', 'N') IS_VIRTUAL
FROM   SYS._DD_TS TS, SYS._DD_SGMT S,
           (SELECT U.NAME AS USER_NAME, T.SGMT_ID, T.PCTFREE, T.INITRANS,
                   T.ROW_CNT,
                   T.BLK_CNT, T.AVG_RLN, T.DOP,
                   T.SAMPLE_SIZE, T.ANALYZE_TIME, T.FLAGS,
                   T.NAME AS TABLE_NAME, T.OWNER_ID, OBJ_FLAGS
            FROM   SYS._DD_USER U,
                   (SELECT T.SGMT_ID, T.PCTFREE, T.INITRANS, T.ROW_CNT,
                           T.BLK_CNT, T.AVG_RLN, T.DOP,
                           S.SAMPLE_SIZE, 
                           T.ANALYZETIME AS ANALYZE_TIME, 
                           T.FLAGS, O.NAME, O.OWNER_ID, O.FLAGS AS OBJ_FLAGS
                    FROM   SYS._DD_TBL T,
                           (SELECT OBJ_ID, NAME, OWNER_ID, FLAGS
                            FROM   SYS._DD_OBJ
                            WHERE  TYPE_NO = 1
                              AND  (OWNER_ID = USERENV('SCHEMAID') OR OWNER_ID = 1)
                              AND OBJ_ID NOT IN (SELECT OBJ_ID FROM SYS._DD_RECYCLEBIN)
                           ) O, _TAB_STATISTICS S
                    WHERE  T.OBJ_ID = O.OBJ_ID
                      AND  T.OBJ_ID = S.OBJ_ID(+)
                   ) T
            WHERE  U.USER_ID = T.OWNER_ID
           ) T,
           SYS._VT_TABLESPACE VT_TS
    WHERE  T.SGMT_ID = S.SGMT_ID(+)
      AND  S.TS_ID = TS.TS_ID(+)
      AND  TS.TS_ID = VT_TS.TSNO(+)

    UNION

    SELECT T.USER_NAME, T.TABLE_NAME, 
           DECODE(BITAND(T.FLAGS, 256),
                  256, '',
                  DECODE(BITAND(T.FLAGS, 512),
                         512, '', TS.NAME 
                  )
           ) TABLESPACE_NAME,
           MOD(T.PCTFREE, 100) PCT_FREE, T.INITRANS,
           DECODE(BITAND(T.FLAGS, 2),
                  0, 'YES', 'NO') LOGGING,
           TRUNC(T.ROW_CNT) NUM_ROWS, T.BLK_CNT, T.AVG_RLN, T.DOP,
           T.SAMPLE_SIZE, T.ANALYZE_TIME,
           DECODE(BITAND(T.FLAGS, 8),
                  8, 'YES', 'NO') PARTITIONED,
           DECODE(S.BUFPOOL, 1, 'KEEP',
                  2, 'RECYCLE', 'DEFAULT') BUFFER_POOL,
           DECODE(BITAND(T.FLAGS, 131072),
                 131072, 'ENABLED', 'DISABLED') ROW_MOVEMENT,
           DECODE(BITAND(T.FLAGS, 32),
                  32, 'TRANSACTION',
                  DECODE(BITAND(T.FLAGS, 64),
                         64, 'SESSION'
                  )
           ) DURATION,
           DECODE(BITAND(T.FLAGS, 262144),
                  262144, 'YES', 'NO') COMPRESSION,
           DECODE(BITAND(OBJ_FLAGS, 128),
                  128, 'YES', 'NO') DROPPED,
           DECODE(BITAND(T.FLAGS, 32768),
                  32768, 'YES', 'NO') READ_ONLY,
           DECODE(BITAND(T.FLAGS, 32),
                  32, 'YES',
                  DECODE(BITAND(T.FLAGS, 64),
                         64, 'YES', 'NO'
                  )
           ) TEMPORARY,
           S.MAX_EXTS,
           DECODE(BITAND(T.FLAGS, 256),
                  256, 'IOT',
                  DECODE(BITAND(T.FLAGS, 512),
                         512, 'IOT_OVERFLOW', NULL
                  )
           ) IOT_TYPE,
           VT_TS.BLKSIZE * TS.UNIT INITIAL_EXTENT,
           S.NEXT_EXT, S.SHDRDBA, S.TS_ID, VT_TS.BLKSIZE,
           NVL2(TS.UNIT, 1, NULL) MIN_EXTENTS, --IE.MIN_EXTENTS, 
           DECODE(BITAND(T.FLAGS, 4),
                  4, 'Y', 'N') IS_VIRTUAL
    FROM   SYS._DD_TS TS, SYS._DD_SGMT S,
           (SELECT U.NAME AS USER_NAME, T.SGMT_ID, T.PCTFREE, T.INITRANS, T.ROW_CNT,
                   T.BLK_CNT, T.AVG_RLN, T.DOP,
                   T.SAMPLE_SIZE, T.ANALYZE_TIME, T.FLAGS,
                   T.NAME AS TABLE_NAME, T.OWNER_ID, OBJ_FLAGS
            FROM   SYS._DD_USER U,
                   (SELECT T.SGMT_ID, T.PCTFREE, T.INITRANS, T.ROW_CNT,
                           T.BLK_CNT,
                           T.FLAGS, T.AVG_RLN, T.DOP,
                           S.SAMPLE_SIZE, 
                           T.ANALYZETIME AS ANALYZE_TIME,
                           O.NAME, O.OWNER_ID, O.FLAGS AS OBJ_FLAGS
                    FROM   SYS._DD_TBL T,
                           (SELECT OBJ_ID, NAME, OWNER_ID, FLAGS
                            FROM   SYS._DD_OBJ
                            WHERE  TYPE_NO = 1
                            AND OBJ_ID NOT IN
                                (SELECT OBJ_ID
                                 FROM SYS._DD_RECYCLEBIN)
                           ) O, _TAB_STATISTICS S
                    WHERE  T.OBJ_ID = O.OBJ_ID
                      AND  T.OBJ_ID = S.OBJ_ID(+)
                   ) T
            WHERE  U.USER_ID = T.OWNER_ID
           ) T,
           SYS._VT_TABLESPACE VT_TS
    WHERE  T.SGMT_ID = S.SGMT_ID(+)
      AND  S.TS_ID = TS.TS_ID(+)
      AND  TS.TS_ID = VT_TS.TSNO(+)
      AND  EXISTS (SELECT NULL
                   FROM   (SELECT SAU2.PRIV_NO
                           FROM   SYS._DD_SYSAUTH SAU2
                           START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                           CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                          ) SAU
                   WHERE (SAU.PRIV_NO    = -483
                           OR SAU.PRIV_NO = -482
                           OR SAU.PRIV_NO = -481
                           OR SAU.PRIV_NO = -480
                           OR SAU.PRIV_NO = -485
                           OR SAU.PRIV_NO = -473
                           OR SAU.PRIV_NO IN (
                                 SELECT USER_ID FROM SYS._DD_USER
                                 WHERE NAME = 'DBA')
                          )
                  )

    UNION

    SELECT T.USER_NAME, T.TABLE_NAME,
           DECODE(BITAND(T.FLAGS, 256),
                  256, '',
                  DECODE(BITAND(T.FLAGS, 512),
                         512, '', TS.NAME 
                  )
           ) TABLESPACE_NAME,
           MOD(T.PCTFREE, 100) PCT_FREE, T.INITRANS,
           DECODE(BITAND(T.FLAGS, 2),
                  0, 'YES', 'NO') LOGGING,
           TRUNC(T.ROW_CNT) NUM_ROWS, T.BLK_CNT, T.AVG_RLN, T.DOP,
           T.SAMPLE_SIZE, T.ANALYZE_TIME,
           DECODE(BITAND(T.FLAGS, 8),
                  8, 'YES', 'NO') PARTITIONED,
           DECODE(S.BUFPOOL, 1, 'KEEP',
                  2, 'RECYCLE', 'DEFAULT') BUFFER_POOL,
           DECODE(BITAND(T.FLAGS, 131072),
                 131072, 'ENABLED', 'DISABLED') ROW_MOVEMENT,
           DECODE(BITAND(T.FLAGS, 32),
                  32, 'TRANSACTION',
                  DECODE(BITAND(T.FLAGS, 64),
                         64, 'SESSION'
                  )
           ) DURATION,
           DECODE(BITAND(T.FLAGS, 262144),
                  262144, 'YES', 'NO') COMPRESSION,
           DECODE(BITAND(OBJ_FLAGS, 128),
                  128, 'YES', 'NO') DROPPED,
           DECODE(BITAND(T.FLAGS, 32768),
                  32768, 'YES', 'NO') READ_ONLY,
           DECODE(BITAND(T.FLAGS, 32),
                  32, 'YES',
                  DECODE(BITAND(T.FLAGS, 64),
                         64, 'YES', 'NO'
                  )
           ) TEMPORARY,
           S.MAX_EXTS,
           DECODE(BITAND(T.FLAGS, 256),
                  256, 'IOT',
                  DECODE(BITAND(T.FLAGS, 512),
                         512, 'IOT_OVERFLOW', NULL
                  )
           ) IOT_TYPE,
           VT_TS.BLKSIZE * TS.UNIT INITIAL_EXTENT,
           S.NEXT_EXT, S.SHDRDBA, S.TS_ID, VT_TS.BLKSIZE,
           NVL2(TS.UNIT, 1, NULL) MIN_EXTENTS, --IE.MIN_EXTENTS, 
           DECODE(BITAND(T.FLAGS, 4),
                  4, 'Y', 'N') IS_VIRTUAL
    FROM   SYS._DD_TS TS, SYS._DD_SGMT S,
           (SELECT U.NAME AS USER_NAME, T.SGMT_ID, T.PCTFREE, T.INITRANS, T.ROW_CNT,
                   T.BLK_CNT, T.AVG_RLN, T.DOP,
                   T.SAMPLE_SIZE, T.ANALYZE_TIME, T.FLAGS,
                   T.NAME AS TABLE_NAME, T.OWNER_ID, OBJ_FLAGS
            FROM   SYS._DD_USER U,
                   (SELECT T.SGMT_ID, T.PCTFREE, T.INITRANS, T.ROW_CNT,
                           T.BLK_CNT,
                           T.FLAGS, T.AVG_RLN, T.DOP,
                           S.SAMPLE_SIZE, 
                           T.ANALYZETIME AS ANALYZE_TIME,
                           O.NAME, O.OWNER_ID, O.FLAGS AS OBJ_FLAGS
                    FROM   SYS._DD_TBL T,
                           (SELECT OBJ_ID, NAME, OWNER_ID, FLAGS
                            FROM   SYS._DD_OBJ
                            WHERE  TYPE_NO = 1
                                   AND OBJ_ID IN (
                                        SELECT OBJ_ID
                                        FROM   SYS._DD_OBJAUTH
                                        WHERE  GRANTEE_ID in (SELECT USER_ID
                                                              FROM X$USER_ROLE)
                                      )
                                   AND OBJ_ID NOT IN (
                                        SELECT OBJ_ID
                                        FROM SYS._DD_RECYCLEBIN)
                           ) O, _TAB_STATISTICS S
                    WHERE  T.OBJ_ID = O.OBJ_ID
                      AND  T.OBJ_ID = S.OBJ_ID(+)
                   ) T
            WHERE  U.USER_ID = T.OWNER_ID
           ) T,
           SYS._VT_TABLESPACE VT_TS
    WHERE  T.SGMT_ID = S.SGMT_ID(+)
      AND  S.TS_ID = TS.TS_ID(+)
      AND  TS.TS_ID = VT_TS.TSNO(+)
)
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TABLES FOR ALL_TABLES;
GRANT SELECT ON ALL_TABLES TO PUBLIC;

-- USER_TABLES

CREATE OR REPLACE VIEW USER_TABLES
AS
    SELECT /*+ no_merge */ TABLE_NAME, TABLESPACE_NAME, PCT_FREE, INI_TRANS, LOGGING,
           NUM_ROWS, BLOCKS, AVG_ROW_LEN, DEGREE, SAMPLE_SIZE, LAST_ANALYZED,
           PARTITIONED, BUFFER_POOL, ROW_MOVEMENT, DURATION,
           COMPRESSION, DROPPED, READ_ONLY, TEMPORARY, MAX_EXTENTS, IOT_TYPE,
           INITIAL_EXTENT, NEXT_EXTENT, MIN_EXTENTS, IS_VIRTUAL
    FROM DBA_TABLES
    WHERE OWNER = USERENV('SCHEMA')
    and table_name not like '_TB_STAT_SNAP_%'
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TABLES FOR USER_TABLES;
GRANT SELECT ON USER_TABLES TO PUBLIC;



CREATE OR REPLACE VIEW DBA_TABLESPACES
(TABLESPACE_NAME, TS_ID, DATAFILE_COUNT,
 BLOCK_SIZE, NEXT_EXTENT, STATUS, CONTENTS, LOGGING, FORCE_LOGGING,
 ALLOCATION_TYPE, ENCRYPTED, INITIAL_EXTENT, MIN_EXTENTS, MAX_EXTENTS,
 EXTENT_MANAGEMENT, SEGMENT_SPACE_MANAGEMENT)
AS
    SELECT /*+ no_merge */ TS.NAME, TS.TS_ID,
           TS.FILE_CNT, VT_TS.BLKSIZE,
           TO_NUMBER(DECODE(BITAND(TS.FLAGS, 2),
                            0, NULL, TS.UNIT * VT_TS.BLKSIZE)),
           DECODE(BITAND(TS.FLAGS, 4), 0, 'OFFLINE',
                  DECODE(BITAND(TS.FLAGS, 64), 0, 'ONLINE',
                                'READ ONLY')),
           DECODE(TS.TYPE_NO, 2, 'TEMPORARY',
                              1, 'UNDO',
                              'PERMANENT'),
           DECODE(BITAND(TS.FLAGS, 16), 0, 'NOLOGGING', 'LOGGING'),
           DECODE(BITAND(TS.FLAGS, 32),
                  0, 'NO', 'YES'),
           DECODE(BITAND(TS.FLAGS, 2),
                  0, 'SYSTEM', 'UNIFORM'),
           DECODE(BITAND(TS.FLAGS, 128),
                  0, 'NO', 'YES'),
           DECODE(BITAND(TS.FLAGS, 2),
                  0, 16 * VT_TS.BLKSIZE, TS.UNIT * VT_TS.BLKSIZE),
           1, 2147483645,
           CAST('LOCAL' AS VARCHAR(5)), CAST('AUTO' AS VARCHAR(4))
    FROM   SYS._DD_TS TS, SYS._VT_TABLESPACE VT_TS
    WHERE  TS.TS_ID = VT_TS.TSNO
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TABLESPACES FOR DBA_TABLESPACES;


CREATE OR REPLACE VIEW USER_TABLESPACES
AS 
    SELECT TABLESPACE_NAME, TS_ID, DATAFILE_COUNT, BLOCK_SIZE, NEXT_EXTENT, 
           STATUS, CONTENTS, LOGGING, FORCE_LOGGING, ALLOCATION_TYPE, 
           ENCRYPTED, INITIAL_EXTENT, MIN_EXTENTS, MAX_EXTENTS,
           EXTENT_MANAGEMENT, SEGMENT_SPACE_MANAGEMENT
    FROM DBA_TABLESPACES;
CREATE OR REPLACE PUBLIC SYNONYM USER_TABLESPACES FOR USER_TABLESPACES;
GRANT SELECT ON USER_TABLESPACES TO PUBLIC;




create or replace view dba_users
(username, user_id, password, account_status,
 lock_date, expiry_date, default_tablespace, created, profile,
 default_temp_tablespace, authentication_type)
as
    select /*+ no_merge */
        u.name, u.user_id, u.password,
        decode(u.astatus,
               1, 'LOCKED',
               2, 'EXPIRED',
               4, 'LOCKED(TIMED)',
               8, 'EXPIRED(GRACE)',
               2 + 4, 'EXPIRED & LOCKED(TIMED)',
               8 + 4, 'EXPIRED(GRACE) & LOCKED(TIMED)',
               8 + 1, 'EXPIRED(GRACE) & LOCKED',

               1 + 2, 'EXPIRED & LOCKED',
               'OPEN'),
        u.ltime,
        u.exptime,
        dts.name,
        u.ctime,
        pn.name,
        dtts.name,
        decode(u.ident_type,
               0, 'PASSWORD',
               1, 'EXTERNAL',
               2, 'GLOBAL')
    from sys._dd_user u, sys._dd_ts dts, sys._dd_ts dtts, sys._profile_user pu, sys._profile_name pn
    where u.data_ts_id = dts.ts_id(+) and
          u.type_no = 1 and
          u.user_id = pu.user_id(+) and
          pu.profile_no = pn.profile_no(+) and
          u.temp_ts_id = dtts.ts_id(+)
;

create or replace view all_users
(username, user_id, created)
as
    select /*+ no_merge */ name, user_id, ctime from sys._dd_user
    where type_no = 1
;

create or replace view user_users
as
    select /*+ no_merge */ username, user_id, account_status, lock_date, expiry_date,
           default_tablespace, created
    from   dba_users
    where  user_id = USERENV('SCHEMAID')
;

create or replace public synonym dba_users for dba_users;
create or replace public synonym all_users for all_users;
create or replace public synonym user_users for user_users;

grant select on all_users to public;
grant select on user_users to public;


CREATE OR REPLACE VIEW DBA_TBL_PARTITIONS
(OWNER, TABLE_NAME, COMPOSITE, PARTITION_NAME, SUBPARTITION_COUNT,
 BOUND, PARTITION_NO, TABLESPACE_NAME,
 PCT_FREE, INI_TRANS, NEXT_EXTENT, MAX_EXTENTS, COMPRESSION, BUFFER_POOL,
 NUM_ROWS, BLOCKS, LAST_ANALYZED, LOGGING)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME,
           DECODE(PO.SUBPARTTYPE, 0, 'NO', 'YES'),
           O.SUBNAME, P.SUBPARTCNT,
           (SELECT BOUND_STR
            FROM SYS._DD_PARTITION_BOUND_STR D
            WHERE D.OBJ_ID=P.OBJ_ID),
           P.PART_NO, TS.NAME,
           P.PCTFREE, P.INITRANS,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           S.MAX_EXTS,
           DECODE(BITAND(P.FLAGS, 262144),
                         262144, 'YES', 'NO'),
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT'),
           TRUNC(P.ROW_CNT), P.BLK_CNT, P.ANALYZETIME,
           DECODE(BITAND(T.FLAGS, 2), 0, 'YES', 'NO')
    FROM SYS._DD_OBJ O, SYS._DD_TBLPART P, SYS._DD_TS TS, SYS._DD_USER U,
         SYS._DD_SGMT S, SYS._DD_PARTOBJ PO, SYS._DD_TBL T, 
         SYS._VT_TABLESPACE VT_TS
          
    WHERE O.OBJ_ID = P.OBJ_ID
      AND P.BO_ID = T.OBJ_ID
      AND TS.TS_ID = P.TS_ID
      AND TS.TS_ID = VT_TS.TSNO(+)
      AND P.SGMT_ID = S.SGMT_ID(+)
      AND U.USER_ID = O.OWNER_ID
      AND P.BO_ID = PO.OBJ_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TBL_PARTITIONS FOR DBA_TBL_PARTITIONS;
CREATE OR REPLACE PUBLIC SYNONYM DBA_TAB_PARTITIONS FOR DBA_TBL_PARTITIONS;

CREATE OR REPLACE VIEW ALL_TBL_PARTITIONS
(OWNER, TABLE_NAME, COMPOSITE, PARTITION_NAME, SUBPARTITION_COUNT,
 BOUND, PARTITION_NO, TABLESPACE_NAME,
 PCT_FREE, INI_TRANS, NEXT_EXTENT, MAX_EXTENTS, COMPRESSION, BUFFER_POOL,
 NUM_ROWS, BLOCKS, LAST_ANALYZED,
 MAX_TRANS, INITIAL_EXTENT, MIN_EXTENT, LOGGING)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME,
           DECODE(PO.SUBPARTTYPE, 0, 'NO', 'YES'),
           O.SUBNAME, P.SUBPARTCNT,
           (SELECT BOUND_STR
            FROM SYS._DD_PARTITION_BOUND_STR D
            WHERE D.OBJ_ID=P.OBJ_ID),
           P.PART_NO, TS.NAME,
           P.PCTFREE, P.INITRANS,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           S.MAX_EXTS,
           DECODE(BITAND(P.FLAGS, 262144),
                         262144, 'YES', 'NO'),
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT'),
           TRUNC(P.ROW_CNT), P.BLK_CNT, P.ANALYZETIME,
           LEAST(255,
             TRUNC((SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')/50,0)),
          (TS.UNIT
            * (SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')),
           (8 
             * (SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')),
          DECODE(BITAND(T.FLAGS, 2), 0, 'YES', 'NO')
    FROM SYS._DD_OBJ O, SYS._DD_TBLPART P, SYS._DD_TS TS, SYS._DD_USER U,
         SYS._DD_SGMT S, SYS._DD_PARTOBJ PO, SYS._DD_TBL T,
         SYS._VT_TABLESPACE VT_TS
    WHERE O.OBJ_ID = P.OBJ_ID
      AND P.BO_ID = T.OBJ_ID
      AND TS.TS_ID = P.TS_ID
      AND TS.TS_ID = VT_TS.TSNO(+)
      AND P.SGMT_ID = S.SGMT_ID(+)
      AND U.USER_ID = O.OWNER_ID
      AND P.BO_ID = PO.OBJ_ID
      AND (
        (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1)
        OR
        (
          
          EXISTS (SELECT NULL
                  FROM   (SELECT SAU2.PRIV_NO
                          FROM   SYS._DD_SYSAUTH SAU2
                          START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                          CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                         ) SAU
                  WHERE (SAU.PRIV_NO    = -483
                          OR SAU.PRIV_NO = -482
                          OR SAU.PRIV_NO = -481
                          OR SAU.PRIV_NO = -480
                          OR SAU.PRIV_NO = -485
                          OR SAU.PRIV_NO = -473
                          OR SAU.PRIV_NO IN (
                                SELECT USER_ID FROM SYS._DD_USER
                                WHERE NAME = 'DBA')
                         )
                 )
        )
        OR
           
        (O.BO_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
        )
      )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TBL_PARTITIONS FOR ALL_TBL_PARTITIONS;
GRANT SELECT ON ALL_TBL_PARTITIONS TO PUBLIC;
CREATE OR REPLACE PUBLIC SYNONYM ALL_TAB_PARTITIONS FOR ALL_TBL_PARTITIONS;
GRANT SELECT ON ALL_TAB_PARTITIONS TO PUBLIC;

CREATE OR REPLACE VIEW USER_TBL_PARTITIONS
(TABLE_NAME, COMPOSITE, PARTITION_NAME, SUBPARTITION_COUNT,
 BOUND, PARTITION_NO, TABLESPACE_NAME,
 PCT_FREE, INI_TRANS, NEXT_EXTENT, MAX_EXTENTS, COMPRESSION, BUFFER_POOL,
 NUM_ROWS, BLOCKS, LAST_ANALYZED, LOGGING)
AS
    SELECT /*+ no_merge */ O.NAME,
           DECODE(PO.SUBPARTTYPE, 0, 'NO', 'YES'),
           O.SUBNAME, P.SUBPARTCNT,
           (SELECT BOUND_STR
            FROM SYS._DD_PARTITION_BOUND_STR D
            WHERE D.OBJ_ID=P.OBJ_ID),
           P.PART_NO, TS.NAME,
           P.PCTFREE, P.INITRANS,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           S.MAX_EXTS,
           DECODE(BITAND(P.FLAGS, 262144),
                         262144, 'YES', 'NO'),
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT'),
           TRUNC(P.ROW_CNT), P.BLK_CNT, P.ANALYZETIME,
           DECODE(BITAND(T.FLAGS, 2), 0, 'YES', 'NO')
    FROM SYS._DD_OBJ O, SYS._DD_TBLPART P, SYS._DD_TS TS, SYS._DD_SGMT S,
         SYS._DD_PARTOBJ PO, SYS._VT_TABLESPACE VT_TS, SYS._DD_TBL T
    WHERE O.OBJ_ID = P.OBJ_ID
      AND P.BO_ID = T.OBJ_ID
      AND TS.TS_ID = P.TS_ID
      AND TS.TS_ID = VT_TS.TSNO(+)
      AND P.SGMT_ID = S.SGMT_ID(+)
      AND O.OWNER_ID = USERENV('SCHEMAID')
      AND P.BO_ID = PO.OBJ_ID
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TBL_PARTITIONS FOR USER_TBL_PARTITIONS;
GRANT SELECT ON USER_TBL_PARTITIONS TO PUBLIC;
CREATE OR REPLACE PUBLIC SYNONYM USER_TAB_PARTITIONS FOR USER_TBL_PARTITIONS;
GRANT SELECT ON USER_TAB_PARTITIONS TO PUBLIC;



CREATE OR REPLACE VIEW DBA_IDX_PARTITIONS
(OWNER, INDEX_NAME, COMPOSITE, PARTITION_NAME, SUBPARTITION_COUNT,
 BOUND, PARTITION_NO, BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS,
  CLUSTERING_FACTOR, 
 STATUS, NUM_ROWS, TABLESPACE_NAME,
 PCT_FREE, INI_TRANS, NEXT_EXTENT, MAX_EXTENTS, BUFFER_POOL,
 MAX_TRANS, INITIAL_EXTENT, MIN_EXTENT, LOGGING, LAST_ANALYZED)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME,
           DECODE(PO.SUBPARTTYPE, 0, 'NO', 'YES'),
           O.SUBNAME, P.SUBPARTCNT,
           (select bound_str
            from sys._dd_partition_bound_str D
            where D.obj_id=P.OBJ_ID),
           P.PART_NO,
           P.BLEVEL, P.LEAF_BLK_CNT, P.DISTINCT_KEY, P.CLUFAC,
           DECODE(BITAND(P.FLAGS, 2),
                0, 'USABLE', 'UNUSABLE'),
           TRUNC(P.ROW_CNT),
           TS.NAME,
           P.PCTFREE, P.INITRANS,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           S.MAX_EXTS,
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT'),
           LEAST(255,
             TRUNC((SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')/50,0)),
          (TS.UNIT
            * (SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')),
           (8 
             * (SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')),
          DECODE(BITAND(I.FLAGS, 1), 0, 'YES', 'NO'),
           P.ANALYZETIME
    FROM SYS._DD_OBJ O, SYS._DD_IDXPART P, SYS._DD_TS TS, SYS._DD_USER U,
         SYS._DD_SGMT S, SYS._DD_IDX I, SYS._DD_PARTOBJ PO,
         SYS._VT_TABLESPACE VT_TS
    WHERE O.OBJ_ID = P.OBJ_ID
      AND TS.TS_ID = P.TS_ID
      AND TS.TS_ID = VT_TS.TSNO(+)
      AND P.SGMT_ID = S.SGMT_ID(+)
      AND U.USER_ID = O.OWNER_ID
      AND P.BO_ID = I.OBJ_ID
      AND I.OBJ_ID = PO.OBJ_ID
      AND I.TYPE_NO IN (1, 4, 
                        13)
    ORDER BY P.BO_ID, P.PART_NO
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_IDX_PARTITIONS FOR DBA_IDX_PARTITIONS;
CREATE OR REPLACE PUBLIC SYNONYM DBA_IND_PARTITIONS FOR DBA_IDX_PARTITIONS;

CREATE OR REPLACE VIEW ALL_IDX_PARTITIONS
(OWNER, INDEX_NAME, COMPOSITE, PARTITION_NAME, SUBPARTITION_COUNT,
 BOUND, PARTITION_NO, BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS,
  CLUSTERING_FACTOR, 
 STATUS, NUM_ROWS, TABLESPACE_NAME,
 PCT_FREE, INI_TRANS, NEXT_EXTENT, MAX_EXTENTS, BUFFER_POOL,
 MAX_TRANS, INITIAL_EXTENT, MIN_EXTENT, LOGGING, LAST_ANALYZED)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME,
           DECODE(PO.SUBPARTTYPE, 0, 'NO', 'YES'),
           O.SUBNAME, P.SUBPARTCNT,
           (select bound_str
            from sys._dd_partition_bound_str D
            where D.obj_id=P.OBJ_ID),
           P.PART_NO,
           P.BLEVEL, P.LEAF_BLK_CNT, P.DISTINCT_KEY, P.CLUFAC,
           DECODE(BITAND(P.FLAGS, 2),
                0, 'USABLE', 'UNUSABLE'),
           TRUNC(P.ROW_CNT),
           TS.NAME,
           P.PCTFREE, P.INITRANS,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           S.MAX_EXTS,
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT'),
           LEAST(255,
             TRUNC((SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')/50,0)),
          (TS.UNIT
            * (SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')),
           (8 
             * (SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')),
          DECODE(BITAND(I.FLAGS, 1), 0, 'YES', 'NO'),
           P.ANALYZETIME
    FROM SYS._DD_OBJ O, SYS._DD_IDXPART P, SYS._DD_TS TS, SYS._DD_USER U,
         SYS._DD_SGMT S, SYS._DD_IDX I, SYS._DD_PARTOBJ PO,
         SYS._VT_TABLESPACE VT_TS
    WHERE O.OBJ_ID = P.OBJ_ID
      AND TS.TS_ID = P.TS_ID
      AND TS.TS_ID = VT_TS.TSNO(+)
      AND P.SGMT_ID = S.SGMT_ID(+)
      AND U.USER_ID = O.OWNER_ID
      AND P.BO_ID = I.OBJ_ID
      AND I.OBJ_ID = PO.OBJ_ID
      AND I.TYPE_NO IN (1, 4,
                        13)
      AND (
        (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1)
        OR
        (
          
          EXISTS (SELECT NULL
                  FROM   (SELECT SAU2.PRIV_NO
                          FROM   SYS._DD_SYSAUTH SAU2
                          START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                          CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                         ) SAU
                  WHERE (SAU.PRIV_NO    = -483
                          OR SAU.PRIV_NO = -482
                          OR SAU.PRIV_NO = -481
                          OR SAU.PRIV_NO = -480
                          OR SAU.PRIV_NO = -485
                          OR SAU.PRIV_NO = -473
                          OR SAU.PRIV_NO IN (
                                SELECT USER_ID FROM SYS._DD_USER
                                WHERE NAME = 'DBA')
                         )
                 )
        )
        OR
           
        (I.BO_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
        )
      )
    ORDER BY P.BO_ID, P.PART_NO
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_IDX_PARTITIONS FOR ALL_IDX_PARTITIONS;
GRANT SELECT ON ALL_IDX_PARTITIONS TO PUBLIC;
CREATE OR REPLACE PUBLIC SYNONYM ALL_IND_PARTITIONS FOR ALL_IDX_PARTITIONS;
GRANT SELECT ON ALL_IND_PARTITIONS TO PUBLIC;

CREATE OR REPLACE VIEW USER_IDX_PARTITIONS
(INDEX_NAME, COMPOSITE, PARTITION_NAME, SUBPARTITION_COUNT,
 BOUND, PARTITION_NO, BLEVEL, LEAF_BLOCKS, DISTINCT_KEYS,
  CLUSTERING_FACTOR, 
 STATUS, NUM_ROWS, TABLESPACE_NAME,
 PCT_FREE, INI_TRANS, NEXT_EXTENT, MAX_EXTENTS, BUFFER_POOL, 
 MAX_TRANS, INITIAL_EXTENT, MIN_EXTENT, LOGGING, LAST_ANALYZED)
AS
    SELECT /*+ no_merge */ O.NAME,
           DECODE(PO.SUBPARTTYPE, 0, 'NO', 'YES'),
           O.SUBNAME, P.SUBPARTCNT,
           (select bound_str
            from sys._dd_partition_bound_str D
            where D.obj_id=P.OBJ_ID),
           P.PART_NO,
           P.BLEVEL, P.LEAF_BLK_CNT, P.DISTINCT_KEY, P.CLUFAC,
           DECODE(BITAND(P.FLAGS, 2),
                0, 'USABLE', 'UNUSABLE'),
           TRUNC(P.ROW_CNT),
           TS.NAME,
           P.PCTFREE, P.INITRANS,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           S.MAX_EXTS,
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT'),
           LEAST(255,
             TRUNC((SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')/50,0)),
          (TS.UNIT
            * (SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')),
           (8 
             * (SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')),
          DECODE(BITAND(I.FLAGS, 1), 0, 'YES', 'NO'),
           P.ANALYZETIME
    FROM   SYS._DD_OBJ O, SYS._DD_IDXPART P, SYS._DD_TS TS, SYS._DD_SGMT S,
           SYS._DD_IDX I, SYS._DD_PARTOBJ PO, SYS._VT_TABLESPACE VT_TS
    WHERE  O.OBJ_ID = P.OBJ_ID
      AND  TS.TS_ID = P.TS_ID
      AND  TS.TS_ID = VT_TS.TSNO(+)
      AND  P.SGMT_ID = S.SGMT_ID(+)
      AND  P.BO_ID = I.OBJ_ID
      AND  I.OBJ_ID = PO.OBJ_ID
      AND  I.TYPE_NO IN (1, 4,
                         13)
      AND  O.OWNER_ID = USERENV('SCHEMAID')
    ORDER BY P.BO_ID, P.PART_NO
;

CREATE OR REPLACE PUBLIC SYNONYM USER_IDX_PARTITIONS FOR USER_IDX_PARTITIONS;
GRANT SELECT ON USER_IDX_PARTITIONS TO PUBLIC;
CREATE OR REPLACE public synonym USER_IND_PARTITIONS FOR USER_IDX_PARTITIONS;
GRANT SELECT ON USER_IND_PARTITIONS TO PUBLIC;


CREATE OR REPLACE VIEW DBA_LOB_PARTITIONS
(OWNER, TABLE_NAME, COLUMN_NAME, PARTITION_NAME,
 LOB_PARTITION_NAME, LOB_INDPART_NAME, PARTITION_NO, COMPOSITE,
 IN_ROW, TABLESPACE_NAME, NEXT_EXTENT, MAX_EXTENTS, BUFFER_POOL)
AS
SELECT /*+ no_merge */ U.NAME, OTP.NAME, C.NAME, OTP.SUBNAME,
       O.SUBNAME, OIP.SUBNAME, P.PART_NO,
       DECODE(PO.SUBPARTTYPE, 0, 'NO', 'YES'),
       DECODE(BITAND(P.FLAGS, 1),
              1, 'YES', 'NO'),
       TS.NAME,
       TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                        DECODE(S.SHDRDBA, 0, NULL,
                               SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                        S.NEXT_EXT * VT_TS.BLKSIZE)),
       S.MAX_EXTS,
       DECODE(S.BUFPOOL, 1, 'KEEP',
                         2, 'RECYCLE', 'DEFAULT')
FROM   SYS._DD_OBJ O, SYS._DD_OBJ OTP, SYS._DD_OBJ OIP,
       SYS._DD_LOBPART P, SYS._DD_LOB L, SYS._DD_COL C,
       SYS._DD_TS TS, SYS._DD_USER U,
       SYS._DD_SGMT S, SYS._DD_PARTOBJ PO, SYS._VT_TABLESPACE VT_TS
WHERE  P.PART_OBJ_ID = O.OBJ_ID
  AND  P.TBLPART_OBJ_ID = OTP.OBJ_ID
  AND  P.IDXPART_OBJ_ID = OIP.OBJ_ID
  AND  PO.OBJ_ID = OTP.BO_ID
  AND  L.OBJ_ID = P.PARENTOBJ_ID
  AND  C.OBJ_ID = OTP.BO_ID
  AND  C.COL_NO = L.COL_NO
  AND  TS.TS_ID = P.TS_ID
  AND  TS.TS_ID = VT_TS.TSNO(+)
  AND  P.SGMT_ID = S.SGMT_ID(+)
  AND  U.USER_ID = O.OWNER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_LOB_PARTITIONS FOR DBA_LOB_PARTITIONS;

CREATE OR REPLACE VIEW ALL_LOB_PARTITIONS
(OWNER, TABLE_NAME, COLUMN_NAME, PARTITION_NAME,
 LOB_PARTITION_NAME, LOB_INDPART_NAME, PARTITION_NO, COMPOSITE,
 IN_ROW, TABLESPACE_NAME, NEXT_EXTENT, MAX_EXTENTS, BUFFER_POOL)
AS
SELECT /*+ no_merge */ U.NAME, OTP.NAME, C.NAME, OTP.SUBNAME,
       O.SUBNAME, OIP.SUBNAME, P.PART_NO,
       DECODE(PO.SUBPARTTYPE, 0, 'NO', 'YES'),
       DECODE(BITAND(P.FLAGS, 1),
              1, 'YES', 'NO'),
       TS.NAME,
       TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                        DECODE(S.SHDRDBA, 0, NULL,
                               SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                        S.NEXT_EXT * VT_TS.BLKSIZE)),
       S.MAX_EXTS,
       DECODE(S.BUFPOOL, 1, 'KEEP',
                         2, 'RECYCLE', 'DEFAULT')
FROM   SYS._DD_OBJ O, SYS._DD_OBJ OTP, SYS._DD_OBJ OIP,
       SYS._DD_LOBPART P, SYS._DD_LOB L, SYS._DD_COL C,
       SYS._DD_TS TS, SYS._DD_USER U,
       SYS._DD_SGMT S, SYS._DD_PARTOBJ PO, SYS._VT_TABLESPACE VT_TS
WHERE  P.PART_OBJ_ID = O.OBJ_ID
  AND  P.TBLPART_OBJ_ID = OTP.OBJ_ID
  AND  P.IDXPART_OBJ_ID = OIP.OBJ_ID
  AND  PO.OBJ_ID = OTP.BO_ID
  AND  L.OBJ_ID = P.PARENTOBJ_ID
  AND  C.OBJ_ID = OTP.BO_ID
  AND  C.COL_NO = L.COL_NO
  AND  TS.TS_ID = P.TS_ID
  AND  TS.TS_ID = VT_TS.TSNO(+)
  AND  P.SGMT_ID = S.SGMT_ID(+)
  AND  U.USER_ID = O.OWNER_ID
  AND  (
        (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1)
        OR
        (
          
          EXISTS (SELECT NULL
                  FROM   (SELECT SAU2.PRIV_NO
                          FROM   SYS._DD_SYSAUTH SAU2
                          START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                          CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                         ) SAU
                  WHERE (SAU.PRIV_NO    = -483
                          OR SAU.PRIV_NO = -482
                          OR SAU.PRIV_NO = -481
                          OR SAU.PRIV_NO = -480
                          OR SAU.PRIV_NO = -485
                          OR SAU.PRIV_NO = -473
                          OR SAU.PRIV_NO IN (
                                SELECT USER_ID FROM SYS._DD_USER
                                WHERE NAME = 'DBA')
                         )
                 )
        )
        OR
           
        (OTP.BO_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
        )
      )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_LOB_PARTITIONS FOR ALL_LOB_PARTITIONS;
GRANT SELECT ON ALL_LOB_PARTITIONS TO PUBLIC;

CREATE OR REPLACE VIEW USER_LOB_PARTITIONS
(TABLE_NAME, COLUMN_NAME, PARTITION_NAME,
 LOB_PARTITION_NAME, LOB_INDPART_NAME, PARTITION_NO, COMPOSITE,
 IN_ROW, TABLESPACE_NAME, NEXT_EXTENT, MAX_EXTENTS, BUFFER_POOL)
AS
SELECT /*+ no_merge */ OTP.NAME, C.NAME, OTP.SUBNAME,
       O.SUBNAME, OIP.SUBNAME, P.PART_NO,
       DECODE(PO.SUBPARTTYPE, 0, 'NO', 'YES'),
       DECODE(BITAND(P.FLAGS, 1),
              1, 'YES', 'NO'),
       TS.NAME,
       TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                        DECODE(S.SHDRDBA, 0, NULL,
                               SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                        S.NEXT_EXT * VT_TS.BLKSIZE)),
       S.MAX_EXTS,
       DECODE(S.BUFPOOL, 1, 'KEEP',
                         2, 'RECYCLE', 'DEFAULT')
FROM   SYS._DD_OBJ O, SYS._DD_OBJ OTP, SYS._DD_OBJ OIP,
       SYS._DD_LOBPART P, SYS._DD_LOB L, SYS._DD_COL C,
       SYS._DD_TS TS,
       SYS._DD_SGMT S, SYS._DD_PARTOBJ PO, SYS._VT_TABLESPACE VT_TS
WHERE  P.PART_OBJ_ID = O.OBJ_ID
  AND  P.TBLPART_OBJ_ID = OTP.OBJ_ID
  AND  P.IDXPART_OBJ_ID = OIP.OBJ_ID
  AND  PO.OBJ_ID = OTP.BO_ID
  AND  L.OBJ_ID = P.PARENTOBJ_ID
  AND  C.OBJ_ID = OTP.BO_ID
  AND  C.COL_NO = L.COL_NO
  AND  TS.TS_ID = P.TS_ID
  AND  TS.TS_ID = VT_TS.TSNO(+)
  AND  P.SGMT_ID = S.SGMT_ID(+)
  AND  O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_LOB_PARTITIONS FOR USER_LOB_PARTITIONS;
GRANT SELECT ON USER_LOB_PARTITIONS TO PUBLIC;


CREATE OR REPLACE VIEW DBA_TBL_SUBPARTITIONS
(OWNER, TABLE_NAME, PARTITION_NAME, SUBPARTITION_NAME,
 BOUND, SUBPARTITION_NO, TABLESPACE_NAME,
 PCT_FREE, INI_TRANS, NEXT_EXTENT, MAX_EXTENTS, COMPRESSION, BUFFER_POOL,
 LOGGING, NUM_ROWS, LAST_ANALYZED)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME, OP.SUBNAME, O.SUBNAME,
           (SELECT BOUND_STR
            FROM SYS._DD_PARTITION_BOUND_STR D
            WHERE D.OBJ_ID=SP.OBJ_ID),
           SP.SUBPART_NO, TS.NAME,
           SP.PCTFREE, SP.INITRANS,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           S.MAX_EXTS,
           DECODE(BITAND(SP.FLAGS, 262144),
                         262144, 'YES', 'NO'),
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT'),
           DECODE(BITAND(T.FLAGS, 2), 0, 'YES', 'NO'),
           TRUNC(SP.ROW_CNT), SP.ANALYZETIME
    FROM SYS._DD_OBJ O, SYS._DD_TBLSUBPART SP, SYS._DD_TS TS, SYS._DD_USER U,
         SYS._DD_SGMT S, SYS._DD_OBJ OP, SYS._DD_TBL T, 
         SYS._VT_TABLESPACE VT_TS
    WHERE O.OBJ_ID = SP.OBJ_ID
      AND OP.OBJ_ID = SP.BO_ID
      AND TS.TS_ID = SP.TS_ID
      AND TS.TS_ID = VT_TS.TSNO(+)
      AND SP.SGMT_ID = S.SGMT_ID
      AND U.USER_ID = O.OWNER_ID
      AND T.OBJ_ID = (SELECT BO_ID FROM SYS._DD_TBLPART WHERE OBJ_ID = SP.BO_ID)
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TBL_SUBPARTITIONS FOR DBA_TBL_SUBPARTITIONS;
CREATE OR REPLACE PUBLIC SYNONYM DBA_TAB_SUBPARTITIONS FOR DBA_TBL_SUBPARTITIONS;

CREATE OR REPLACE VIEW ALL_TBL_SUBPARTITIONS
(OWNER, TABLE_NAME, PARTITION_NAME, SUBPARTITION_NAME,
 BOUND, SUBPARTITION_NO, TABLESPACE_NAME,
 PCT_FREE, INI_TRANS, NEXT_EXTENT, MAX_EXTENTS, COMPRESSION, BUFFER_POOL,
 MAX_TRANS, INITIAL_EXTENT, MIN_EXTENT, LOGGING, NUM_ROWS, LAST_ANALYZED)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME, OP.SUBNAME, O.SUBNAME,
           (SELECT BOUND_STR
            FROM SYS._DD_PARTITION_BOUND_STR D
            WHERE D.OBJ_ID=SP.OBJ_ID),
           SP.SUBPART_NO, TS.NAME,
           SP.PCTFREE, SP.INITRANS,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           S.MAX_EXTS,
           DECODE(BITAND(SP.FLAGS, 262144),
                         262144, 'YES', 'NO'),
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT'),
           LEAST(255,
           TRUNC((SELECT VALUE FROM VT_PARAMETER WHERE 
                  NAME='DB_BLOCK_SIZE')/50,0)),
           (TS.UNIT
            * (SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')),
           (8 
             * (SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')),
           DECODE(BITAND(T.FLAGS, 2), 0, 'YES', 'NO'),
           TRUNC(SP.ROW_CNT), SP.ANALYZETIME
    FROM SYS._DD_OBJ O, SYS._DD_TBLSUBPART SP, SYS._DD_TS TS, SYS._DD_USER U,
         SYS._DD_SGMT S, SYS._DD_OBJ OP, SYS._DD_TBL T,
         SYS._VT_TABLESPACE VT_TS
    WHERE O.OBJ_ID = SP.OBJ_ID
      AND OP.OBJ_ID = SP.BO_ID
      AND TS.TS_ID = SP.TS_ID
      AND TS.TS_ID = VT_TS.TSNO(+)
      AND SP.SGMT_ID = S.SGMT_ID
      AND U.USER_ID = O.OWNER_ID
      AND T.OBJ_ID = (SELECT BO_ID FROM SYS._DD_TBLPART WHERE OBJ_ID = SP.BO_ID)
      AND (
        (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1)
        OR
          
        (EXISTS (SELECT NULL
                 FROM   (SELECT SAU2.PRIV_NO
                         FROM   SYS._DD_SYSAUTH SAU2
                         START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                         CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                        ) SAU
                 WHERE (SAU.PRIV_NO    = -483
                         OR SAU.PRIV_NO = -482
                         OR SAU.PRIV_NO = -481
                         OR SAU.PRIV_NO = -480
                         OR SAU.PRIV_NO = -485
                         OR SAU.PRIV_NO = -473
                         OR SAU.PRIV_NO IN (
                               SELECT USER_ID FROM SYS._DD_USER
                               WHERE NAME = 'DBA')
                        )
                )
        )
        OR
          
        (OP.BO_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
        )
      )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TBL_SUBPARTITIONS FOR ALL_TBL_SUBPARTITIONS;
GRANT SELECT ON ALL_TBL_SUBPARTITIONS TO PUBLIC;
CREATE OR REPLACE PUBLIC SYNONYM ALL_TAB_SUBPARTITIONS FOR ALL_TBL_SUBPARTITIONS;
GRANT SELECT ON ALL_TAB_SUBPARTITIONS TO PUBLIC;

CREATE OR REPLACE VIEW USER_TBL_SUBPARTITIONS
(TABLE_NAME, PARTITION_NAME, SUBPARTITION_NAME,
 BOUND, SUBPARTITION_NO, TABLESPACE_NAME,
 PCT_FREE, INI_TRANS, NEXT_EXTENT, MAX_EXTENTS, COMPRESSION, BUFFER_POOL)
AS
    SELECT /*+ no_merge */ O.NAME, OP.SUBNAME, O.SUBNAME,
           (SELECT BOUND_STR
            FROM SYS._DD_PARTITION_BOUND_STR D
            WHERE D.OBJ_ID=SP.OBJ_ID),
           SP.SUBPART_NO, TS.NAME,
           SP.PCTFREE, SP.INITRANS,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           S.MAX_EXTS,
           DECODE(BITAND(SP.FLAGS, 262144),
                         262144, 'YES', 'NO'),
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT')
    FROM SYS._DD_OBJ O, SYS._DD_TBLSUBPART SP, SYS._DD_TS TS,
         SYS._DD_SGMT S, SYS._DD_OBJ OP, SYS._VT_TABLESPACE VT_TS
    WHERE O.OBJ_ID = SP.OBJ_ID
      AND OP.OBJ_ID = SP.BO_ID
      AND TS.TS_ID = SP.TS_ID
      AND TS.TS_ID = VT_TS.TSNO(+)
      AND SP.SGMT_ID = S.SGMT_ID
      AND O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TBL_SUBPARTITIONS FOR USER_TBL_SUBPARTITIONS;
GRANT SELECT ON USER_TBL_SUBPARTITIONS TO PUBLIC;
CREATE OR REPLACE PUBLIC SYNONYM USER_TAB_SUBPARTITIONS FOR USER_TBL_SUBPARTITIONS;
GRANT SELECT ON USER_TAB_SUBPARTITIONS TO PUBLIC;




CREATE OR REPLACE VIEW DBA_IDX_SUBPARTITIONS
(OWNER, INDEX_NAME, PARTITION_NAME, SUBPARTITION_NAME,
 BOUND, SUBPARTITION_NO, STATUS, TABLESPACE_NAME,
 PCT_FREE, INI_TRANS, NEXT_EXTENT, MAX_EXTENTS, BUFFER_POOL,
 LOGGING, NUM_ROWS, LAST_ANALYZED)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME, OP.SUBNAME, O.SUBNAME,
           (SELECT BOUND_STR
            FROM SYS._DD_PARTITION_BOUND_STR D
            WHERE D.OBJ_ID=SP.OBJ_ID),
           SP.SUBPART_NO,
           DECODE(BITAND(SP.FLAGS, 2),
                0, 'USABLE', 'UNUSABLE'),
           TS.NAME,
           SP.PCTFREE, SP.INITRANS,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           S.MAX_EXTS,
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT'),
           DECODE(BITAND(I.FLAGS, 2), 0, 'YES', 'NO'),
           TRUNC(SP.ROW_CNT), SP.ANALYZETIME
    FROM SYS._DD_OBJ O, SYS._DD_IDXSUBPART SP, SYS._DD_TS TS, SYS._DD_USER U,
         SYS._DD_SGMT S, SYS._DD_OBJ OP, SYS._DD_IDXPART IP, SYS._DD_IDX I,
         SYS._VT_TABLESPACE VT_TS
    WHERE O.OBJ_ID = SP.OBJ_ID
      AND TS.TS_ID = SP.TS_ID
      AND TS.TS_ID = VT_TS.TSNO(+)
      AND SP.SGMT_ID = S.SGMT_ID
      AND U.USER_ID = O.OWNER_ID
      AND SP.BO_ID = OP.OBJ_ID
      AND OP.OBJ_ID = IP.OBJ_ID
      AND IP.BO_ID = I.OBJ_ID
      AND I.TYPE_NO = 1
    ORDER BY I.OBJ_ID, IP.PART_NO, SP.SUBPART_NO
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_IDX_SUBPARTITIONS FOR DBA_IDX_SUBPARTITIONS;
CREATE OR REPLACE PUBLIC SYNONYM DBA_IND_SUBPARTITIONS FOR DBA_IDX_SUBPARTITIONS;

CREATE OR REPLACE VIEW ALL_IDX_SUBPARTITIONS
(OWNER, INDEX_NAME, PARTITION_NAME, SUBPARTITION_NAME,
 BOUND, SUBPARTITION_NO, STATUS, TABLESPACE_NAME,
 PCT_FREE, INI_TRANS, NEXT_EXTENT, MAX_EXTENTS, BUFFER_POOL,
 LOGGING, NUM_ROWS, LAST_ANALYZED)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME, OP.SUBNAME, O.SUBNAME,
           (SELECT BOUND_STR
            FROM SYS._DD_PARTITION_BOUND_STR D
            WHERE D.OBJ_ID=SP.OBJ_ID),
           SP.SUBPART_NO,
           DECODE(BITAND(SP.FLAGS, 2),
                0, 'USABLE', 'UNUSABLE'),
           TS.NAME,
           SP.PCTFREE, SP.INITRANS,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           S.MAX_EXTS,
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT'),
           DECODE(BITAND(I.FLAGS, 2), 0, 'YES', 'NO'),
           TRUNC(SP.ROW_CNT), SP.ANALYZETIME
    FROM SYS._DD_OBJ O, SYS._DD_IDXSUBPART SP, SYS._DD_TS TS, SYS._DD_USER U,
         SYS._DD_SGMT S, SYS._DD_OBJ OP, SYS._DD_IDXPART IP, SYS._DD_IDX I,
         SYS._VT_TABLESPACE VT_TS
    WHERE O.OBJ_ID = SP.OBJ_ID
      AND TS.TS_ID = SP.TS_ID
      AND TS.TS_ID = VT_TS.TSNO(+)
      AND SP.SGMT_ID = S.SGMT_ID
      AND U.USER_ID = O.OWNER_ID
      AND SP.BO_ID = OP.OBJ_ID
      AND OP.OBJ_ID = IP.OBJ_ID
      AND IP.BO_ID = I.OBJ_ID
      AND I.TYPE_NO = 1
      AND (
        (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1)
        OR
        (
          
          EXISTS (SELECT NULL
                  FROM   (SELECT SAU2.PRIV_NO
                          FROM   SYS._DD_SYSAUTH SAU2
                          START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                          CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                         ) SAU
                  WHERE (SAU.PRIV_NO    = -483
                          OR SAU.PRIV_NO = -482
                          OR SAU.PRIV_NO = -481
                          OR SAU.PRIV_NO = -480
                          OR SAU.PRIV_NO = -485
                          OR SAU.PRIV_NO = -473
                          OR SAU.PRIV_NO IN (
                                SELECT USER_ID FROM SYS._DD_USER
                                WHERE NAME = 'DBA')
                         )
                 )
        )
        OR
           
        (I.BO_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
        )
      )
    ORDER BY I.OBJ_ID, IP.PART_NO, SP.SUBPART_NO
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_IDX_SUBPARTITIONS FOR ALL_IDX_SUBPARTITIONS;
GRANT SELECT ON ALL_IDX_SUBPARTITIONS TO PUBLIC;
CREATE OR REPLACE PUBLIC SYNONYM ALL_IND_SUBPARTITIONS FOR ALL_IDX_SUBPARTITIONS;
GRANT SELECT ON ALL_IND_SUBPARTITIONS TO PUBLIC;

CREATE OR REPLACE VIEW USER_IDX_SUBPARTITIONS
(INDEX_NAME, PARTITION_NAME, SUBPARTITION_NAME,
 BOUND, SUBPARTITION_NO, STATUS, TABLESPACE_NAME,
 PCT_FREE, INI_TRANS, NEXT_EXTENT, MAX_EXTENTS, BUFFER_POOL)
AS
    SELECT /*+ no_merge */ O.NAME, OP.SUBNAME, O.SUBNAME,
           (SELECT BOUND_STR
            FROM SYS._DD_PARTITION_BOUND_STR D
            WHERE D.OBJ_ID=SP.OBJ_ID),
           SP.SUBPART_NO,
           DECODE(BITAND(SP.FLAGS, 2),
                0, 'USABLE', 'UNUSABLE'),
           TS.NAME,
           SP.PCTFREE, SP.INITRANS,
           TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                            DECODE(S.SHDRDBA, 0, NULL,
                                   SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                            S.NEXT_EXT * VT_TS.BLKSIZE)),
           S.MAX_EXTS,
           DECODE(S.BUFPOOL, 1, 'KEEP',
                             2, 'RECYCLE', 'DEFAULT')
    FROM SYS._DD_OBJ O, SYS._DD_IDXSUBPART SP, SYS._DD_TS TS,
         SYS._DD_SGMT S, SYS._DD_OBJ OP, SYS._DD_IDXPART IP, SYS._DD_IDX I,
         SYS._VT_TABLESPACE VT_TS
    WHERE O.OBJ_ID = SP.OBJ_ID
      AND TS.TS_ID = SP.TS_ID
      AND TS.TS_ID = VT_TS.TSNO(+)
      AND SP.SGMT_ID = S.SGMT_ID
      AND SP.BO_ID = OP.OBJ_ID
      AND OP.OBJ_ID = IP.OBJ_ID
      AND IP.BO_ID = I.OBJ_ID
      AND I.TYPE_NO = 1
      AND O.OWNER_ID = USERENV('SCHEMAID')
    ORDER BY I.OBJ_ID, IP.PART_NO, SP.SUBPART_NO
;

CREATE OR REPLACE PUBLIC SYNONYM USER_IDX_SUBPARTITIONS FOR USER_IDX_SUBPARTITIONS;
GRANT SELECT ON USER_IDX_SUBPARTITIONS TO PUBLIC;
CREATE OR REPLACE public synonym USER_IND_SUBPARTITIONS FOR USER_IDX_SUBPARTITIONS;
GRANT SELECT ON USER_IND_SUBPARTITIONS TO PUBLIC;


CREATE OR REPLACE VIEW DBA_LOB_SUBPARTITIONS
(OWNER, TABLE_NAME, COLUMN_NAME, PARTITION_NAME, LOB_NAME, LOB_PARTITION_NAME,
 SUBPARTITION_NAME, LOB_SUBPARTITION_NAME, LOB_INDSUBPART_NAME, SUBPARTITION_NO,
 IN_ROW, TABLESPACE_NAME, NEXT_EXTENT, MAX_EXTENTS, BUFFER_POOL)
AS
SELECT /*+ no_merge */ U.NAME, OTSP.NAME, C.NAME, OTP.SUBNAME, O.NAME, OLP.SUBNAME,
       OTSP.SUBNAME, O.SUBNAME, OISP.SUBNAME, SP.SUBPART_NO,
       DECODE(BITAND(SP.FLAGS, 1),
              1, 'YES', 'NO'),
       TS.NAME,
       TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                        DECODE(S.SHDRDBA, 0, NULL,
                               SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                        S.NEXT_EXT * VT_TS.BLKSIZE)),
       S.MAX_EXTS,
       DECODE(S.BUFPOOL, 1, 'KEEP',
                         2, 'RECYCLE', 'DEFAULT')
FROM   SYS._DD_OBJ O, SYS._DD_OBJ OTSP, SYS._DD_OBJ OISP,
       SYS._DD_OBJ OLP, SYS._DD_OBJ OTP,
       SYS._DD_LOBSUBPART SP, SYS._DD_LOB L, SYS._DD_COL C,
       SYS._DD_TS TS, SYS._DD_USER U, SYS._DD_SGMT S,
       SYS._VT_TABLESPACE VT_TS
WHERE  SP.SUBPART_OBJ_ID = O.OBJ_ID
  AND  SP.TBLPART_OBJ_ID = OTSP.OBJ_ID
  AND  SP.IDXPART_OBJ_ID = OISP.OBJ_ID
  AND  SP.PARENTOBJ_ID = OLP.OBJ_ID
  AND  OTP.OBJ_ID = OTSP.BO_ID
  AND  L.OBJ_ID = OLP.BO_ID
  AND  C.OBJ_ID = OTP.BO_ID
  AND  C.COL_NO = L.COL_NO
  AND  TS.TS_ID = SP.TS_ID
  AND  TS.TS_ID = VT_TS.TSNO(+)
  AND  SP.SGMT_ID = S.SGMT_ID
  AND  U.USER_ID = O.OWNER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_LOB_SUBPARTITIONS FOR DBA_LOB_SUBPARTITIONS;

CREATE OR REPLACE VIEW ALL_LOB_SUBPARTITIONS
(OWNER, TABLE_NAME, COLUMN_NAME, PARTITION_NAME, LOB_NAME, LOB_PARTITION_NAME,
 SUBPARTITION_NAME, LOB_SUBPARTITION_NAME, LOB_INDSUBPART_NAME, SUBPARTITION_NO,
 IN_ROW, TABLESPACE_NAME, NEXT_EXTENT, MAX_EXTENTS, BUFFER_POOL)
AS
SELECT /*+ no_merge */ U.NAME, OTSP.NAME, C.NAME, OTP.SUBNAME, O.NAME, OLP.SUBNAME,
       OTSP.SUBNAME, O.SUBNAME, OISP.SUBNAME, SP.SUBPART_NO,
       DECODE(BITAND(SP.FLAGS, 1),
              1, 'YES', 'NO'),
       TS.NAME,
       TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                        DECODE(S.SHDRDBA, 0, NULL,
                               SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                        S.NEXT_EXT * VT_TS.BLKSIZE)),
       S.MAX_EXTS,
       DECODE(S.BUFPOOL, 1, 'KEEP',
                         2, 'RECYCLE', 'DEFAULT')
FROM   SYS._DD_OBJ O, SYS._DD_OBJ OTSP, SYS._DD_OBJ OISP,
       SYS._DD_OBJ OLP, SYS._DD_OBJ OTP,
       SYS._DD_LOBSUBPART SP, SYS._DD_LOB L, SYS._DD_COL C,
       SYS._DD_TS TS, SYS._DD_USER U, SYS._DD_SGMT S,
       SYS._VT_TABLESPACE VT_TS
WHERE  SP.SUBPART_OBJ_ID = O.OBJ_ID
  AND  SP.TBLPART_OBJ_ID = OTSP.OBJ_ID
  AND  SP.IDXPART_OBJ_ID = OISP.OBJ_ID
  AND  SP.PARENTOBJ_ID = OLP.OBJ_ID
  AND  OTP.OBJ_ID = OTSP.BO_ID
  AND  L.OBJ_ID = OLP.BO_ID
  AND  C.OBJ_ID = OTP.BO_ID
  AND  C.COL_NO = L.COL_NO
  AND  TS.TS_ID = SP.TS_ID
  AND  TS.TS_ID = VT_TS.TSNO(+)
  AND  SP.SGMT_ID = S.SGMT_ID
  AND  U.USER_ID = O.OWNER_ID
  AND  (
        (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1)
        OR
        (
          
          EXISTS (SELECT NULL
                  FROM   (SELECT SAU2.PRIV_NO
                          FROM   SYS._DD_SYSAUTH SAU2
                          START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                          CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                         ) SAU
                  WHERE (SAU.PRIV_NO    = -483
                          OR SAU.PRIV_NO = -482
                          OR SAU.PRIV_NO = -481
                          OR SAU.PRIV_NO = -480
                          OR SAU.PRIV_NO = -485
                          OR SAU.PRIV_NO = -473
                          OR SAU.PRIV_NO IN (
                                SELECT USER_ID FROM SYS._DD_USER
                                WHERE NAME = 'DBA')
                         )
                 )
        )
        OR
           
        (OTP.BO_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
        )
       )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_LOB_SUBPARTITIONS FOR ALL_LOB_SUBPARTITIONS;
GRANT SELECT ON ALL_LOB_SUBPARTITIONS TO PUBLIC;

CREATE OR REPLACE VIEW USER_LOB_SUBPARTITIONS
(TABLE_NAME, COLUMN_NAME, PARTITION_NAME, LOB_NAME, LOB_PARTITION_NAME,
 SUBPARTITION_NAME, LOB_SUBPARTITION_NAME, LOB_INDSUBPART_NAME, SUBPARTITION_NO,
 IN_ROW, TABLESPACE_NAME, NEXT_EXTENT, MAX_EXTENTS, BUFFER_POOL)
AS
SELECT /*+ no_merge */ OTSP.NAME, C.NAME, OTP.SUBNAME, O.NAME, OLP.SUBNAME,
       OTSP.SUBNAME, O.SUBNAME, OISP.SUBNAME, SP.SUBPART_NO,
       DECODE(BITAND(SP.FLAGS, 1),
              1, 'YES', 'NO'),
       TS.NAME,
       TO_NUMBER(DECODE(S.NEXT_EXT, 0,
                        DECODE(S.SHDRDBA, 0, NULL,
                               SYS_OP_NEXT_EXTENT(S.TS_ID, S.SHDRDBA)),
                        S.NEXT_EXT * VT_TS.BLKSIZE)),
       S.MAX_EXTS,
       DECODE(S.BUFPOOL, 1, 'KEEP',
                         2, 'RECYCLE', 'DEFAULT')
FROM   SYS._DD_OBJ O, SYS._DD_OBJ OTSP, SYS._DD_OBJ OISP,
       SYS._DD_OBJ OLP, SYS._DD_OBJ OTP,
       SYS._DD_LOBSUBPART SP, SYS._DD_LOB L, SYS._DD_COL C,
       SYS._DD_TS TS, SYS._DD_SGMT S, SYS._VT_TABLESPACE VT_TS
WHERE  SP.SUBPART_OBJ_ID = O.OBJ_ID
  AND  SP.TBLPART_OBJ_ID = OTSP.OBJ_ID
  AND  SP.IDXPART_OBJ_ID = OISP.OBJ_ID
  AND  SP.PARENTOBJ_ID = OLP.OBJ_ID
  AND  OTP.OBJ_ID = OTSP.BO_ID
  AND  L.OBJ_ID = OLP.BO_ID 
  AND  C.OBJ_ID = OTP.BO_ID
  AND  C.COL_NO = L.COL_NO
  AND  TS.TS_ID = SP.TS_ID
  AND  TS.TS_ID = VT_TS.TSNO(+)
  AND  SP.SGMT_ID = S.SGMT_ID
  AND  O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_LOB_SUBPARTITIONS FOR USER_LOB_SUBPARTITIONS;
GRANT SELECT ON USER_LOB_SUBPARTITIONS TO PUBLIC;



CREATE OR REPLACE VIEW DBA_VIEWS
(OWNER, VIEW_NAME, TEXT)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME, V.TEXT
    FROM SYS._DD_OBJ O, SYS._DD_VIEW V, SYS._DD_USER U
    WHERE O.OBJ_ID = V.OBJ_ID
      AND O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_VIEWS FOR DBA_VIEWS;

CREATE OR REPLACE VIEW ALL_VIEWS_INTERNAL
(OWNER, VIEW_NAME, OBJ_ID)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME, V.OBJ_ID
    FROM   SYS._DD_OBJ O, SYS._DD_VIEW V, SYS._DD_USER U
    WHERE  O.OBJ_ID = V.OBJ_ID
      AND  O.OWNER_ID = U.USER_ID
      AND  (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1)

    UNION

    SELECT U.NAME, O.NAME, V.OBJ_ID
    FROM   SYS._DD_OBJ O, SYS._DD_VIEW V, SYS._DD_USER U
    WHERE  O.OBJ_ID = V.OBJ_ID
      AND  O.OWNER_ID = U.USER_ID
           
      AND  EXISTS (SELECT NULL
                   FROM   (SELECT SAU2.PRIV_NO
                           FROM   SYS._DD_SYSAUTH SAU2
                           START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                           CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                          ) SAU
                   WHERE (SAU.PRIV_NO    = -483
                           OR SAU.PRIV_NO = -482
                           OR SAU.PRIV_NO = -481
                           OR SAU.PRIV_NO = -480
                           OR SAU.PRIV_NO = -485
                           OR SAU.PRIV_NO = -473
                           OR SAU.PRIV_NO IN (
                                 SELECT USER_ID FROM SYS._DD_USER
                                 WHERE NAME = 'DBA')
                          )
                  )

    UNION

    SELECT U.NAME, O.NAME, V.OBJ_ID
    FROM   SYS._DD_OBJ O, SYS._DD_VIEW V, SYS._DD_USER U
    WHERE  O.OBJ_ID = V.OBJ_ID
      AND  O.OWNER_ID = U.USER_ID
           
      AND  V.OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_VIEWS_INTERNAL FOR ALL_VIEWS_INTERNAL;
GRANT SELECT ON ALL_VIEWS_INTERNAL TO PUBLIC;


CREATE OR REPLACE VIEW ALL_VIEWS
(OWNER, VIEW_NAME, TEXT)
AS
    SELECT /*+ no_merge */ A.OWNER, O.NAME, V.TEXT
    FROM ALL_VIEWS_INTERNAL A, SYS._DD_VIEW V, SYS._DD_OBJ O
    WHERE A.OBJ_ID = V.OBJ_ID AND V.OBJ_ID = O.OBJ_ID
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_VIEWS FOR ALL_VIEWS;
GRANT SELECT ON ALL_VIEWS TO PUBLIC;

CREATE OR REPLACE VIEW USER_VIEWS
(VIEW_NAME, TEXT)
AS
    SELECT /*+ no_merge */ O.NAME, V.TEXT
    FROM SYS._DD_OBJ O, SYS._DD_VIEW V
    WHERE O.OBJ_ID = V.OBJ_ID
      AND O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_VIEWS FOR USER_VIEWS;
GRANT SELECT ON USER_VIEWS TO PUBLIC;

-- SYNONYMS

CREATE OR REPLACE VIEW SYNONYMS
(SYN_NAME, SYN_TYPE, OBJ_OWNER, OBJ_NAME, OBJ_TYPE)
AS
    SELECT /*+ no_merge */ S.NAME,
             DECODE(S.OWNER_ID,
                    1,'PUBLIC','PRIVATE'),
             T.REF_OWNER, T.REF_NAME,
             DECODE(OT.TYPE_NO,
                    0, 'INDEX',
                    1, 'TABLE',
                    2, 'VIEW',
                    3, 'SYNONYM',
                    4, 'SEQUENCE',
                    5, 'PROCEDURE',
                    6, 'FUNCTION',
                    7, 'PACKAGE',
                    8, 'PACKAGE BODY',
                    9, 'TRIGGER',
                    10, 'TABLE PARTITION',
                    11, 'INDEX PARTITION',
                    12, 'LOB',
                    13, 'LOB PARTITION',
                    14, 'TABLE SUBPARTITION',
                    15, 'INDEX SUBPARTITION',
                    16, 'LOB SUBPARTITION',
                    17, 'REPLICATION',
                    18, 'DIRECTORY',
                    19, 'LIBRARY',
                    20, 'MATERIALIZED VIEW',
                    21, 'JAVA',
                    22, 'TYPE',
                    23, 'TYPE BODY',
                    24, 'SQL TRANSLATION PROFILE',
                    'UNDEFINED')
    FROM SYS._DD_OBJ S, SYS._DD_OBJ OT, SYS._DD_SYN T, SYS._DD_USER U
    WHERE S.OBJ_ID = T.OBJ_ID
      AND S.TYPE_NO = 3
      AND OT.NAME = T.REF_NAME
      AND T.REF_OWNER = U.NAME
      AND OT.OWNER_ID = U.USER_ID
      AND S.OWNER_ID IN (1, USERENV('SCHEMAID'))
;

CREATE OR REPLACE PUBLIC SYNONYM SYNONYMS FOR SYNONYMS;
-- GRANT SELECT ON SYNONYMS TO PUBLIC;



CREATE OR REPLACE VIEW PUBLICSYN
AS
    SELECT /*+ no_merge */ SYN_NAME, OBJ_OWNER, OBJ_NAME, OBJ_TYPE
    FROM SYNONYMS
    WHERE SYN_TYPE = 'PUBLIC'
;

CREATE OR REPLACE PUBLIC SYNONYM PUBLICSYN FOR PUBLICSYN;
-- GRANT SELECT ON PUBLICSYN TO PUBLIC;



CREATE OR REPLACE VIEW DBA_UPDATABLE_COLUMNS
(OWNER, TABLE_NAME, COLUMN_NAME, UPDATABLE, INSERTABLE, DELETABLE)
AS
    SELECT /*+ no_merge */
        U.NAME, O.NAME, C.NAME,
            DECODE(BITAND(C.PROPERTY, 4096),
                0, 'YES', 'NO'),
            DECODE(BITAND(C.PROPERTY, 2048),
                0, 'YES', 'NO'),
            DECODE(BITAND(C.PROPERTY, 8192),
                0, 'YES', 'NO')
    FROM SYS._DD_OBJ O, SYS._DD_TBL T, SYS._DD_COL C, SYS._DD_USER U
    WHERE U.USER_ID = O.OWNER_ID
      AND O.OBJ_ID = T.OBJ_ID
      AND T.OBJ_ID = C.OBJ_ID

UNION

    SELECT
        U.NAME, O.NAME, C.NAME,
        DECODE(BITAND(C.PROPERTY, 4096), 0, 'YES',
               DECODE(BITAND(V.FLAGS, 8192),
                      0, 'NO', 'YES')),
        DECODE(BITAND(C.PROPERTY, 2048), 0, 'YES',
               DECODE(BITAND(V.FLAGS, 4096),
                      0, 'NO', 'YES')),
        DECODE(BITAND(C.PROPERTY, 8192), 0, 'YES',
               DECODE(BITAND(V.FLAGS, 16384),
                      0, 'NO', 'YES'))
    FROM SYS._DD_OBJ O, SYS._DD_VIEW V, SYS._DD_COL C, SYS._DD_USER U
    WHERE U.USER_ID = O.OWNER_ID
      AND O.OBJ_ID = V.OBJ_ID
      AND V.OBJ_ID = C.OBJ_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_UPDATABLE_COLUMNS FOR DBA_UPDATABLE_COLUMNS;

CREATE OR REPLACE VIEW ALL_UPDATABLE_COLUMNS
(OWNER, TABLE_NAME, COLUMN_NAME, UPDATABLE, INSERTABLE, DELETABLE)
AS
    SELECT /*+ no_merge */
        U.NAME, O.NAME, C.NAME,
            DECODE(BITAND(C.PROPERTY, 4096),
                0, 'YES', 'NO'),
            DECODE(BITAND(C.PROPERTY, 2048),
                0, 'YES', 'NO'),
            DECODE(BITAND(C.PROPERTY, 8192),
                0, 'YES', 'NO')
    FROM SYS._DD_OBJ O, SYS._DD_TBL T, SYS._DD_USER U, SYS._DD_COL C
    WHERE U.USER_ID = O.OWNER_ID
      AND O.OBJ_ID = T.OBJ_ID
      AND T.OBJ_ID = C.OBJ_ID
      AND (
        O.OWNER_ID = USERENV('SCHEMAID')
        OR  O.OWNER_ID = 1
        OR  EXISTS (SELECT NULL
                    FROM   (SELECT SAU2.PRIV_NO
                            FROM   SYS._DD_SYSAUTH SAU2
                            START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                            CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                           ) SAU
                    WHERE (SAU.PRIV_NO    = -483
                            OR SAU.PRIV_NO = -482
                            OR SAU.PRIV_NO = -481
                            OR SAU.PRIV_NO = -480
                            OR SAU.PRIV_NO = -485
                            OR SAU.PRIV_NO = -473
                            OR SAU.PRIV_NO IN (
                                  SELECT USER_ID FROM SYS._DD_USER
                                  WHERE NAME = 'DBA')
                           )
                   )
        OR  O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
        )

UNION

    SELECT
        U.NAME, O.NAME, C.NAME,
        DECODE(BITAND(C.PROPERTY, 4096), 0, 'YES',
               DECODE(BITAND(V.FLAGS, 8192),
                      0, 'NO', 'YES')),
        DECODE(BITAND(C.PROPERTY, 2048), 0, 'YES',
               DECODE(BITAND(V.FLAGS, 4096),
                      0, 'NO', 'YES')),
        DECODE(BITAND(C.PROPERTY, 8192), 0, 'YES',
               DECODE(BITAND(V.FLAGS, 16384),
                      0, 'NO', 'YES'))
    FROM SYS._DD_OBJ O, SYS._DD_VIEW V, SYS._DD_COL C, SYS._DD_USER U
    WHERE U.USER_ID = O.OWNER_ID
      AND O.OBJ_ID = V.OBJ_ID
      AND V.OBJ_ID = C.OBJ_ID
      AND (
        O.OWNER_ID = USERENV('SCHEMAID')
        OR  O.OWNER_ID = 1
        OR  EXISTS (SELECT NULL
                    FROM   (SELECT SAU2.PRIV_NO
                            FROM   SYS._DD_SYSAUTH SAU2
                            START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                            CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                           ) SAU
                    WHERE (SAU.PRIV_NO    = -483
                            OR SAU.PRIV_NO = -482
                            OR SAU.PRIV_NO = -481
                            OR SAU.PRIV_NO = -480
                            OR SAU.PRIV_NO = -485
                            OR SAU.PRIV_NO = -473
                            OR SAU.PRIV_NO IN (
                                  SELECT USER_ID FROM SYS._DD_USER
                                  WHERE NAME = 'DBA')
                           )
                   )
        OR  O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
        )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_UPDATABLE_COLUMNS FOR ALL_UPDATABLE_COLUMNS;
GRANT SELECT ON ALL_UPDATABLE_COLUMNS TO PUBLIC;

CREATE OR REPLACE VIEW USER_UPDATABLE_COLUMNS
(TABLE_NAME, COLUMN_NAME, UPDATABLE, INSERTABLE, DELETABLE)
AS
    SELECT /*+ no_merge */ O.NAME, C.NAME,
            DECODE(BITAND(C.PROPERTY, 4096),
                0, 'YES', 'NO'),
            DECODE(BITAND(C.PROPERTY, 2048),
                0, 'YES', 'NO'),
            DECODE(BITAND(C.PROPERTY, 8192),
                0, 'YES', 'NO')
    FROM SYS._DD_OBJ O, SYS._DD_TBL T, SYS._DD_USER U, SYS._DD_COL C
    WHERE U.USER_ID = O.OWNER_ID
      AND O.OBJ_ID = T.OBJ_ID
      AND T.OBJ_ID = C.OBJ_ID
      AND U.USER_ID = USERENV('SCHEMAID')

UNION

    SELECT
        O.NAME, C.NAME,
        DECODE(BITAND(C.PROPERTY, 4096), 0, 'YES',
               DECODE(BITAND(V.FLAGS, 8192),
                      0, 'NO', 'YES')),
        DECODE(BITAND(C.PROPERTY, 2048), 0, 'YES',
               DECODE(BITAND(V.FLAGS, 4096),
                      0, 'NO', 'YES')),
        DECODE(BITAND(C.PROPERTY, 8192), 0, 'YES',
               DECODE(BITAND(V.FLAGS, 16384),
                      0, 'NO', 'YES'))
    FROM SYS._DD_OBJ O, SYS._DD_VIEW V, SYS._DD_COL C, SYS._DD_USER U
    WHERE U.USER_ID = O.OWNER_ID
      AND O.OBJ_ID = V.OBJ_ID
      AND V.OBJ_ID = C.OBJ_ID
      AND U.USER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_UPDATABLE_COLUMNS FOR USER_UPDATABLE_COLUMNS;
GRANT SELECT ON USER_UPDATABLE_COLUMNS TO PUBLIC;



CREATE OR REPLACE VIEW DBA_ERRORS
(OWNER, NAME, TYPE, SEQUENCE, LINE, POSITION, TEXT, ATTRIBUTE, MESSAGE_NUMBER)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME,
       DECODE(O.TYPE_NO,
              2, 'VIEW',
              5, 'PROCEDURE',
              6, 'FUNCTION',
              7, 'PACKAGE',
              8, 'PACKAGE BODY',
              22, 'TYPE',
              23, 'TYPE BODY',
              9, 'TRIGGER',
              19, 'LIBRARY',
              21, 'JAVA',
              'UNDEFINED'),
       E.SERIAL_NO, E.LINE, E.POS, E.TEXT,
       DECODE(E.PROPERTY,
              0, 'ERROR',
              1, 'WARNING',
              'UNDEFINED'),
       E.ERR_NO
FROM SYS._DD_OBJ O, SYS._DD_ERR E, SYS._DD_USER U
WHERE O.OBJ_ID = E.OBJ_ID
  AND O.TYPE_NO IN (2,
                    5,
                    6,
                    7,
                    8,
                    22,
                    23,
                    9,
                    19,
                    21)
  AND O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_ERRORS FOR DBA_ERRORS;

CREATE OR REPLACE VIEW ALL_ERRORS
(OWNER, NAME, TYPE, SEQUENCE, LINE, POSITION, TEXT, ATTRIBUTE, MESSAGE_NUMBER)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME,
       DECODE(O.TYPE_NO,
              2, 'VIEW',
              5, 'PROCEDURE',
              6, 'FUNCTION',
              7, 'PACKAGE',
              8, 'PACKAGE BODY',
              9, 'TRIGGER',
              22, 'TYPE',
              23, 'TYPE BODY',
              19, 'LIBRARY',
              21, 'JAVA',
              'UNDEFINED'),
       E.SERIAL_NO, E.LINE, E.POS, E.TEXT,
       DECODE(E.PROPERTY,
              0, 'ERROR',
              1, 'WARNING',
              'UNDEFINED'),
       E.ERR_NO
FROM SYS._DD_OBJ O, SYS._DD_ERR E, SYS._DD_USER U
WHERE O.OBJ_ID = E.OBJ_ID
  AND O.TYPE_NO IN (2,
                    5,
                    6,
                    7,
                    8,
                    9,
                    22,
                    23,
                    19,
                    21)
  AND O.OWNER_ID = U.USER_ID
  AND
  (
    (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1)
    
    OR (O.TYPE_NO = 2
        AND EXISTS (SELECT NULL
                    FROM   (SELECT SAU2.PRIV_NO
                            FROM   SYS._DD_SYSAUTH SAU2
                            START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                            CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                           ) SAU
                    WHERE (SAU.PRIV_NO    = -483
                            OR SAU.PRIV_NO = -482
                            OR SAU.PRIV_NO = -481
                            OR SAU.PRIV_NO = -480
                            OR SAU.PRIV_NO = -485
                            OR SAU.PRIV_NO = -473
                            OR SAU.PRIV_NO IN (
                                  SELECT USER_ID FROM SYS._DD_USER
                                  WHERE NAME = 'DBA')
                           )
                   )
         )
    OR (O.TYPE_NO IN (5,
                      6,
                      7,
                      21)
        AND EXISTS (
            SELECT NULL
            FROM   SYS._DD_SYSAUTH
            WHERE  GRANTEE_ID = USERENV('SCHEMAID')
              AND  (PRIV_NO = -449
                    OR PRIV_NO = -452
                    OR PRIV_NO = -451)
            )
       )
    OR (O.TYPE_NO = 9
        AND EXISTS (
              SELECT NULL
              FROM   SYS._DD_SYSAUTH
              WHERE  GRANTEE_ID = USERENV('SCHEMAID')
                AND  (PRIV_NO = -447
                      OR PRIV_NO = -446)
              )
         )
    OR (O.TYPE_NO = 8
        AND EXISTS (
              SELECT NULL
              FROM   SYS._DD_SYSAUTH
              WHERE  GRANTEE_ID = USERENV('SCHEMAID')
                AND  (PRIV_NO = -452
                      OR PRIV_NO = -451)
              )
         )
    OR (O.TYPE_NO = 22
        AND EXISTS (
              SELECT NULL
              FROM   SYS._DD_SYSAUTH
              WHERE  GRANTEE_ID = USERENV('SCHEMAID')
                AND  (PRIV_NO = -424
                      OR PRIV_NO = -422)
              )
         )
    OR
        EXISTS (
          SELECT NULL
          FROM   SYS._DD_SYSAUTH
          WHERE  GRANTEE_ID = USERENV('SCHEMAID')
            AND  (PRIV_NO = -473
                  OR PRIV_NO IN (
                        SELECT USER_ID FROM SYS._DD_USER
                        WHERE NAME = 'DBA')
                 )
          )
    
    OR (O.OBJ_ID IN (
         SELECT OBJ_ID
         FROM SYS._DD_OBJAUTH
         WHERE GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
       )
    )
  )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_ERRORS FOR ALL_ERRORS;
GRANT SELECT ON ALL_ERRORS TO PUBLIC;

CREATE OR REPLACE VIEW USER_ERRORS
(NAME, TYPE, SEQUENCE, LINE, POSITION, TEXT, ATTRIBUTE, MESSAGE_NUMBER)
AS
SELECT /*+ no_merge */ O.NAME,
       DECODE(O.TYPE_NO,
              2, 'VIEW',
              5, 'PROCEDURE',
              6, 'FUNCTION',
              7, 'PACKAGE',
              8, 'PACKAGE BODY',
              22, 'TYPE',
              23, 'TYPE BODY',
              9, 'TRIGGER',
              19, 'LIBRARY',
              21, 'JAVA',
              'UNDEFINED'),
       E.SERIAL_NO, E.LINE, E.POS, E.TEXT,
       DECODE(E.PROPERTY,
              0, 'ERROR',
              1, 'WARNING',
              'UNDEFINED'),
       E.ERR_NO
FROM SYS._DD_OBJ O, SYS._DD_ERR E
WHERE O.OBJ_ID = E.OBJ_ID
  AND O.TYPE_NO IN (2,
                    5,
                    6,
                    7,
                    8,
                    22,
                    23,
                    9,
                    19,
                    21)
  AND O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_ERRORS FOR USER_ERRORS;
GRANT SELECT ON USER_ERRORS TO PUBLIC;




CREATE OR REPLACE VIEW "_SV_DEPENDENCIES"
  (OWNER, NAME, TYPE, PARENT_OBJ_OWNER, PARENT_OBJ_NAME, PARENT_OBJ_TYPE,
   
   OWNER_ID, OBJ_ID, TYPE_NO)
AS
SELECT /*+ no_merge */ CU.NAME, DEP.NAME,
       DECODE(DEP.TYPE_NO,
              0, 'INDEX',
              1, 'TABLE',
              2, 'VIEW',
              3, 'SYNONYM',
              4, 'SEQUENCE',
              5, 'PROCEDURE',
              6, 'FUNCTION',
              7, 'PACKAGE',
              8, 'PACKAGE BODY',
              9, 'TRIGGER',
              18, 'DIRECTORY',
              19, 'LIBRARY',
              20, 'MATERIALIZED VIEW',
              21, 'JAVA',
              22, 'TYPE',
              23, 'TYPE BODY',
              25, 'OPERATOR',
              26, 'INDEXTYPE',
              'UNDEFINED'),
       PU.NAME, DEP.PO_NAME,
       DECODE(DEP.PO_TYPE_NO,
              0, 'INDEX',
              1, 'TABLE',
              2, 'VIEW',
              3, 'SYNONYM',
              4, 'SEQUENCE',
              5, 'PROCEDURE',
              6, 'FUNCTION',
              7, 'PACKAGE',
              8, 'PACKAGE BODY',
              9, 'TRIGGER',
              18, 'DIRECTORY',
              19, 'LIBRARY',
              20, 'MATERIALIZED VIEW',
              21, 'JAVA',
              22, 'TYPE',
              23, 'TYPE BODY',
              25, 'OPERATOR',
              26, 'INDEXTYPE',
              'UNDEFINED'),
       
       DEP.OWNER_ID, DEP.OBJ_ID, DEP.TYPE_NO
FROM   SYS._DD_USER CU, SYS._DD_USER PU,
       (SELECT PO.NAME AS PO_NAME,
               PO.OWNER_ID AS PO_OWNER_ID,
               PO.TYPE_NO AS PO_TYPE_NO,
               CO_D.NAME, CO_D.OWNER_ID, CO_D.TYPE_NO, CO_D.OBJ_ID
        FROM   SYSCAT._SV_OBJ PO,
               (SELECT CO.NAME, CO.OWNER_ID, CO.TYPE_NO, D.PARENT_OBJ_ID,
                       CO.OBJ_ID
                FROM   SYSCAT._SV_OBJ CO, SYS._DD_DEP D
                WHERE  CO.OBJ_ID = D.CHILD_OBJ_ID
               ) CO_D
        WHERE  PO.OBJ_ID = CO_D.PARENT_OBJ_ID
       ) DEP
WHERE  DEP.OWNER_ID = CU.USER_ID
  AND  DEP.PO_OWNER_ID = PU.USER_ID
;

CREATE OR REPLACE VIEW DBA_DEPENDENCIES
AS
    SELECT /*+ no_merge */
        OWNER, NAME, TYPE, PARENT_OBJ_OWNER, PARENT_OBJ_NAME, PARENT_OBJ_TYPE
    FROM SYSCAT._SV_DEPENDENCIES
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_DEPENDENCIES FOR DBA_DEPENDENCIES;

CREATE OR REPLACE VIEW ALL_DEPENDENCIES
AS
    SELECT /*+ no_merge */
        OWNER, NAME, TYPE, PARENT_OBJ_OWNER, PARENT_OBJ_NAME, PARENT_OBJ_TYPE
    FROM SYSCAT._SV_DEPENDENCIES
    WHERE OWNER_ID = USERENV('SCHEMAID') OR OWNER_ID = 1
       
    OR  ((TYPE_NO IN (0,
                       1,
                       -999,
                       2,
                       12)
         AND EXISTS (SELECT NULL
                     FROM   (SELECT SAU2.PRIV_NO
                             FROM   SYS._DD_SYSAUTH SAU2
                             START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                             CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                            ) SAU
                     WHERE (SAU.PRIV_NO    = -483
                             OR SAU.PRIV_NO = -482
                             OR SAU.PRIV_NO = -481
                             OR SAU.PRIV_NO = -480
                             OR SAU.PRIV_NO = -485
                             OR SAU.PRIV_NO = -473
                             OR SAU.PRIV_NO IN (
                                   SELECT USER_ID FROM SYS._DD_USER
                                   WHERE NAME = 'DBA')
                            )
                    )
        )
        OR
        (TYPE_NO IN (4)
         AND EXISTS (
             SELECT NULL
             FROM   SYS._DD_SYSAUTH
             WHERE  GRANTEE_ID = USERENV('SCHEMAID')
               AND  PRIV_NO = -459
             )
        )
        OR
        (TYPE_NO IN (5,
                       6,
                       7,
                       8,
                       9)
         AND EXISTS (
             SELECT NULL
             FROM   SYS._DD_SYSAUTH
             WHERE  GRANTEE_ID = USERENV('SCHEMAID')
               AND  PRIV_NO = -449
             )
        )
        OR
             EXISTS (
               SELECT NULL
               FROM   SYS._DD_SYSAUTH
               WHERE  GRANTEE_ID = USERENV('SCHEMAID')
                 AND  (PRIV_NO = -473
                       OR PRIV_NO IN (
                             SELECT USER_ID FROM SYS._DD_USER
                             WHERE NAME = 'DBA')
                      )
             )
       )
       
   OR  OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_DEPENDENCIES FOR ALL_DEPENDENCIES;
GRANT SELECT ON ALL_DEPENDENCIES TO PUBLIC;

CREATE OR REPLACE VIEW USER_DEPENDENCIES
AS
    SELECT /*+ no_merge */
        NAME, TYPE, PARENT_OBJ_OWNER, PARENT_OBJ_NAME, PARENT_OBJ_TYPE
    FROM SYSCAT._SV_DEPENDENCIES
    WHERE OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_DEPENDENCIES FOR USER_DEPENDENCIES;
GRANT SELECT ON USER_DEPENDENCIES TO PUBLIC;




CREATE OR REPLACE VIEW "_SV_SOURCE"
(OWNER, NAME, TYPE, LINE, TEXT,
 
 OWNER_ID, OBJ_ID)
AS
SELECT /*+ no_merge */  U.NAME, O.NAME,
        DECODE(O.TYPE_NO,
               5, 'PROCEDURE',
               6, 'FUNCTION',
               7, 'PACKAGE',
               8, 'PACKAGE BODY',
               9, 'TRIGGER',
               22, 'TYPE',
               23, 'TYPE BODY',
               'UNDEFINED'),
        S.LINE_NO, S.SRC,
        
        O.OWNER_ID, O.OBJ_ID
FROM    SYS._DD_SRC S, SYSCAT._SV_OBJ O, SYS._DD_USER U
WHERE   S.OBJ_ID = O.OBJ_ID AND
        O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE VIEW DBA_SOURCE
AS
    SELECT /*+ no_merge */ OWNER, NAME, TYPE, LINE, TEXT
    FROM SYSCAT._SV_SOURCE
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_SOURCE FOR DBA_SOURCE;

CREATE OR REPLACE VIEW ALL_SOURCE
AS
SELECT /*+ no_merge */ OWNER, NAME, TYPE, LINE, TEXT
FROM   SYSCAT._SV_SOURCE
WHERE  OWNER_ID = USERENV('SCHEMAID') OR OWNER_ID = 1
        
  OR   EXISTS (
            SELECT NULL
            FROM   SYS._DD_SYSAUTH SAU
            WHERE  SAU.GRANTEE_ID = USERENV('SCHEMAID')
              AND  (SAU.PRIV_NO    = -449
                    OR SAU.PRIV_NO = -473
                    OR PRIV_NO IN (
                          SELECT USER_ID FROM SYS._DD_USER
                          WHERE NAME = 'DBA')
                   )
        )
  OR   OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              AND  (PRIV_NO = 8
                          
                   )
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_SOURCE FOR ALL_SOURCE;
GRANT SELECT ON ALL_SOURCE TO PUBLIC;

CREATE OR REPLACE VIEW USER_SOURCE
AS
    SELECT /*+ no_merge */ NAME, TYPE, LINE, TEXT
    FROM SYSCAT._SV_SOURCE
    WHERE OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_SOURCE FOR USER_SOURCE;
GRANT SELECT ON USER_SOURCE TO PUBLIC;




-- DBA_SEQUENCES

CREATE OR REPLACE VIEW DBA_SEQUENCES
(SEQUENCE_OWNER, SEQUENCE_NAME, MIN_VALUE, MAX_VALUE, INCREMENT_BY,
 CYCLE_FLAG, ORDER_FLAG, IF_AVAIL, CACHE_SIZE, LAST_NUMBER)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME, S.MIN_VAL, S.MAX_VAL, INC,
       DECODE(S.CYCLE, 0, 'N', 1, 'Y', 'E'),
       DECODE(S.GLOBAL_ORDER, 0, 'N', 1, 'Y', 'E'),
       DECODE(S.IF_AVAIL, 0, 'N', 1, 'Y', 'E'),
       ABS(S.DFLT_CACHE_SIZE), S.NEXT_VAL
FROM   SYS._DD_SEQ S, SYS._DD_OBJ O, SYS._DD_USER U
WHERE  S.OBJ_ID = O.OBJ_ID
  AND  O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_SEQUENCES FOR DBA_SEQUENCES;

-- ALL_SEQUENCES

CREATE OR REPLACE VIEW ALL_SEQUENCES
(SEQUENCE_OWNER, SEQUENCE_NAME, MIN_VALUE, MAX_VALUE, INCREMENT_BY,
 CYCLE_FLAG, ORDER_FLAG, IF_AVAIL, CACHE_SIZE, LAST_NUMBER)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME, S.MIN_VAL, S.MAX_VAL, INC,
       DECODE(S.CYCLE, 0, 'N', 1, 'Y', 'E'),
       DECODE(S.GLOBAL_ORDER, 0, 'N', 1, 'Y', 'E'),
       DECODE(S.IF_AVAIL, 0, 'N', 1, 'Y', 'E'),
       ABS(S.DFLT_CACHE_SIZE), S.NEXT_VAL
FROM   SYS._DD_SEQ S, SYS._DD_OBJ O, SYS._DD_USER U
WHERE  S.OBJ_ID = O.OBJ_ID
  AND  O.OWNER_ID = U.USER_ID
  AND  (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1)

UNION

SELECT U.NAME, O.NAME, S.MIN_VAL, S.MAX_VAL, INC,
       DECODE(S.CYCLE, 0, 'N', 1, 'Y', 'E'),
       DECODE(S.GLOBAL_ORDER, 0, 'N', 1, 'Y', 'E'),
       DECODE(S.IF_AVAIL, 0, 'N', 1, 'Y', 'E'),
       ABS(S.DFLT_CACHE_SIZE), S.NEXT_VAL
FROM   SYS._DD_SEQ S, SYS._DD_OBJ O, SYS._DD_USER U
WHERE  S.OBJ_ID = O.OBJ_ID
  AND  O.OWNER_ID = U.USER_ID
       
  AND  EXISTS (
         SELECT NULL
         FROM   SYS._DD_SYSAUTH
         WHERE  GRANTEE_ID = USERENV('SCHEMAID')
           AND  (PRIV_NO = -459
                 OR PRIV_NO = -473
                 OR PRIV_NO IN (
                      SELECT USER_ID FROM SYS._DD_USER
                      WHERE NAME = 'DBA')
                )
       )

UNION

SELECT U.NAME, O.NAME, S.MIN_VAL, S.MAX_VAL, INC,
       DECODE(S.CYCLE, 0, 'N', 1, 'Y', 'E'),
       DECODE(S.GLOBAL_ORDER, 0, 'N', 1, 'Y', 'E'),
       DECODE(S.IF_AVAIL, 0, 'N', 1, 'Y', 'E'),
       ABS(S.DFLT_CACHE_SIZE), S.NEXT_VAL
FROM   SYS._DD_SEQ S, SYS._DD_OBJ O, SYS._DD_USER U
WHERE  S.OBJ_ID = O.OBJ_ID
  AND  O.OWNER_ID = U.USER_ID
       
  AND  O.OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_SEQUENCES FOR ALL_SEQUENCES;
GRANT SELECT ON ALL_SEQUENCES TO PUBLIC;

-- USER_SEQUENCES

CREATE OR REPLACE VIEW USER_SEQUENCES
(SEQUENCE_NAME, MIN_VALUE, MAX_VALUE, INCREMENT_BY,
 CYCLE_FLAG, ORDER_FLAG, IF_AVAIL, CACHE_SIZE, LAST_NUMBER)
AS
SELECT /*+ no_merge */ SEQUENCE_NAME, MIN_VALUE, MAX_VALUE, INCREMENT_BY,
       CYCLE_FLAG, ORDER_FLAG, IF_AVAIL, CACHE_SIZE, LAST_NUMBER
FROM   DBA_SEQUENCES
WHERE  SEQUENCE_OWNER = USERENV('SCHEMA')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_SEQUENCES FOR USER_SEQUENCES;
GRANT SELECT ON USER_SEQUENCES TO PUBLIC;




CREATE OR REPLACE VIEW __DBA_LOBS (
        OWNER,
        TABLE_NAME,
        COLUMN_NAME,
        SEGMENT_NAME,
        TABLESPACE_NAME,
        INDEX_NAME,
        IN_ROW,
        BUFFER_POOL,
        PARTITIONED,
        BO_ID,
        OWNER_ID
        )
AS
SELECT /*+ no_merge */  U.NAME,
        O.NAME,
        C.NAME,
        SO.NAME,
        TS.NAME,
        IO.NAME,
        DECODE(BITAND(L.FLAGS, 1),
               1, 'YES', 'NO'),
        DECODE(S.BUFPOOL, 1, 'KEEP',
                          2, 'RECYCLE', 'DEFAULT'),
        DECODE(BITAND(T.FLAGS, 8),
               8, 'YES', 'NO'),
        L.BO_ID,
        O.OWNER_ID
FROM    SYS._DD_LOB L, SYS._DD_OBJ O, SYS._DD_USER U, SYS._DD_TS TS,
        SYS._DD_COL C, SYS._DD_OBJ SO, SYS._DD_OBJ IO, SYS._DD_SGMT S,
        SYS._DD_TBL T
WHERE   L.BO_ID = O.OBJ_ID
AND     BITAND(O.FLAGS, 128) != 128
AND     O.OWNER_ID = U.USER_ID
AND     L.BO_ID = C.OBJ_ID
AND     L.COL_NO = C.COL_NO
AND     L.OBJ_ID = SO.OBJ_ID
AND     L.IDX_ID = IO.OBJ_ID
AND     L.SGMT_ID = S.SGMT_ID
AND     L.TS_ID = TS.TS_ID
AND     T.OBJ_ID = O.OBJ_ID
AND     BITAND(T.FLAGS, 8) != 8
UNION ALL
SELECT  U.NAME,
        O.NAME,
        C.NAME,
        SO.NAME,
        TS.NAME,
        IO.NAME,
        DECODE(BITAND(L.FLAGS, 1),
               1, 'YES', 'NO'),
        DECODE(P.DEFBUFPOOL, 1, 'KEEP',
                          2, 'RECYCLE', 'DEFAULT'),
        DECODE(BITAND(T.FLAGS, 8),
               8, 'YES', 'NO'),
        L.BO_ID,
        O.OWNER_ID
FROM    SYS._DD_LOB L, SYS._DD_OBJ O, SYS._DD_USER U, SYS._DD_TS TS,
        SYS._DD_COL C, SYS._DD_OBJ SO, SYS._DD_OBJ IO, SYS._DD_PARTLOB P,
        SYS._DD_TBL T
WHERE   L.BO_ID = O.OBJ_ID
AND     O.OWNER_ID = U.USER_ID
AND     L.BO_ID = C.OBJ_ID
AND     L.COL_NO = C.COL_NO
AND     L.OBJ_ID = SO.OBJ_ID
AND     L.IDX_ID = IO.OBJ_ID
AND     L.OBJ_ID = P.OBJ_ID
AND     P.DEFTS_ID = TS.TS_ID
AND     T.OBJ_ID = O.OBJ_ID
AND     BITAND(T.FLAGS, 8) = 8
;

CREATE OR REPLACE VIEW DBA_LOBS
AS
SELECT /*+ no_merge */  OWNER,
        TABLE_NAME,
        COLUMN_NAME,
        SEGMENT_NAME,
        TABLESPACE_NAME,
        INDEX_NAME,
        IN_ROW,
        BUFFER_POOL,
        PARTITIONED
FROM    __DBA_LOBS
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_LOBS FOR DBA_LOBS;

CREATE OR REPLACE VIEW ALL_LOBS
AS
SELECT /*+ no_merge */  OWNER,
        TABLE_NAME,
        COLUMN_NAME,
        SEGMENT_NAME,
        TABLESPACE_NAME,
        INDEX_NAME,
        IN_ROW,
        BUFFER_POOL,
        PARTITIONED
FROM    __DBA_LOBS
WHERE   OWNER_ID = USERENV('SCHEMAID')
   OR   OWNER_ID = 1
   OR   EXISTS (SELECT NULL
                FROM   (SELECT SAU2.PRIV_NO
                        FROM   SYS._DD_SYSAUTH SAU2
                        START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                        CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                       ) SAU
                WHERE (SAU.PRIV_NO    = -483
                        OR SAU.PRIV_NO = -482
                        OR SAU.PRIV_NO = -481
                        OR SAU.PRIV_NO = -480
                        OR SAU.PRIV_NO = -485
                        OR SAU.PRIV_NO = -473
                        OR SAU.PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
               )
   OR   BO_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_LOBS FOR ALL_LOBS;
GRANT SELECT ON ALL_LOBS TO PUBLIC;

CREATE OR REPLACE VIEW USER_LOBS
AS
SELECT /*+ no_merge */  TABLE_NAME,
        COLUMN_NAME,
        SEGMENT_NAME,
        TABLESPACE_NAME,
        INDEX_NAME,
        IN_ROW,
        BUFFER_POOL,
        PARTITIONED
FROM    __DBA_LOBS
WHERE   OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_LOBS FOR USER_LOBS;
GRANT SELECT ON USER_LOBS TO PUBLIC;




CREATE OR REPLACE VIEW "_SV_ARGUMENTS"
(
    OWNER, OBJECT_NAME, PACKAGE_NAME, OBJECT_ID, ARGUMENT_NAME, OVERLOAD,
    POSITION, DATA_TYPE, DATA_TYPE_NO, IN_OUT,
	DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE,
    TYPE_OWNER, TYPE_NAME, TYPE_SUBNAME,
    
    OWNER_ID
)
AS
SELECT /*+ no_merge */  U.NAME, O.PROC_NAME, O.PKG_NAME, O.OBJ_ID,
        ARG.NAME, ARG.MEMBER_NO, ARG.POS_NO,
        DECODE(ARG.TYPE_NO,
               1, 'NUMBER',
               2, 'CHAR',
               3, 'VARCHAR',
               4, 'RAW',
               5, 'DATE',
               6, 'TIME(' ||ARG.SCALE|| ')',
               7, 'TIMESTAMP('||ARG.SCALE||')',
               8, 'INTERVAL YEAR(' ||ARG.PRECISION||') TO MONTH',
               9, 'INTERVAL DAY(' ||ARG.PRECISION||') TO SECOND(' || ARG.SCALE || ')',
               10, 'LONG',
               11, 'LONG RAW',
               12, 'BLOB',
               13, 'CLOB',
               14, 'BFILE',
               15, 'ROWID',
               18, 'NCHAR',
               19, 'NVARCHAR',
               20, 'NCLOB',
               21, 'TIMESTAMP('||ARG.SCALE||') WITH TIME ZONE',
               22, 'TIMESTAMP('||ARG.SCALE||') WITH LOCAL TIME ZONE',
               23, 'BINARY_FLOAT',
               24, 'BINARY_DOUBLE',
               16, 'REF CURSOR',
               17, 'UNKNOWN',
               
               25, 'BOOLEAN',
               26, 'PLS_INTEGER',
               27, 'BINARY_INTEGER',
               28, 'PSM RECORD',
               'UNDEFINED'),
		ARG.TYPE_NO,
        CASE ARG.POS_NO
            WHEN 0 THEN 'OUT'
            ELSE DECODE(BITAND(ARG.PROPERTY, 3),
                        1, 'IN', 2, 'OUT', 3, 'IN/OUT', 'UNDEFINED')
        END,
        CASE ARG.PRECISION
            WHEN -128 THEN NULL
            ELSE
                DECODE(ARG.TYPE_NO,
                    1, 22,
                    2, DECODE(ARG.PRECISION,
                                        0, 2000,
                                        ARG.PRECISION),
                    3, DECODE(ARG.PRECISION,
                                        0, 65532,
                                        ARG.PRECISION),
                    4, DECODE(ARG.PRECISION,
                                        0, 32767,
                                        ARG.PRECISION),
                    10, DECODE(ARG.PRECISION,
                                        0, 32760,
                                        ARG.PRECISION),
                    11, DECODE(ARG.PRECISION,
                                        0, 32760,
                                        ARG.PRECISION)
                )
        END,
        CASE WHEN ARG.PRECISION = -128 THEN NULL ELSE ARG.PRECISION END,
        CASE WHEN ARG.SCALE = -128 THEN NULL ELSE ARG.SCALE END,
		DECODE(BITAND(ARG.PROPERTY, 8), 8, 'NO', 'YES'),
        U_META.NAME, O_META.NAME, PKG_META.NAME,
        
        O.OWNER_ID
FROM    (SELECT OWNER_ID, OBJ_ID,
                NAME AS PROC_NAME, NULL AS PKG_NAME, 1 AS MEMBER_NO
         FROM   SYS._DD_OBJ
         WHERE  TYPE_NO IN (6, 5)

         UNION

         SELECT O.OWNER_ID, O.OBJ_ID,
                PKG.NAME AS PROC_NAME, O.NAME AS PKG_NAME, PKG.MEMBER_NO
         FROM   SYS._DD_OBJ O, SYS._DD_PSMMEMBER PKG
         WHERE  O.OBJ_ID = PKG.OBJ_ID
           AND TYPE_NO = 7
           AND  PKG.KIND IN (50,
                             51)) O,
        SYS._DD_PSMTDEF ARG, SYS._DD_USER U,
        SYS._DD_OBJ O_META, SYS._DD_PSMMEMBER PKG_META, SYS._DD_USER U_META
WHERE   O.OBJ_ID = ARG.OBJ_ID
  AND   O.MEMBER_NO = ARG.MEMBER_NO
  AND   O.OWNER_ID = U.USER_ID
  AND   ARG.META_OBJ_ID = O_META.OBJ_ID (+)
  AND   O_META.OWNER_ID = U_META.USER_ID (+)
  AND   ARG.META_OBJ_ID = PKG_META.OBJ_ID (+)
  AND   ARG.META_MEMBER_NO = PKG_META.MEMBER_NO (+)
;

CREATE OR REPLACE VIEW ALL_ARGUMENTS
AS
SELECT /*+ no_merge */
    OWNER, OBJECT_NAME, PACKAGE_NAME, OBJECT_ID, ARGUMENT_NAME, OVERLOAD,
    POSITION, DATA_TYPE, DATA_TYPE_NO, IN_OUT,
	DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE,
    TYPE_OWNER, TYPE_NAME, TYPE_SUBNAME
FROM
    SYSCAT._SV_ARGUMENTS
WHERE
    OWNER_ID = USERENV('SCHEMAID') OR OWNER_ID = 1
    
   OR   EXISTS (SELECT NULL
                FROM   SYS._DD_SYSAUTH
                WHERE  GRANTEE_ID = USERENV('SCHEMAID')
                  AND  (PRIV_NO    = -449
                        OR PRIV_NO = -473
                        OR PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
               )
    
   OR   OBJECT_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              AND  (PRIV_NO    = 8
                    
                   )
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_ARGUMENTS FOR ALL_ARGUMENTS;
GRANT SELECT ON ALL_ARGUMENTS TO PUBLIC;

CREATE OR REPLACE VIEW USER_ARGUMENTS
AS
SELECT /*+ no_merge */
    OBJECT_NAME, PACKAGE_NAME, OBJECT_ID, ARGUMENT_NAME, OVERLOAD, POSITION,
    DATA_TYPE, DATA_TYPE_NO, IN_OUT,
	DATA_LENGTH, DATA_PRECISION, DATA_SCALE, NULLABLE,
    TYPE_OWNER, TYPE_NAME, TYPE_SUBNAME
FROM
    SYSCAT._SV_ARGUMENTS
WHERE
    OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_ARGUMENTS FOR USER_ARGUMENTS;
GRANT SELECT ON USER_ARGUMENTS TO PUBLIC;







CREATE OR REPLACE VIEW DBA_TAB_COMMENTS
(OWNER, TABLE_NAME, TABLE_TYPE, COMMENTS)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME,
           DECODE(O.TYPE_NO,
                  0, 'INDEX',
                  1, 'TABLE',
                  -999, 'CLUSTER',
                  2, 'VIEW',
                  3, 'SYNONYM',
                  4, 'SEQUENCE',
                 'UNDEFINED'),
           T.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_COMMENT T, SYS._DD_USER U
    WHERE  (O.TYPE_NO = 2
            OR
            (O.TYPE_NO = 1
             AND
             NOT EXISTS (SELECT null
                         FROM   SYS._DD_MVIEW M
                         WHERE  M.CONT_TBL_ID = O.OBJ_ID)))
       AND T.COL_NO(+) = -1 AND O.OBJ_ID = T.OBJ_ID(+)
       AND O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TAB_COMMENTS FOR DBA_TAB_COMMENTS;
CREATE OR REPLACE PUBLIC SYNONYM DBA_TBL_COMMENTS FOR DBA_TAB_COMMENTS;

CREATE OR REPLACE VIEW DBA_COL_COMMENTS
(OWNER, TABLE_NAME, COLUMN_NAME, COMMENTS)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME, C.NAME, T.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_COMMENT T, SYS._DD_COL C, SYS._DD_USER U
    WHERE  T.COL_NO(+) = C.COL_NO AND T.OBJ_ID(+) = C.OBJ_ID
       AND C.OBJ_ID = O.OBJ_ID AND O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_COL_COMMENTS FOR DBA_COL_COMMENTS;

CREATE OR REPLACE VIEW ALL_TAB_COMMENTS
(OWNER, TABLE_NAME, TABLE_TYPE, COMMENTS)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME,
           DECODE(O.TYPE_NO,
                  0, 'INDEX',
                  1, 'TABLE',
                  -999, 'CLUSTER',
                  2, 'VIEW',
                  3, 'SYNONYM',
                  4, 'SEQUENCE',
                 'UNDEFINED'),
           T.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_COMMENT T, SYS._DD_USER U
    WHERE  (O.TYPE_NO = 2
            OR
            (O.TYPE_NO = 1
             AND
             NOT EXISTS (SELECT null
                         FROM   SYS._DD_MVIEW M
                         WHERE  M.CONT_TBL_ID = O.OBJ_ID)))
       AND T.COL_NO(+) = -1 AND O.OBJ_ID = T.OBJ_ID(+)
       AND O.OWNER_ID = U.USER_ID
       AND (OWNER_ID = USERENV('SCHEMAID') OR OWNER_ID = 1)

UNION

    SELECT U.NAME, O.NAME,
           DECODE(O.TYPE_NO,
                  0, 'INDEX',
                  1, 'TABLE',
                  -999, 'CLUSTER',
                  2, 'VIEW',
                  3, 'SYNONYM',
                  4, 'SEQUENCE',
                 'UNDEFINED'),
           T.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_COMMENT T, SYS._DD_USER U
    WHERE  (O.TYPE_NO = 2
            OR
            (O.TYPE_NO = 1
             AND
             NOT EXISTS (SELECT null
                         FROM   SYS._DD_MVIEW M
                         WHERE  M.CONT_TBL_ID = O.OBJ_ID)))
       AND T.COL_NO(+) = -1 AND O.OBJ_ID = T.OBJ_ID(+)
       AND O.OWNER_ID = U.USER_ID
       AND EXISTS (SELECT NULL
                   FROM   (SELECT SAU2.PRIV_NO
                           FROM   SYS._DD_SYSAUTH SAU2
                           START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                           CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                          ) SAU
                   WHERE (SAU.PRIV_NO    = -483
                           OR SAU.PRIV_NO = -482
                           OR SAU.PRIV_NO = -481
                           OR SAU.PRIV_NO = -480
                           OR SAU.PRIV_NO = -485
                           OR SAU.PRIV_NO = -473
                           OR SAU.PRIV_NO IN (
                                 SELECT USER_ID FROM SYS._DD_USER
                                 WHERE NAME = 'DBA')
                          )
                  )

UNION

    SELECT U.NAME, O.NAME,
           DECODE(O.TYPE_NO,
                  0, 'INDEX',
                  1, 'TABLE',
                  -999, 'CLUSTER',
                  2, 'VIEW',
                  3, 'SYNONYM',
                  4, 'SEQUENCE',
                 'UNDEFINED'),
           T.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_COMMENT T, SYS._DD_USER U
    WHERE  (O.TYPE_NO = 2
            OR
            (O.TYPE_NO = 1
             AND
             NOT EXISTS (SELECT null
                         FROM   SYS._DD_MVIEW M
                         WHERE  M.CONT_TBL_ID = O.OBJ_ID)))
       AND T.COL_NO(+) = -1 AND O.OBJ_ID = T.OBJ_ID(+)
       AND O.OWNER_ID = U.USER_ID
       AND O.OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TAB_COMMENTS FOR ALL_TAB_COMMENTS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_TBL_COMMENTS FOR ALL_TAB_COMMENTS;

GRANT SELECT ON ALL_TAB_COMMENTS TO PUBLIC;


CREATE OR REPLACE VIEW ALL_COL_COMMENTS
(OWNER, TABLE_NAME, COLUMN_NAME, COMMENTS)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME, C.NAME, T.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_COMMENT T, SYS._DD_COL C, SYS._DD_USER U
    WHERE  T.COL_NO(+) = C.COL_NO AND T.OBJ_ID(+) = C.OBJ_ID
           AND C.OBJ_ID = O.OBJ_ID
           AND (O.OWNER_ID = USERENV('SCHEMAID')
                OR O.OWNER_ID = 1)
           AND O.OWNER_ID = U.USER_ID

UNION

    SELECT U.NAME, O.NAME, C.NAME, T.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_COMMENT T, SYS._DD_COL C, SYS._DD_USER U
    WHERE  T.COL_NO(+) = C.COL_NO AND T.OBJ_ID(+) = C.OBJ_ID
           AND C.OBJ_ID = O.OBJ_ID AND O.OWNER_ID = U.USER_ID
           AND EXISTS (SELECT NULL
                       FROM   (SELECT SAU2.PRIV_NO
                               FROM   SYS._DD_SYSAUTH SAU2
                               START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                               CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                              ) SAU
                       WHERE (SAU.PRIV_NO    = -483
                               OR SAU.PRIV_NO = -482
                               OR SAU.PRIV_NO = -481
                               OR SAU.PRIV_NO = -480
                               OR SAU.PRIV_NO = -485
                               OR SAU.PRIV_NO = -473
                               OR SAU.PRIV_NO IN (
                                     SELECT USER_ID FROM SYS._DD_USER
                                     WHERE NAME = 'DBA')
                              )
                      )

UNION

    SELECT U.NAME, O.NAME, C.NAME, T.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_COMMENT T, SYS._DD_COL C, SYS._DD_USER U
    WHERE  T.COL_NO(+) = C.COL_NO AND T.OBJ_ID(+) = C.OBJ_ID
           AND C.OBJ_ID = O.OBJ_ID AND O.OWNER_ID = U.USER_ID
           AND O.OBJ_ID IN (
                    SELECT OBJ_ID
                    FROM   SYS._DD_OBJAUTH
                    WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
                  )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_COL_COMMENTS FOR ALL_COL_COMMENTS;
GRANT SELECT ON ALL_COL_COMMENTS TO PUBLIC;


CREATE OR REPLACE VIEW USER_TAB_COMMENTS
(TABLE_NAME, TABLE_TYPE, COMMENTS)
AS
    SELECT /*+ no_merge */ O.NAME,
           DECODE(O.TYPE_NO,
                  0, 'INDEX',
                  1, 'TABLE',
                  -999, 'CLUSTER',
                  2, 'VIEW',
                  3, 'SYNONYM',
                  4, 'SEQUENCE',
                 'UNDEFINED'),
           T.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_COMMENT T, SYS._DD_USER U
    WHERE  (O.TYPE_NO = 2
            OR
            (O.TYPE_NO = 1
             AND
             NOT EXISTS (SELECT null
                         FROM   SYS._DD_MVIEW M
                         WHERE  M.CONT_TBL_ID = O.OBJ_ID)))
       AND T.COL_NO(+) = -1 AND O.OBJ_ID = T.OBJ_ID(+)
       AND O.OWNER_ID = U.USER_ID
       AND O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TAB_COMMENTS FOR USER_TAB_COMMENTS;
CREATE OR REPLACE PUBLIC SYNONYM USER_TBL_COMMENTS FOR USER_TAB_COMMENTS;

GRANT SELECT ON USER_TAB_COMMENTS TO PUBLIC;


CREATE OR REPLACE VIEW USER_COL_COMMENTS
(TABLE_NAME, COLUMN_NAME, COMMENTS)
AS
    SELECT /*+ no_merge */ O.NAME, C.NAME, T.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_COMMENT T, SYS._DD_COL C, SYS._DD_USER U
    WHERE  T.COL_NO(+) = C.COL_NO AND T.OBJ_ID(+) = C.OBJ_ID
           AND C.OBJ_ID = O.OBJ_ID AND O.OWNER_ID = USERENV('SCHEMAID')
           AND O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM USER_COL_COMMENTS FOR USER_COL_COMMENTS;
GRANT SELECT ON USER_COL_COMMENTS TO PUBLIC;



CREATE OR REPLACE VIEW DBA_MVIEW_COMMENTS
(OWNER, MVIEW_NAME, COMMENTS)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME, C.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_TBL T, SYS._DD_COMMENT C, SYS._DD_USER U
    WHERE  T.OBJ_ID = O.OBJ_ID
      AND  BITAND(T.FLAGS, 67108864) = 67108864
      AND  C.COL_NO(+) = -1 AND O.OBJ_ID = C.OBJ_ID(+)
      AND  O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_MVIEW_COMMENTS FOR DBA_MVIEW_COMMENTS;

CREATE OR REPLACE VIEW ALL_MVIEW_COMMENTS
(OWNER, MVIEW_NAME, COMMENTS)
AS
    SELECT /*+ no_merge */ U.NAME, O.NAME, C.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_TBL T, SYS._DD_COMMENT C, SYS._DD_USER U
    WHERE  T.OBJ_ID = O.OBJ_ID
      AND  BITAND(T.FLAGS, 67108864) = 67108864
      AND  C.COL_NO(+) = -1 AND O.OBJ_ID = C.OBJ_ID(+)
      AND  O.OWNER_ID = U.USER_ID
      AND  (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1)

UNION

    SELECT U.NAME, O.NAME, C.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_TBL T, SYS._DD_COMMENT C, SYS._DD_USER U
    WHERE  T.OBJ_ID = O.OBJ_ID
      AND  BITAND(T.FLAGS, 67108864) = 67108864
      AND  C.COL_NO(+) = -1 AND O.OBJ_ID = C.OBJ_ID(+)
      AND  O.OWNER_ID = U.USER_ID
      AND  EXISTS
            (SELECT NULL
             FROM   SYS._DD_SYSAUTH SAU
             WHERE  SAU.GRANTEE_ID = USERENV('SCHEMAID')
               AND  (SAU.PRIV_NO  = -466
                     OR SAU.PRIV_NO = -465
                     OR SAU.PRIV_NO = -464
                     OR SAU.PRIV_NO = -473
                     OR SAU.PRIV_NO IN (
                           SELECT USER_ID FROM SYS._DD_USER
                           WHERE NAME = 'DBA')
                    )
             )

UNION

    SELECT U.NAME, O.NAME, C.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_TBL T, SYS._DD_COMMENT C, SYS._DD_USER U
    WHERE  T.OBJ_ID = O.OBJ_ID
      AND  BITAND(T.FLAGS, 67108864) = 67108864
      AND  C.COL_NO(+) = -1 AND O.OBJ_ID = C.OBJ_ID(+)
      AND  O.OWNER_ID = U.USER_ID
      AND  O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_MVIEW_COMMENTS FOR ALL_MVIEW_COMMENTS;
GRANT SELECT ON ALL_MVIEW_COMMENTS TO PUBLIC;

CREATE OR REPLACE VIEW USER_MVIEW_COMMENTS
(MVIEW_NAME, COMMENTS)
AS
    SELECT /*+ no_merge */ O.NAME, C.COMMENT_STR
    FROM   SYS._DD_OBJ O, SYS._DD_TBL T, SYS._DD_COMMENT C, SYS._DD_USER U
    WHERE  T.OBJ_ID = O.OBJ_ID
      AND  BITAND(T.FLAGS, 67108864) = 67108864
      AND  C.COL_NO(+) = -1 AND O.OBJ_ID = C.OBJ_ID(+)
      AND  O.OWNER_ID = U.USER_ID
      AND  O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_MVIEW_COMMENTS FOR USER_MVIEW_COMMENTS;






CREATE OR REPLACE VIEW __DBA_PART_TABLES (
       OWNER,
       TABLE_NAME,
       PARTITIONING_TYPE,
       SUBPARTITIONING_TYPE,
       PARTITION_COUNT,
       DEF_SUBPARTITION_COUNT,
       PARTITIONING_KEY_COUNT,
       SUBPARTITIONING_KEY_COUNT,
       DEF_TABLESPACE_NAME,
       DEF_PCT_FREE,
       DEF_INI_TRANS,
       DEF_NEXT_EXTENT,
       DEF_MAX_EXTENTS,
       DEF_BUFFER_POOL,
       OBJ_ID,
       OWNER_ID,
       MAX_TRANS,
       INITIAL_EXTENT,
       MIN_EXTENT,
       LOGGING,
       INTERVAL
       )
AS
SELECT /*+ no_merge */ U.NAME,
       O.NAME,
       decode(P.PARTTYPE,
            1, 'RANGE',
            2, 'HASH',
            3, 'LIST'
       ),
       decode(P.SUBPARTTYPE,
            0, 'NONE',
            1, 'RANGE',
            2, 'HASH',
            3, 'LIST'
       ),
       P.PARTCNT,
       P.SUBPARTCNT,
       P.PARTKEYCOLS,
       P.SUBPARTCOLCNT,
       TS.NAME,
       P.DEFPCTFREE,
       P.DEFINITRANS,
       DECODE(P.DEFEXTSIZE,
              0, SYS_OP_NEXT_EXTENT(TS.TS_ID, T.SHDRDBA),
              P.DEFEXTSIZE),
       P.DEFMAXEXTS,
       DECODE(P.DEFBUFPOOL, 1, 'KEEP',
                            2, 'RECYCLE', 'DEFAULT'),
       O.OBJ_ID,
       U.USER_ID,
       LEAST(255,
         TRUNC((SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')/50,0)),
       (TS.UNIT
          * (SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')),
       (8 
          * (SELECT VALUE FROM VT_PARAMETER WHERE NAME='DB_BLOCK_SIZE')),
       DECODE(BITAND(T.FLAGS, 2), 0, 'YES', 'NO'),
       P.INTERVAL
FROM   SYS._DD_PARTOBJ P, SYS._DD_OBJ O, SYS._DD_USER U, SYS._DD_TS TS, SYS._DD_TBL T
WHERE  P.OBJ_ID = O.OBJ_ID
  AND  O.OWNER_ID = U.USER_ID
  AND  P.DEFTS_ID = TS.TS_ID
  AND  O.TYPE_NO = 1
  AND  O.OBJ_ID = T.OBJ_ID
;

CREATE OR REPLACE VIEW DBA_PART_TABLES
AS
SELECT /*+ no_merge */ OWNER,
       TABLE_NAME,
       PARTITIONING_TYPE,
       SUBPARTITIONING_TYPE,
       PARTITION_COUNT,
       DEF_SUBPARTITION_COUNT,
       PARTITIONING_KEY_COUNT,
       SUBPARTITIONING_KEY_COUNT,
       DEF_TABLESPACE_NAME,
       DEF_PCT_FREE,
       DEF_INI_TRANS,
       DEF_NEXT_EXTENT,
       DEF_MAX_EXTENTS,
       DEF_BUFFER_POOL,
       MAX_TRANS,
       INITIAL_EXTENT,
       MIN_EXTENT,
       INTERVAL
FROM   __DBA_PART_TABLES
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_PART_TABLES FOR DBA_PART_TABLES;

CREATE OR REPLACE VIEW USER_PART_TABLES
AS
SELECT /*+ no_merge */ TABLE_NAME,
       PARTITIONING_TYPE,
       SUBPARTITIONING_TYPE,
       PARTITION_COUNT,
       DEF_SUBPARTITION_COUNT,
       PARTITIONING_KEY_COUNT,
       SUBPARTITIONING_KEY_COUNT,
       DEF_TABLESPACE_NAME,
       DEF_PCT_FREE,
       DEF_INI_TRANS,
       DEF_NEXT_EXTENT,
       DEF_MAX_EXTENTS,
       DEF_BUFFER_POOL,
       MAX_TRANS,
       INITIAL_EXTENT,
       MIN_EXTENT,
       LOGGING,
       INTERVAL
FROM   __DBA_PART_TABLES
WHERE  OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_PART_TABLES FOR USER_PART_TABLES;
GRANT SELECT ON USER_PART_TABLES TO PUBLIC;

CREATE OR REPLACE VIEW ALL_PART_TABLES
AS
SELECT /*+ no_merge */ OWNER,
       TABLE_NAME,
       PARTITIONING_TYPE,
       SUBPARTITIONING_TYPE,
       PARTITION_COUNT,
       DEF_SUBPARTITION_COUNT,
       PARTITIONING_KEY_COUNT,
       SUBPARTITIONING_KEY_COUNT,
       DEF_TABLESPACE_NAME,
       DEF_PCT_FREE,
       DEF_INI_TRANS,
       DEF_NEXT_EXTENT,
       DEF_MAX_EXTENTS,
       DEF_BUFFER_POOL,
       MAX_TRANS,
       INITIAL_EXTENT,
       MIN_EXTENT,
       LOGGING,
       INTERVAL
FROM   __DBA_PART_TABLES
WHERE  OWNER_ID = USERENV('SCHEMAID')
   OR  OWNER_ID = 1
   OR  EXISTS (SELECT NULL
               FROM   (SELECT SAU2.PRIV_NO
                       FROM   SYS._DD_SYSAUTH SAU2
                       START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                       CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                      ) SAU
               WHERE (SAU.PRIV_NO    = -483
                       OR SAU.PRIV_NO = -482
                       OR SAU.PRIV_NO = -481
                       OR SAU.PRIV_NO = -480
                       OR SAU.PRIV_NO = -485
                       OR SAU.PRIV_NO = -473
                       OR SAU.PRIV_NO IN (
                             SELECT USER_ID FROM SYS._DD_USER
                             WHERE NAME = 'DBA')
                      )
              )
   OR  OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_PART_TABLES FOR ALL_PART_TABLES;
GRANT SELECT ON ALL_PART_TABLES TO PUBLIC;



CREATE OR REPLACE VIEW __DBA_PART_INDEXES (
       OWNER,
       INDEX_NAME,
       TABLE_NAME,
       PARTITIONING_TYPE,
       SUBPARTITIONING_TYPE,
       PARTITION_COUNT,
       DEF_SUBPARTITION_COUNT,
       PARTITIONING_KEY_COUNT,
       SUBPARTITIONING_KEY_COUNT,
       LOCALITY,
       ALIGNMENT,
       DEF_TABLESPACE_NAME,
       DEF_PCT_FREE,
       DEF_INI_TRANS,
       DEF_NEXT_EXTENT,
       DEF_MAX_EXTENTS,
       DEF_BUFFER_POOL,
       OBJ_ID,
       OWNER_ID
       )
AS
SELECT /*+ no_merge */ U.NAME,
       O.NAME,
       BO.NAME,
       decode(P.PARTTYPE,
            1, 'RANGE',
            2, 'HASH',
            3, 'LIST'
       ),
       decode(P.SUBPARTTYPE,
            0, 'NONE',
            1, 'RANGE',
            2, 'HASH',
            3, 'LIST'
       ),
       P.PARTCNT,
       P.SUBPARTCNT,
       P.PARTKEYCOLS,
       P.SUBPARTCOLCNT,
       DECODE(BITAND(I.FLAGS, 256),
              0, 'LOCAL',
              'GLOBAL'),
       DECODE(BITAND(P.FLAGS, 2),
              0, 'NON_PREFIXED',
              'PREFIXED'),
       TS.NAME,
       P.DEFPCTFREE,
       P.DEFINITRANS,
       P.DEFEXTSIZE,
       P.DEFMAXEXTS,
       DECODE(P.DEFBUFPOOL, 1, 'KEEP',
                            2, 'RECYCLE', 'DEFAULT'),
       O.OBJ_ID,
       U.USER_ID
FROM   SYS._DD_PARTOBJ P, SYS._DD_OBJ O, SYS._DD_USER U, SYS._DD_TS TS,
       SYS._DD_IDX I, SYS._DD_OBJ BO
WHERE  P.OBJ_ID = O.OBJ_ID
  AND  O.OWNER_ID = U.USER_ID
  AND  P.DEFTS_ID = TS.TS_ID
  AND  O.OBJ_ID = I.OBJ_ID
  AND  I.BO_ID = BO.OBJ_ID
;

CREATE OR REPLACE VIEW DBA_PART_INDEXES
AS
SELECT /*+ no_merge */ OWNER,
       INDEX_NAME,
       TABLE_NAME,
       PARTITIONING_TYPE,
       SUBPARTITIONING_TYPE,
       PARTITION_COUNT,
       DEF_SUBPARTITION_COUNT,
       PARTITIONING_KEY_COUNT,
       SUBPARTITIONING_KEY_COUNT,
       LOCALITY,
       ALIGNMENT,
       DEF_TABLESPACE_NAME,
       DEF_PCT_FREE,
       DEF_INI_TRANS,
       DEF_NEXT_EXTENT,
       DEF_MAX_EXTENTS,
       DEF_BUFFER_POOL
FROM   __DBA_PART_INDEXES
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_PART_INDEXES FOR DBA_PART_INDEXES;

CREATE OR REPLACE VIEW USER_PART_INDEXES
AS
SELECT /*+ no_merge */ INDEX_NAME,
       TABLE_NAME,
       PARTITIONING_TYPE,
       SUBPARTITIONING_TYPE,
       PARTITION_COUNT,
       DEF_SUBPARTITION_COUNT,
       PARTITIONING_KEY_COUNT,
       SUBPARTITIONING_KEY_COUNT,
       LOCALITY,
       ALIGNMENT,
       DEF_TABLESPACE_NAME,
       DEF_PCT_FREE,
       DEF_INI_TRANS,
       DEF_NEXT_EXTENT,
       DEF_MAX_EXTENTS,
       DEF_BUFFER_POOL
FROM   __DBA_PART_INDEXES
WHERE  OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_PART_INDEXES FOR USER_PART_INDEXES;
GRANT SELECT ON USER_PART_INDEXES TO PUBLIC;

CREATE OR REPLACE VIEW ALL_PART_INDEXES
AS
SELECT /*+ no_merge */ OWNER,
       INDEX_NAME,
       TABLE_NAME,
       PARTITIONING_TYPE,
       SUBPARTITIONING_TYPE,
       PARTITION_COUNT,
       DEF_SUBPARTITION_COUNT,
       PARTITIONING_KEY_COUNT,
       SUBPARTITIONING_KEY_COUNT,
       LOCALITY,
       ALIGNMENT,
       DEF_TABLESPACE_NAME,
       DEF_PCT_FREE,
       DEF_INI_TRANS,
       DEF_NEXT_EXTENT,
       DEF_MAX_EXTENTS,
       DEF_BUFFER_POOL
FROM   __DBA_PART_INDEXES
WHERE  OWNER_ID = USERENV('SCHEMAID')
   OR  OWNER_ID = 1
   OR  EXISTS (SELECT NULL
               FROM   (SELECT SAU2.PRIV_NO
                       FROM   SYS._DD_SYSAUTH SAU2
                       START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                       CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                      ) SAU
               WHERE (SAU.PRIV_NO    = -483
                       OR SAU.PRIV_NO = -482
                       OR SAU.PRIV_NO = -481
                       OR SAU.PRIV_NO = -480
                       OR SAU.PRIV_NO = -485
                       OR SAU.PRIV_NO = -473
                       OR SAU.PRIV_NO IN (
                             SELECT USER_ID FROM SYS._DD_USER
                             WHERE NAME = 'DBA')
                      )
              )
   OR  OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_PART_INDEXES FOR ALL_PART_INDEXES;
GRANT SELECT ON ALL_PART_INDEXES TO PUBLIC;


CREATE OR REPLACE VIEW DBA_PART_LOBS
(OWNER, TABLE_NAME, COLUMN_NAME, LOB_NAME, LOB_INDEX_NAME, DEF_IN_ROW,
 DEF_TABLESPACE_NAME, DEF_NEXT_EXTENT, DEF_MAX_EXTENTS, DEF_BUFFER_POOL)
AS
SELECT /*+ no_merge */ U.NAME, OT.NAME, C.NAME, O.NAME, OI.NAME,
       DECODE(BITAND(L.FLAGS, 1),
              1, 'YES', 'NO'),
       TS.NAME, P.DEFEXTSIZE, P.DEFMAXEXTS,
       DECODE(P.DEFBUFPOOL, 1, 'KEEP',
                            2, 'RECYCLE', 'DEFAULT')
FROM   SYS._DD_OBJ O, SYS._DD_OBJ OT, SYS._DD_OBJ OI,
       SYS._DD_PARTLOB P, SYS._DD_LOB L, SYS._DD_COL C,
       SYS._DD_USER U, SYS._DD_TS TS
WHERE  P.OBJ_ID = L.OBJ_ID
  AND  L.OBJ_ID = O.OBJ_ID AND L.BO_ID = OT.OBJ_ID AND L.IDX_ID = OI.OBJ_ID
  AND  C.OBJ_ID = OT.OBJ_ID AND C.COL_NO = L.COL_NO
  AND  P.DEFTS_ID = TS.TS_ID
  AND  O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_PART_LOBS FOR DBA_PART_LOBS;

CREATE OR REPLACE VIEW ALL_PART_LOBS
(OWNER, TABLE_NAME, COLUMN_NAME, LOB_NAME, LOB_INDEX_NAME, DEF_IN_ROW,
 DEF_TABLESPACE_NAME, DEF_NEXT_EXTENT, DEF_MAX_EXTENTS, DEF_BUFFER_POOL)
AS
SELECT /*+ no_merge */ U.NAME, OT.NAME, C.NAME, O.NAME, OI.NAME,
       DECODE(BITAND(L.FLAGS, 1),
              1, 'YES', 'NO'),
       TS.NAME, P.DEFEXTSIZE, P.DEFMAXEXTS,
       DECODE(P.DEFBUFPOOL, 1, 'KEEP',
                            2, 'RECYCLE', 'DEFAULT')
FROM   SYS._DD_OBJ O, SYS._DD_OBJ OT, SYS._DD_OBJ OI,
       SYS._DD_PARTLOB P, SYS._DD_LOB L, SYS._DD_COL C,
       SYS._DD_USER U, SYS._DD_TS TS
WHERE  P.OBJ_ID = L.OBJ_ID
  AND  L.OBJ_ID = O.OBJ_ID AND L.BO_ID = OT.OBJ_ID AND L.IDX_ID = OI.OBJ_ID
  AND  C.OBJ_ID = OT.OBJ_ID AND C.COL_NO = L.COL_NO
  AND  P.DEFTS_ID = TS.TS_ID
  AND  O.OWNER_ID = U.USER_ID
  AND  (
            O.OWNER_ID = USERENV('SCHEMAID')
       OR   O.OWNER_ID = 1
       OR   EXISTS (SELECT NULL
                    FROM   (SELECT SAU2.PRIV_NO
                            FROM   SYS._DD_SYSAUTH SAU2
                            START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                            CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                           ) SAU
                    WHERE (SAU.PRIV_NO    = -483
                            OR SAU.PRIV_NO = -482
                            OR SAU.PRIV_NO = -481
                            OR SAU.PRIV_NO = -480
                            OR SAU.PRIV_NO = -485
                            OR SAU.PRIV_NO = -473
                            OR SAU.PRIV_NO IN (
                                  SELECT USER_ID FROM SYS._DD_USER
                                  WHERE NAME = 'DBA')
                           )
                   )
       OR   OT.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
       )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_PART_LOBS FOR ALL_PART_LOBS;
GRANT SELECT ON ALL_PART_LOBS TO PUBLIC;

CREATE OR REPLACE VIEW USER_PART_LOBS
(TABLE_NAME, COLUMN_NAME, LOB_NAME, LOB_INDEX_NAME, DEF_IN_ROW,
 DEF_TABLESPACE_NAME, DEF_NEXT_EXTENT, DEF_MAX_EXTENTS, DEF_BUFFER_POOL)
AS
SELECT /*+ no_merge */ OT.NAME, C.NAME, O.NAME, OI.NAME,
       DECODE(BITAND(L.FLAGS, 1),
              1, 'YES', 'NO'),
       TS.NAME, P.DEFEXTSIZE, P.DEFMAXEXTS,
       DECODE(P.DEFBUFPOOL, 1, 'KEEP',
                            2, 'RECYCLE', 'DEFAULT')
FROM   SYS._DD_OBJ O, SYS._DD_OBJ OT, SYS._DD_OBJ OI,
       SYS._DD_PARTLOB P, SYS._DD_LOB L, SYS._DD_COL C,
       SYS._DD_TS TS
WHERE  P.OBJ_ID = L.OBJ_ID
  AND  L.OBJ_ID = O.OBJ_ID AND L.BO_ID = OT.OBJ_ID AND L.IDX_ID = OI.OBJ_ID
  AND  C.OBJ_ID = OT.OBJ_ID AND C.COL_NO = L.COL_NO
  AND  P.DEFTS_ID = TS.TS_ID
  AND  O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_PART_LOBS FOR USER_PART_LOBS;
GRANT SELECT ON USER_PART_LOBS TO PUBLIC;



CREATE OR REPLACE VIEW DBA_2PC_PENDING
(LOCAL_TRAN_ID, XID, STATUS)
AS
    SELECT /*+ no_merge */ P.LOCALXID, V.XID, V.STATUS
    FROM
        (SELECT USGMT_ID || '.' || SLOTNO || '.' || WRAPNO AS LOCALXID
         FROM SYS._VT_PENDING_TRANSACTION ) P,
        SYS._VT_XA_BRANCH V
    WHERE
        P.LOCALXID = V.LOCAL_TRAN_ID

    UNION

    SELECT USGMT_ID || '.' || SLOTNO || '.' || WRAPNO, 
    P.UXID, 'PREPARED'
    FROM
        SYS._VT_PENDING_TRANSACTION P,
        SYS._VT_GLOBAL_TRANSACTION V
    WHERE
        P.USGMT_ID = V.USN AND
        P.SLOTNO = V.SLOT AND
        P.WRAPNO = V.WRAP
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_2PC_PENDING FOR DBA_2PC_PENDING;
GRANT SELECT ON DBA_2PC_PENDING TO PUBLIC;



CREATE OR REPLACE VIEW DBA_2PC_NEIGHBORS
(LOCAL_TRAN_ID, IN_OUT, DATABASE, DBUSER_OWNER, INTERFACE)
AS
    SELECT /*+ no_merge */ USGMT_ID || '.' || SLOTNO || '.' || WRAPNO,
           IN_OUT, DB_NAME, USER_NAME, FLAG
           FROM SYS._DD_DTX_NEIGHBORS
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_2PC_NEIGHBORS FOR DBA_2PC_NEIGHBORS;
GRANT SELECT ON DBA_2PC_NEIGHBORS TO PUBLIC;



CREATE OR REPLACE VIEW DBA_DB_LINKS
(OWNER, DB_LINK, USERNAME, HOST, CREATED)
AS
    SELECT /*+ no_merge */ U.NAME, D.LINK_NAME, D.USER_NAME, D.DB_NAME, D.CTIME
    FROM SYS._DD_USER U, SYS._DD_DBLINK D
    WHERE D.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_DB_LINKS FOR DBA_DB_LINKS;

CREATE OR REPLACE VIEW ALL_DB_LINKS
(OWNER, DB_LINK, USERNAME, HOST, CREATED)
AS
    SELECT /*+ no_merge */ U.NAME, D.LINK_NAME, D.USER_NAME, D.DB_NAME, D.CTIME
    FROM SYS._DD_USER U, SYS._DD_DBLINK D
    WHERE D.OWNER_ID = U.USER_ID AND U.USER_ID = USERENV('SCHEMAID')

UNION

    SELECT U.NAME, D.LINK_NAME, D.USER_NAME, D.DB_NAME, D.CTIME
    FROM SYS._DD_USER U, SYS._DD_DBLINK D
    WHERE U.NAME = 'PUBLIC' AND U.USER_ID = D.OWNER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_DB_LINKS FOR ALL_DB_LINKS;
GRANT SELECT ON ALL_DB_LINKS TO PUBLIC;

CREATE OR REPLACE VIEW USER_DB_LINKS
(OWNER, DB_LINK, USERNAME, HOST, CREATED)
AS
    SELECT /*+ no_merge */ U.NAME, D.LINK_NAME, D.USER_NAME, D.DB_NAME, D.CTIME
    FROM SYS._DD_USER U, SYS._DD_DBLINK D
    WHERE D.OWNER_ID = U.USER_ID AND U.USER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_DB_LINKS FOR USER_DB_LINKS;
GRANT SELECT ON USER_DB_LINKS TO PUBLIC;



CREATE OR REPLACE VIEW SESSION_ROLES
(ROLE)
AS
    SELECT /*+ no_merge */ U.NAME
    FROM X$USER_ROLE R, SYS._DD_USER U
    WHERE R.USER_ID = U.USER_ID
      AND R.USER_ID NOT IN (USERENV('SCHEMAID'), 1)
;

CREATE OR REPLACE PUBLIC SYNONYM SESSION_ROLES FOR SESSION_ROLES;
GRANT SELECT ON SESSION_ROLES TO PUBLIC;



CREATE OR REPLACE VIEW DBA_FREE_SPACE (
    TABLESPACE_NAME,
    FILE_ID,
    BLOCK_ID,
    BYTES,
    BLOCKS,
    RELATIVE_FNO
    )
AS
SELECT /*+ no_merge */  TS.NAME,
        VT_FS.FILE_ID,
        VT_FS.BLOCK_ID,
        VT_FS.BYTES,
        VT_FS.BLOCKS,
        VT_FS.RELATIVE_FNO
FROM    SYS._DD_TS TS, SYS._VT_DBA_FREE_SPACE VT_FS
WHERE   TS.TS_ID = VT_FS.TS_ID
;


CREATE OR REPLACE VIEW USER_FREE_SPACE (
    TABLESPACE_NAME,
    FILE_ID,
    BLOCK_ID,
    BYTES,
    BLOCKS,
    RELATIVE_FNO
    )
AS
SELECT /*+ no_merge */  TS.NAME,
        VT_FS.FILE_ID,
        VT_FS.BLOCK_ID,
        VT_FS.BYTES,
        VT_FS.BLOCKS,
        VT_FS.RELATIVE_FNO
FROM    SYS._DD_TS TS, SYS._VT_DBA_FREE_SPACE VT_FS
WHERE   TS.TS_ID = VT_FS.TS_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_FREE_SPACE FOR DBA_FREE_SPACE;
CREATE OR REPLACE PUBLIC SYNONYM USER_FREE_SPACE FOR USER_FREE_SPACE;
GRANT SELECT ON USER_FREE_SPACE TO PUBLIC;



CREATE OR REPLACE VIEW DBA_PART_KEY_COLUMNS
(OWNER, NAME, OBJECT_TYPE, COLUMN_NAME, COLUMN_POSITION)
AS
SELECT /*+ no_merge */  U.NAME, O.NAME, 'TABLE', C.NAME, PC.POS_NO + 1
FROM    SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_PARTCOL PC, SYS._DD_USER U
WHERE   PC.OBJ_ID = O.OBJ_ID
  AND   C.OBJ_ID = O.OBJ_ID
  AND   PC.COL_NO = C.COL_NO
  AND   O.TYPE_NO = 1
  AND   O.OWNER_ID = U.USER_ID

UNION

SELECT  U.NAME, O.NAME, 'INDEX', C.NAME, PC.POS_NO + 1
FROM    SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_PARTCOL PC, SYS._DD_USER U,
        SYS._DD_IDX I
WHERE   PC.OBJ_ID = O.OBJ_ID
  AND   C.OBJ_ID = O.BO_ID
  AND   PC.COL_NO = C.COL_NO
  AND   O.TYPE_NO = 0
  AND   O.OBJ_ID = I.OBJ_ID AND I.TYPE_NO = 1
  AND   O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_PART_KEY_COLUMNS FOR DBA_PART_KEY_COLUMNS;

CREATE OR REPLACE VIEW ALL_PART_KEY_COLUMNS
(OWNER, NAME, OBJECT_TYPE, COLUMN_NAME, COLUMN_POSITION)
AS
SELECT /*+ no_merge */  U.NAME, O.NAME, 'TABLE', C.NAME, PC.POS_NO + 1
FROM    SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_PARTCOL PC, SYS._DD_USER U
WHERE   PC.OBJ_ID = O.OBJ_ID
  AND   C.OBJ_ID = O.OBJ_ID
  AND   PC.COL_NO = C.COL_NO
  AND   O.TYPE_NO = 1
  AND   O.OWNER_ID = U.USER_ID
  AND   (
            O.OWNER_ID = USERENV('SCHEMAID')
       OR   O.OWNER_ID = 1
       OR   EXISTS (SELECT NULL
                    FROM   (SELECT SAU2.PRIV_NO
                            FROM   SYS._DD_SYSAUTH SAU2
                            START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                            CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                           ) SAU
                    WHERE (SAU.PRIV_NO    = -483
                            OR SAU.PRIV_NO = -482
                            OR SAU.PRIV_NO = -481
                            OR SAU.PRIV_NO = -480
                            OR SAU.PRIV_NO = -485
                            OR SAU.PRIV_NO = -473
                            OR SAU.PRIV_NO IN (
                                  SELECT USER_ID FROM SYS._DD_USER
                                  WHERE NAME = 'DBA')
                           )
                   )
       OR   O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
        )

UNION

SELECT  U.NAME, O.NAME, 'INDEX', C.NAME, PC.POS_NO + 1
FROM    SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_PARTCOL PC, SYS._DD_USER U,
        SYS._DD_IDX I
WHERE   PC.OBJ_ID = O.OBJ_ID
  AND   C.OBJ_ID = O.BO_ID
  AND   PC.COL_NO = C.COL_NO
  AND   O.TYPE_NO = 0
  AND   O.OBJ_ID = I.OBJ_ID AND I.TYPE_NO = 1
  AND   O.OWNER_ID = U.USER_ID
  AND   (
            O.OWNER_ID = USERENV('SCHEMAID')
       OR   O.OWNER_ID = 1
       OR   EXISTS (SELECT NULL
                    FROM   (SELECT SAU2.PRIV_NO
                            FROM   SYS._DD_SYSAUTH SAU2
                            START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                            CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                           ) SAU
                    WHERE (SAU.PRIV_NO    = -483
                            OR SAU.PRIV_NO = -482
                            OR SAU.PRIV_NO = -481
                            OR SAU.PRIV_NO = -480
                            OR SAU.PRIV_NO = -485
                            OR SAU.PRIV_NO = -473
                            OR SAU.PRIV_NO IN (
                                  SELECT USER_ID FROM SYS._DD_USER
                                  WHERE NAME = 'DBA')
                           )
                   )
       OR   O.BO_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
        )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_PART_KEY_COLUMNS FOR ALL_PART_KEY_COLUMNS;
GRANT SELECT ON ALL_PART_KEY_COLUMNS TO PUBLIC;

CREATE OR REPLACE VIEW USER_PART_KEY_COLUMNS
(NAME, OBJECT_TYPE, COLUMN_NAME, COLUMN_POSITION)
AS
SELECT /*+ no_merge */  O.NAME, 'TABLE', C.NAME, PC.POS_NO + 1
FROM    SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_PARTCOL PC
WHERE   PC.OBJ_ID = O.OBJ_ID
  AND   C.OBJ_ID = O.OBJ_ID
  AND   PC.COL_NO = C.COL_NO
  AND   O.TYPE_NO = 1
  AND   O.OWNER_ID = USERENV('SCHEMAID')

UNION

SELECT  O.NAME, 'INDEX', C.NAME, PC.POS_NO + 1
FROM    SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_PARTCOL PC,
        SYS._DD_IDX I
WHERE   PC.OBJ_ID = O.OBJ_ID
  AND   C.OBJ_ID = O.BO_ID
  AND   PC.COL_NO = C.COL_NO
  AND   O.TYPE_NO = 0
  AND   O.OBJ_ID = I.OBJ_ID AND I.TYPE_NO = 1
  AND   O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_PART_KEY_COLUMNS FOR USER_PART_KEY_COLUMNS;
GRANT SELECT ON USER_PART_KEY_COLUMNS TO PUBLIC;



CREATE OR REPLACE VIEW DBA_SUBPART_KEY_COLUMNS
(OWNER, NAME, OBJECT_TYPE, COLUMN_NAME, COLUMN_POSITION)
AS
SELECT /*+ no_merge */  U.NAME, O.NAME, 'TABLE', C.NAME, SPC.POS_NO + 1
FROM    SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_SUBPARTCOL SPC, SYS._DD_USER U
WHERE   SPC.OBJ_ID = O.OBJ_ID
  AND   C.OBJ_ID = O.OBJ_ID
  AND   SPC.COL_NO = C.COL_NO
  AND   O.TYPE_NO = 1
  AND   O.OWNER_ID = U.USER_ID

UNION

SELECT  U.NAME, O.NAME, 'INDEX', C.NAME, SPC.POS_NO + 1
FROM    SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_SUBPARTCOL SPC, SYS._DD_USER U,
        SYS._DD_IDX I
WHERE   SPC.OBJ_ID = O.OBJ_ID
  AND   C.OBJ_ID = O.BO_ID
  AND   SPC.COL_NO = C.COL_NO
  AND   O.TYPE_NO = 0
  AND   O.OBJ_ID = I.OBJ_ID AND I.TYPE_NO = 1
  AND   O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_SUBPART_KEY_COLUMNS FOR DBA_SUBPART_KEY_COLUMNS;

CREATE OR REPLACE VIEW ALL_SUBPART_KEY_COLUMNS
(OWNER, NAME, OBJECT_TYPE, COLUMN_NAME, COLUMN_POSITION)
AS
SELECT /*+ no_merge */  U.NAME, O.NAME, 'TABLE', C.NAME, SPC.POS_NO + 1
FROM    SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_SUBPARTCOL SPC, SYS._DD_USER U
WHERE   SPC.OBJ_ID = O.OBJ_ID
  AND   C.OBJ_ID = O.OBJ_ID
  AND   SPC.COL_NO = C.COL_NO
  AND   O.TYPE_NO = 1
  AND   O.OWNER_ID = U.USER_ID
  AND   (
            O.OWNER_ID = USERENV('SCHEMAID')
       OR   O.OWNER_ID = 1
       OR   EXISTS (SELECT NULL
                    FROM   (SELECT SAU2.PRIV_NO
                            FROM   SYS._DD_SYSAUTH SAU2
                            START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                            CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                           ) SAU
                    WHERE (SAU.PRIV_NO    = -483
                            OR SAU.PRIV_NO = -482
                            OR SAU.PRIV_NO = -481
                            OR SAU.PRIV_NO = -480
                            OR SAU.PRIV_NO = -485
                            OR SAU.PRIV_NO = -473
                            OR SAU.PRIV_NO IN (
                                  SELECT USER_ID FROM SYS._DD_USER
                                  WHERE NAME = 'DBA')
                           )
                   )
       OR   O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
        )

UNION

SELECT  U.NAME, O.NAME, 'INDEX', C.NAME, SPC.POS_NO + 1
FROM    SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_SUBPARTCOL SPC, SYS._DD_USER U,
        SYS._DD_IDX I
WHERE   SPC.OBJ_ID = O.OBJ_ID
  AND   C.OBJ_ID = O.BO_ID
  AND   SPC.COL_NO = C.COL_NO
  AND   O.TYPE_NO = 0
  AND   O.OBJ_ID = I.OBJ_ID AND I.TYPE_NO = 1
  AND   O.OWNER_ID = U.USER_ID
  AND   (
            O.OWNER_ID = USERENV('SCHEMAID')
       OR   O.OWNER_ID = 1
       OR   EXISTS (SELECT NULL
                    FROM   (SELECT SAU2.PRIV_NO
                            FROM   SYS._DD_SYSAUTH SAU2
                            START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                            CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                           ) SAU
                    WHERE (SAU.PRIV_NO    = -483
                            OR SAU.PRIV_NO = -482
                            OR SAU.PRIV_NO = -481
                            OR SAU.PRIV_NO = -480
                            OR SAU.PRIV_NO = -485
                            OR SAU.PRIV_NO = -473
                            OR SAU.PRIV_NO IN (
                                  SELECT USER_ID FROM SYS._DD_USER
                                  WHERE NAME = 'DBA')
                           )
                   )
       OR   O.BO_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
        )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_SUBPART_KEY_COLUMNS FOR ALL_SUBPART_KEY_COLUMNS;
GRANT SELECT ON ALL_SUBPART_KEY_COLUMNS TO PUBLIC;

CREATE OR REPLACE VIEW USER_SUBPART_KEY_COLUMNS
(NAME, OBJECT_TYPE, COLUMN_NAME, COLUMN_POSITION)
AS

SELECT /*+ no_merge */  O.NAME, 'TABLE', C.NAME, SPC.POS_NO + 1
FROM    SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_SUBPARTCOL SPC
WHERE   SPC.OBJ_ID = O.OBJ_ID
  AND   C.OBJ_ID = O.OBJ_ID
  AND   SPC.COL_NO = C.COL_NO
  AND   O.TYPE_NO = 1
  AND   O.OWNER_ID = USERENV('SCHEMAID')

UNION

SELECT  O.NAME, 'INDEX', C.NAME, SPC.POS_NO + 1
FROM    SYS._DD_COL C, SYS._DD_OBJ O, SYS._DD_SUBPARTCOL SPC,
        SYS._DD_IDX I
WHERE   SPC.OBJ_ID = O.OBJ_ID
  AND   C.OBJ_ID = O.BO_ID
  AND   SPC.COL_NO = C.COL_NO
  AND   O.TYPE_NO = 0
  AND   O.OBJ_ID = I.OBJ_ID AND I.TYPE_NO = 1
  AND   O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_SUBPART_KEY_COLUMNS FOR USER_SUBPART_KEY_COLUMNS;
GRANT SELECT ON USER_SUBPART_KEY_COLUMNS TO PUBLIC;



CREATE OR REPLACE VIEW NLS_SESSION_PARAMETERS (
        PARAMETER,
        VALUE
        )
AS
SELECT /*+ no_merge */ NAME PARAMETER,
        VALUE
FROM    SYS._VT_PARAMETER
WHERE IS_HIDDEN = 0 AND BOUND = 'SESS' AND NAME LIKE '%NLS%'
;

CREATE OR REPLACE PUBLIC SYNONYM NLS_SESSION_PARAMETERS FOR NLS_SESSION_PARAMETERS;
GRANT SELECT ON NLS_SESSION_PARAMETERS TO PUBLIC;



CREATE OR REPLACE VIEW DBA_EXTENTS (
        OWNER,
        SEGMENT_NAME,
        PARTITION_NAME,
        SEGMENT_TYPE,
        TABLESPACE_NAME,
        EXTENT_ID,
        FILE_ID,
        BLOCK_ID,
        BYTES,
        BLOCKS,
        RELATIVE_FNO
        )
AS
SELECT /*+ no_merge */  U.NAME,
        O.NAME,
        O.SUBNAME,
        SO.OBJECT_TYPE,
        TABLESPACE_NAME,
        EXTENT_ID,
        FILE_ID,
        BLOCK_ID,
        BYTES,
        BLOCKS,
        RELATIVE_FNO
FROM    SYS._VT_DBA_EXTENTS E, SYS_OBJECTS SO, SYS._DD_OBJ O, SYS._DD_USER U
WHERE   E.SEGMENT_ID = SO.SEGMENT_ID
AND     SO.OBJECT_ID = O.OBJ_ID
AND     O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_EXTENTS FOR DBA_EXTENTS;

CREATE OR REPLACE VIEW USER_EXTENTS (
        SEGMENT_NAME,
        PARTITION_NAME,
        SEGMENT_TYPE,
        TABLESPACE_NAME,
        EXTENT_ID,
        BYTES,
        BLOCKS
        )
AS
SELECT /*+ no_merge */  SEGMENT_NAME,
        PARTITION_NAME,
        SEGMENT_TYPE,
        TABLESPACE_NAME,
        EXTENT_ID,
        BYTES,
        BLOCKS
FROM    DBA_EXTENTS
WHERE   OWNER = USERENV('SCHEMA')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_EXTENTS FOR USER_EXTENTS;
GRANT SELECT ON USER_EXTENTS TO PUBLIC;



CREATE OR REPLACE VIEW DBA_UNDO_EXTENTS (
        USGMT_ID,
        EXTNO,
        TS_ID,
        TS_NAME,
        FILE_ID,
        BLOCK_ID,
        BYTES,
        BLOCKS,
        STATUS,
        IS_CURRENT
        )
AS
SELECT  U.USGMT_ID,
        U.EXTNO,
        U.TS_ID,
        T.NAME,
        U.FILE_ID,
        U.BLOCK_ID,
        U.BYTES,
        U.BLKCNT,
        U.STATUS,
        U.IS_CURRENT
FROM    SYS._VT_DBA_UNDO_EXTENTS U, SYS._VT_TABLESPACE T
WHERE   U.TS_ID = T.TSNO
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_UNDO_EXTENTS FOR DBA_UNDO_EXTENTS;



CREATE OR REPLACE VIEW __DBA_TRIGGERS (
        OWNER,
        TRIGGER_NAME,
        TRIGGER_TYPE,
        TRIGGERING_EVENT,
        TABLE_OWNER,
        TABLE_NAME,
        REFERENCING_NAMES,
        WHEN_CLAUSE,
        STATUS,
        OBJ_ID,
        OWNER_ID
        )
AS
SELECT /*+ no_merge */  U.NAME,
        O.NAME,
        DECODE (T.TYPE_NO,
                0, 'BEFORE STATEMENT',
                1, 'AFTER STATEMENT',
                2, 'BEFORE EACH ROW',
                3, 'AFTER EACH ROW',
                4, 'INSTEAD OF',
                5, 'BEFORE DDL',
                6, 'AFTER DDL',
                7, 'BEFORE EVENT',
                8, 'AFTER EVENT',
                'ERROR'),
        SUBSTR (
                DECODE (BITAND (T.FIRE_STMT, 1),
                    0, '', ' OR INSERT') ||
                DECODE (BITAND (T.FIRE_STMT, 2),
                    0, '', ' OR DELETE') ||
                DECODE (BITAND (T.FIRE_STMT, 4),
                    0, '', ' OR UPDATE') ||
                DECODE (BITAND (T.FIRE_STMT, 8),
                    0, '', ' OR ALTER') ||
                DECODE (BITAND (T.FIRE_STMT, 16),
                    0, '', ' OR ANALYZE') ||
                DECODE (BITAND (T.FIRE_STMT,
                                32),
                    0, '', ' OR ASSOCIATE STATISTICS') ||
                DECODE (BITAND (T.FIRE_STMT, 64),
                    0, '', ' OR AUDIT') ||
                DECODE (BITAND (T.FIRE_STMT, 128),
                    0, '', ' OR COMMENT') ||
                DECODE (BITAND (T.FIRE_STMT, 256),
                    0, '', ' OR CREATE') ||
                DECODE (BITAND (T.FIRE_STMT,
                                512),
                    0, '', ' OR DISSASSOCIATE STATISTICS') ||
                DECODE (BITAND (T.FIRE_STMT, 1024),
                    0, '', ' OR DDL') ||
                DECODE (BITAND (T.FIRE_STMT, 2048),
                    0, '', ' OR DROP') ||
                DECODE (BITAND (T.FIRE_STMT, 4096),
                    0, '', ' OR GRANT') ||
                DECODE (BITAND (T.FIRE_STMT, 8192),
                    0, '', ' OR NOAUDIT') ||
                DECODE (BITAND (T.FIRE_STMT, 16384),
                    0, '', ' OR REVOKE') ||
                DECODE (BITAND (T.FIRE_STMT, 32768),
                    0, '', ' OR RENAME') ||
                DECODE (BITAND (T.FIRE_STMT, 65536),
                    0, '', ' OR TRUNCATE') ||
                DECODE (BITAND (T.FIRE_STMT, 131072),
                    0, '', ' OR SERVERERROR') ||
                DECODE (BITAND (T.FIRE_STMT, 262144),
                    0, '', ' OR LOGON') ||
                DECODE (BITAND (T.FIRE_STMT, 524288),
                    0, '', ' OR LOGOFF') ||
                DECODE (BITAND (T.FIRE_STMT, 1048576),
                    0, '', ' OR STARTUP') ||
                DECODE (BITAND (T.FIRE_STMT, 2097152),
                    0, '', ' OR SHUTDOWN') ||
                DECODE (BITAND (T.FIRE_STMT, 4194304),
                    0, '', ' OR SUSPEND') 
                , 5),
        BOU.NAME,
        DECODE (BO.NAME, O.NAME, '', BO.NAME),
        'REFERENCING NEW AS ' || T.REF_NEWNAME ||
        ' OLD AS ' || T.REF_OLDNAME ||
        DECODE (T.REF_PRTNAME, NULL, '', 'PUBLIC', '',
                ' PARENT AS ' || T.REF_PRTNAME),
        T.WHEN_CLAUSE,
        DECODE (T.ENABLED, 0, 'DISABLED', 'ENABLED'),
        O.OBJ_ID,
        U.USER_ID
FROM    SYS._DD_TRG T, SYS._DD_OBJ O, SYS._DD_USER U,
        SYS._DD_OBJ BO, SYS._DD_USER BOU
WHERE   T.OBJ_ID = O.OBJ_ID
  AND   O.OWNER_ID = U.USER_ID
  AND   (T.BO_ID = BO.OBJ_ID OR (T.OBJ_ID = BO.OBJ_ID 
                                 AND T.BO_ID = 4294967295)) 
  AND   BO.OWNER_ID = BOU.USER_ID
;

CREATE OR REPLACE VIEW DBA_TRIGGERS
AS
SELECT /*+ no_merge */  OWNER,
        TRIGGER_NAME,
        TRIGGER_TYPE,
        TRIGGERING_EVENT,
        TABLE_OWNER,
        TABLE_NAME,
        REFERENCING_NAMES,
        WHEN_CLAUSE,
        STATUS
FROM    __DBA_TRIGGERS
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TRIGGERS FOR DBA_TRIGGERS;

CREATE OR REPLACE VIEW USER_TRIGGERS
AS
SELECT /*+ no_merge */  TRIGGER_NAME,
        TRIGGER_TYPE,
        TRIGGERING_EVENT,
        TABLE_OWNER,
        TABLE_NAME,
        REFERENCING_NAMES,
        WHEN_CLAUSE,
        STATUS
FROM    __DBA_TRIGGERS
WHERE   OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TRIGGERS FOR USER_TRIGGERS;
GRANT SELECT ON USER_TRIGGERS TO PUBLIC;

CREATE OR REPLACE VIEW ALL_TRIGGERS
AS
SELECT /*+ no_merge */  OWNER,
        TRIGGER_NAME,
        TRIGGER_TYPE,
        TRIGGERING_EVENT,
        TABLE_OWNER,
        TABLE_NAME,
        REFERENCING_NAMES,
        WHEN_CLAUSE,
        STATUS
FROM    __DBA_TRIGGERS
WHERE   OWNER_ID = USERENV('SCHEMAID')
   OR   OWNER_ID = 1
   OR   EXISTS (SELECT NULL
                FROM   (SELECT SAU2.PRIV_NO
                        FROM   SYS._DD_SYSAUTH SAU2
                        START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                        CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                       ) SAU
                WHERE (SAU.PRIV_NO    = -483
                        OR SAU.PRIV_NO = -482
                        OR SAU.PRIV_NO = -481
                        OR SAU.PRIV_NO = -480
                        OR SAU.PRIV_NO = -485
                        OR SAU.PRIV_NO = -473
                        OR SAU.PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
               )
   OR   OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TRIGGERS FOR ALL_TRIGGERS;
GRANT SELECT ON ALL_TRIGGERS TO PUBLIC;



CREATE OR REPLACE VIEW __DBA_PROCEDURES (
        OWNER,
        OBJECT_NAME,
        PROCEDURE_NAME,
        AGGREGATE,
        PIPELINED,
        IMPLTYPEOWNER,
        IMPLTYPENAME,
        PARALLEL,
        INTERFACE,
        DETERMINISTIC,
        FUNCTIONABLE,
        WRAPPED, 
        AUTHID,
        MEMBER_NO,
        OBJ_ID,
        OWNER_ID
        )
AS
SELECT /*+ no_merge */  U.NAME,
        O.NAME,
        DECODE (O.TYPE_NO, 7, M.NAME, NULL),
        'NO',
        'NO',
        '',
        '',
        'NO',
        'NO',
        DECODE (BITAND (P.PROPERTY, 2048), 
                0, 'NO', 'YES'),
        DECODE (M.KIND, 51, 'YES', 'NO'),
        'NO',
        DECODE (BITAND (P.PROPERTY, 1),
                0, 'DEFINER', 'INVOKER'),
        DECODE (O.TYPE_NO, 7, M.MEMBER_NO, 1),
        O.OBJ_ID,
        U.USER_ID
FROM    SYS._DD_PSMUNIT P, SYS._DD_OBJ O, SYS._DD_USER U,
        SYS._DD_PSMMEMBER M
WHERE   P.OBJ_ID = O.OBJ_ID
  AND   O.OWNER_ID = U.USER_ID
  AND   P.OBJ_ID = M.OBJ_ID
  AND   (M.KIND = 50 OR
         M.KIND = 51)
;

CREATE OR REPLACE VIEW DBA_PROCEDURES
AS
SELECT /*+ no_merge */  OWNER,
        OBJECT_NAME,
        PROCEDURE_NAME,
        AGGREGATE,
        PIPELINED,
        IMPLTYPEOWNER,
        IMPLTYPENAME,
        PARALLEL,
        INTERFACE,
        DETERMINISTIC,
        FUNCTIONABLE,
        WRAPPED,
        AUTHID,
        MEMBER_NO
FROM    __DBA_PROCEDURES
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_PROCEDURES FOR DBA_PROCEDURES;

CREATE OR REPLACE VIEW USER_PROCEDURES
AS
SELECT /*+ no_merge */  OBJECT_NAME,
        PROCEDURE_NAME,
        AGGREGATE,
        PIPELINED,
        IMPLTYPEOWNER,
        IMPLTYPENAME,
        PARALLEL,
        INTERFACE,
        DETERMINISTIC,
        FUNCTIONABLE,
        WRAPPED,
        AUTHID,
        MEMBER_NO
FROM    __DBA_PROCEDURES
WHERE   OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_PROCEDURES FOR USER_PROCEDURES;
GRANT SELECT ON USER_PROCEDURES TO PUBLIC;

CREATE OR REPLACE VIEW ALL_PROCEDURES
AS
SELECT /*+ no_merge */  OWNER,
        OBJECT_NAME,
        PROCEDURE_NAME,
        AGGREGATE,
        PIPELINED,
        IMPLTYPEOWNER,
        IMPLTYPENAME,
        PARALLEL,
        INTERFACE,
        DETERMINISTIC,
        FUNCTIONABLE,
        WRAPPED,
        AUTHID,
        MEMBER_NO
FROM    __DBA_PROCEDURES
WHERE   OWNER_ID = USERENV('SCHEMAID')
   OR   OWNER_ID = 1
   OR   EXISTS (SELECT NULL
                FROM   (SELECT SAU2.PRIV_NO
                        FROM   SYS._DD_SYSAUTH SAU2
                        START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                        CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                       ) SAU
                WHERE (SAU.PRIV_NO    = -483
                        OR SAU.PRIV_NO = -482
                        OR SAU.PRIV_NO = -481
                        OR SAU.PRIV_NO = -480
                        OR SAU.PRIV_NO = -485
                        OR SAU.PRIV_NO = -473
                        OR SAU.PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
               )
   OR   OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_PROCEDURES FOR ALL_PROCEDURES;
GRANT SELECT ON ALL_PROCEDURES TO PUBLIC;


CREATE OR REPLACE VIEW __DBA_TYPES (
        "OWNER",
        "TYPE_NAME",
        "TYPE_OID",
        "TYPECODE",
        "ATTRIBUTES",
        "METHODS",
        "PREDEFINED",
        "INCOMPLETE",
        "FINAL",
        "INSTANTIABLE",
        "SUPERTYPE_OWNER",
        "SUPERTYPE_NAME",
        "LOCAL_ATTRIBUTES",
        "LOCAL_METHODS",
        "TYPEID",
        "OBJ_ID",
        "OWNER_ID"
        )  
AS 
SELECT 
        T1.OWNER, 
        T1.TYPE_NAME,
        T1.TYPE_OID,
        'OBJECT',
        DECODE (T1."ATTRIBUTES", NULL, 0, T1."ATTRIBUTES"),
        DECODE (T2."METHODS", NULL, 0, T2."METHODS"),
        CAST ('NO' AS VARCHAR(3)),
        CAST ('NO' AS VARCHAR(3)),
        DECODE (BITAND(T1.PROPERTY , 1), 
                0, 'NO', 'YES'), 
        DECODE (BITAND(T1.PROPERTY , 4), 
                0, 'NO', 'YES'), 
        T1.SUPERTYPE_OWNER,
        T1.SUPERTYPE_NAME, 
        DECODE (BITAND(T1.PROPERTY , 2), 
                0, NULL, T1.LOCAL_ATTRIBUTES), 
        DECODE (BITAND(T1.PROPERTY , 2), 
                0, NULL, T2.LOCAL_METHODS), 
        T1.TYPE_TYPEID,
        T1.OBJ_ID, 
        T1.OWNER_ID
FROM 
(
SELECT  U1.NAME "OWNER",
        O1.NAME "TYPE_NAME",
        P1.PROPERTY "PROPERTY",
        TY1.TOID "TYPE_OID",
        TY1.PROPERTY "TYPE_PROPERTY",
        TY1.TYPEID "TYPE_TYPEID",
        COUNT(M1.MEMBER_NO) "ATTRIBUTES",
        SUM(DECODE(BITAND(M1.PROPERTY, 1073741824), 
                   0, 1, 0)) "LOCAL_ATTRIBUTES",
        SO.NAME "SUPERTYPE_NAME",
        SU_USER.NAME "SUPERTYPE_OWNER",
        O1.OBJ_ID "OBJ_ID",
        O1.OWNER_ID "OWNER_ID"

FROM    SYS._DD_PSMUNIT P1, SYS._DD_OBJ O1, SYS._DD_USER U1,
        SYS._DD_PSMMEMBER M1, SYS._DD_TYPE TY1, 
        SYS._DD_TYPE SUPER, SYS._DD_USER SU_USER,
        SYS._DD_OID SU_OID, SYS._DD_OBJ SO
                
WHERE   P1.OBJ_ID = O1.OBJ_ID
  AND   P1.OBJ_ID = TY1.TOBJ_ID
  AND   O1.OWNER_ID = U1.USER_ID
  AND   O1.TYPE_NO = 22
  AND   O1.OBJ_ID = M1.OBJ_ID
  AND   M1.KIND = 10 
  AND   TY1.SUPERTOID = SUPER.TOID (+)
  AND   SUPER.TOID = SU_OID.OID (+)
  AND   SUPER.TOBJ_ID = SO.OBJ_ID (+)
  AND   SO.OWNER_ID = SU_USER.USER_ID (+)

GROUP BY
    U1.NAME, O1.NAME, P1.PROPERTY, O1.OBJ_ID, O1.OWNER_ID, 
    TY1.PROPERTY, TY1.TOID, TY1.TYPEID, SU_USER.NAME, SO.NAME 
) T1 
FULL OUTER JOIN
( 
SELECT  U2.NAME "OWNER",
        O2.NAME "TYPE_NAME",
        P2.PROPERTY "PROPERTY",
        COUNT(M2.MEMBER_NO) "METHODS",
        SUM(DECODE(BITAND(M2.PROPERTY, 1073741824), 
                   0, 1, 0)) "LOCAL_METHODS",
        O2.OBJ_ID "OBJ_ID",
        O2.OWNER_ID "OWNER_ID"
FROM    SYS._DD_PSMUNIT P2, SYS._DD_OBJ O2, SYS._DD_USER U2,
        SYS._DD_PSMMEMBER M2
WHERE   P2.OBJ_ID = O2.OBJ_ID
  AND   O2.OWNER_ID = U2.USER_ID
  AND   O2.TYPE_NO = 22
  AND   O2.OBJ_ID = M2.OBJ_ID
  AND   M2.KIND IN (50, 
                    51, 
                    52, 
                    53, 
                    54)
GROUP BY
    U2.NAME, O2.NAME, P2.PROPERTY, O2.OBJ_ID, O2.OWNER_ID
) T2
ON 
     T1.OBJ_ID = T2.OBJ_ID

UNION ALL

SELECT 
        T.OWNER, 
        T.TYPE_NAME,
        T.TYPE_OID,
        'COLLECTION', 
        0,
        0,
        'NO',
        'NO',
        'NO',
        'NO',
        NULL,
        NULL,
        NULL,
        NULL,
        NULL, 
        T.OBJ_ID, 
        T.OWNER_ID
FROM 
(
SELECT  U.NAME "OWNER",
        O.NAME "TYPE_NAME",
        COL.TOID "TYPE_OID",
        O.OBJ_ID "OBJ_ID",
        O.OWNER_ID "OWNER_ID"
FROM    SYS._DD_OBJ O, SYS._DD_USER U, 
        SYS._DD_COLLECTION COL
WHERE   COL.TOBJ_ID = O.OBJ_ID
  AND   O.OWNER_ID = U.USER_ID
  AND   O.TYPE_NO = 22
) T 
;

CREATE OR REPLACE VIEW DBA_TYPES
AS
SELECT  "OWNER",
        "TYPE_NAME",
        "TYPE_OID",
        "TYPECODE",
        "ATTRIBUTES",
        "METHODS",
        "PREDEFINED",
        "INCOMPLETE",
        "FINAL",
        "INSTANTIABLE",
        "SUPERTYPE_OWNER",
        "SUPERTYPE_NAME",
        "LOCAL_ATTRIBUTES",
        "LOCAL_METHODS",
        "TYPEID"
FROM    __DBA_TYPES
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TYPES FOR DBA_TYPES;


CREATE OR REPLACE VIEW USER_TYPES
AS
SELECT  "TYPE_NAME",
        "TYPE_OID",
        "TYPECODE",
        "ATTRIBUTES",
        "METHODS",
        "PREDEFINED",
        "INCOMPLETE",
        "FINAL",
        "INSTANTIABLE",
        "SUPERTYPE_OWNER",
        "SUPERTYPE_NAME",
        "LOCAL_ATTRIBUTES",
        "LOCAL_METHODS",
        "TYPEID"
FROM    __DBA_TYPES
WHERE   OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TYPES FOR USER_TYPES;
GRANT SELECT ON USER_TYPES TO PUBLIC;

CREATE OR REPLACE VIEW ALL_TYPES
AS
SELECT  "OWNER", 
        "TYPE_NAME",
        "TYPE_OID",
        "TYPECODE",
        "ATTRIBUTES",
        "METHODS",
        "PREDEFINED",
        "INCOMPLETE",
        "FINAL",
        "INSTANTIABLE",
        "SUPERTYPE_OWNER",
        "SUPERTYPE_NAME",
        "LOCAL_ATTRIBUTES",
        "LOCAL_METHODS",
        "TYPEID"
FROM    __DBA_TYPES
WHERE   OWNER_ID = USERENV('SCHEMAID')
   OR   OWNER_ID = 1
   OR   EXISTS (SELECT NULL
                FROM   (SELECT SAU2.PRIV_NO
                        FROM   SYS._DD_SYSAUTH SAU2
                        START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                        CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                       ) SAU
                WHERE (SAU.PRIV_NO    = -483
                        OR SAU.PRIV_NO = -482
                        OR SAU.PRIV_NO = -481
                        OR SAU.PRIV_NO = -480
                        OR SAU.PRIV_NO = -485
                        OR SAU.PRIV_NO = -473
                        OR SAU.PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
               )
   OR   OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TYPES FOR ALL_TYPES;
GRANT SELECT ON ALL_TYPES TO PUBLIC;


CREATE OR REPLACE VIEW __DBA_TYPE_METHODS (
        "OWNER", 
        "TYPE_NAME", 
        "METHOD_NAME",
        "METHOD_NO",
        "METHOD_TYPE",
        "PARAMETERS",
        "RESULTS",
        "FINAL",
        "INSTANTIABLE",
        "OVERRIDING",
        "INHERITED",
        "STATIC",
        "CONSTRUCTOR",
        "OBJ_ID",
        "OWNER_ID"
)
AS
SELECT  U.NAME,
        O.NAME,
        M.NAME,
        M.MEMBER_NO  - MIN(M1.MEMBER_NO) + 1,  
        CAST (
        DECODE (M.KIND, 
                52, 'MAP', 
                53, 'ORDER', 'PUBLIC') 
        AS VARCHAR(11)),
        DECODE (M.KIND, 
                52, M.COL_CNT - 1, 
                53, M.COL_CNT - 1, 
                51, M.COL_CNT - 1, 
                54, M.COL_CNT - 1, M.COL_CNT), 
        DECODE (M.KIND, 
                51, 'YES', 
                52, 'YES', 
                53, 'YES', 
                54, 'YES', 'NO'),
        CAST ('NO' AS VARCHAR(3)),
        CAST ('YES' AS VARCHAR(3)),
        CAST ('NO' AS VARCHAR(3)),
        CAST ('NO' AS VARCHAR(3)),
        DECODE (M.PROPERTY, 268435456, 'YES', 'NO'),
        DECODE (M.KIND, 54, 'YES', 'NO'),
        O.OBJ_ID, 
        O.OWNER_ID
FROM    SYS._DD_PSMUNIT P, SYS._DD_OBJ O, SYS._DD_USER U, 
        SYS._DD_PSMMEMBER M, SYS._DD_PSMMEMBER M1
WHERE   P.OBJ_ID = O.OBJ_ID
  AND   O.OWNER_ID = U.USER_ID
  AND   O.TYPE_NO = 22
  AND   BITAND(P.PROPERTY , 134217728) <> 0 
  AND   M.OBJ_ID = O.OBJ_ID
  AND   M.OBJ_ID = M1.OBJ_ID 
  AND   M.KIND IN (50, 51, 
                   52, 53, 
                   54)
  AND   M1.KIND IN (50, 51, 
                    52, 53, 
                    54)
GROUP BY 
    U.NAME, O.NAME, M.NAME, M.MEMBER_NO, 
    M.KIND, M.PROPERTY, M.COL_CNT, O.OBJ_ID, O.OWNER_ID;

CREATE OR REPLACE VIEW DBA_TYPE_METHODS
AS
SELECT  "OWNER", 
        "TYPE_NAME", 
        "METHOD_NAME",
        "METHOD_NO",
        "METHOD_TYPE",
        "PARAMETERS",
        "RESULTS",
        "FINAL",
        "INSTANTIABLE",
        "OVERRIDING",
        "INHERITED"
        "STATIC",
        "CONSTRUCTOR"
FROM    __DBA_TYPE_METHODS
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TYPE_METHODS FOR DBA_TYPE_METHODS;

CREATE OR REPLACE VIEW USER_TYPE_METHODS
AS
SELECT  "TYPE_NAME", 
        "METHOD_NAME",
        "METHOD_NO",
        "METHOD_TYPE",
        "PARAMETERS",
        "RESULTS",
        "FINAL",
        "INSTANTIABLE",
        "OVERRIDING",
        "INHERITED",
        "STATIC",
        "CONSTRUCTOR"
FROM    __DBA_TYPE_METHODS
WHERE   OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TYPE_METHODS FOR USER_TYPE_METHODS;
GRANT SELECT ON USER_TYPE_METHODS TO PUBLIC;

CREATE OR REPLACE VIEW ALL_TYPE_METHODS
AS
SELECT  "OWNER", 
        "TYPE_NAME", 
        "METHOD_NAME",
        "METHOD_NO",
        "METHOD_TYPE",
        "PARAMETERS",
        "RESULTS",
        "FINAL",
        "INSTANTIABLE",
        "OVERRIDING",
        "INHERITED",
        "STATIC",
        "CONSTRUCTOR"
FROM    __DBA_TYPE_METHODS
WHERE   OWNER_ID = USERENV('SCHEMAID')
   OR   OWNER_ID = 1
   OR   EXISTS (SELECT NULL
                FROM   (SELECT SAU2.PRIV_NO
                        FROM   SYS._DD_SYSAUTH SAU2
                        START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                        CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                       ) SAU
                WHERE (SAU.PRIV_NO    = -483
                        OR SAU.PRIV_NO = -482
                        OR SAU.PRIV_NO = -481
                        OR SAU.PRIV_NO = -480
                        OR SAU.PRIV_NO = -485
                        OR SAU.PRIV_NO = -473
                        OR SAU.PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
               )
   OR   OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TYPE_METHODS FOR ALL_TYPE_METHODS;
GRANT SELECT ON ALL_TYPE_METHODS TO PUBLIC;


CREATE OR REPLACE VIEW __DBA_TYPE_ATTRS (
    "OWNER",
    "TYPE_NAME",
    "ATTR_NAME",
    "ATTR_TYPE_MOD",
    "ATTR_TYPE_OWNER",
    "ATTR_TYPE_NAME",
    "LENGTH",
    "PRECISION",
    "SCALE",
    "CHARACTER_SET_NAME",
    "ATTR_NO",
    "INHERITED",
    "OBJ_ID", 
    "OWNER_ID"
) 
AS
SELECT 
    U1.NAME,
    O1.NAME,
    M1.NAME,
    CAST (NULL AS VARCHAR(7)), 
    DECODE(T1.TYPE_NO, 29, U2.NAME, 30, U2.NAME,
           32, U2.NAME, NULL),
    CAST (
    DECODE(T1.TYPE_NO,
           1, 'NUMBER',
           2, 'CHAR',
           3, 'VARCHAR',
           4, 'RAW',
           5, 'DATE',
           6, 'TIME(' ||T1.SCALE|| ')',
           7, 'TIMESTAMP('||T1.SCALE||')',
           8, 'INTERVAL YEAR(' ||T1.PRECISION||') TO MONTH',
           9, 'INTERVAL DAY(' ||T1.PRECISION||') TO SECOND(' || T1.SCALE || ')',
           10, 'LONG',
           11, 'LONG RAW',
           12, 'BLOB',
           13, 'CLOB',
           14, 'BFILE',
           15, 'ROWID',
           18, 'NCHAR',
           19, 'NVARCHAR',
           20, 'NCLOB',
           21, 'TIMESTAMP('||T1.SCALE||') WITH TIME ZONE',
           22, 'TIMESTAMP('||T1.SCALE||') WITH LOCAL TIME ZONE',
           23, 'BINARY_FLOAT',
           24, 'BINARY_DOUBLE',
           16, 'REF CURSOR',
           17, 'UNKNOWN',
           -- PSM types 
           25, 'BOOLEAN',
           26, 'PLS_INTEGER',
           27, 'BINARY_INTEGER',
           29, O2.NAME,
           30, O2.NAME,
           32, O2.NAME, 'UNDEFINED')
           AS VARCHAR(128)),

    DECODE(T1.TYPE_NO,
           2,
           DECODE(T1.PRECISION, 0, 2000, T1.PRECISION),
           3,
           DECODE(T1.PRECISION, 0, 65532, T1.PRECISION),
           4,
           DECODE(T1.PRECISION, 0, 32767, T1.PRECISION),
           10,
           DECODE(T1.PRECISION, 0, 32760, T1.PRECISION),
           11,
           DECODE(T1.PRECISION, 0, 32760, T1.PRECISION),
           TO_NUMBER(NULL)),
    DECODE(T1.TYPE_NO, 2, TO_NUMBER(NULL), 
           3, TO_NUMBER(NULL), 4, TO_NUMBER(NULL), 
           10, TO_NUMBER(NULL), 11, TO_NUMBER(NULL),
           DECODE (T1.PRECISION, 38, TO_NUMBER(NULL), 
                   -128, TO_NUMBER(NULL), T1.PRECISION)),
    DECODE(T1.TYPE_NO, 2, TO_NUMBER(NULL), 
           3, TO_NUMBER(NULL), 4, TO_NUMBER(NULL), 
           10, TO_NUMBER(NULL), 11, TO_NUMBER(NULL),
           CASE WHEN T1.SCALE = -128 THEN NULL ELSE T1.SCALE END), 
    CAST (NULL AS VARCHAR(128)),
    M1.MEMBER_NO, 
    DECODE(BITAND(M1.PROPERTY, 1073741824), 0, 'NO', 'YES'),  
    O1.OBJ_ID ,
    O1.OWNER_ID
FROM    SYS._DD_PSMUNIT P1, SYS._DD_OBJ O1, SYS._DD_USER U1, 
        SYS._DD_PSMMEMBER M1, SYS._DD_PSMTDEF T1,
        SYS._DD_OBJ O2, SYS._DD_USER U2
WHERE   P1.OBJ_ID = O1.OBJ_ID
  AND   O1.OWNER_ID = U1.USER_ID
  AND   O1.TYPE_NO = 22 
  AND   BITAND(P1.PROPERTY , 134217728) <> 0 
  AND   M1.OBJ_ID = O1.OBJ_ID
  AND   M1.KIND = 10 
  AND   M1.OBJ_ID = T1.OBJ_ID
  AND   M1.MEMBER_NO = T1.MEMBER_NO
  AND   T1.META_OBJ_ID = O2.OBJ_ID(+)
  AND   O2.OWNER_ID = U2.USER_ID (+)
;

CREATE OR REPLACE VIEW DBA_TYPE_ATTRS
AS
SELECT  "OWNER",
        "TYPE_NAME",
        "ATTR_NAME",
        "ATTR_TYPE_MOD",
        "ATTR_TYPE_OWNER",
        "ATTR_TYPE_NAME",
        "LENGTH",
        "PRECISION",
        "SCALE",
        "CHARACTER_SET_NAME",
        "ATTR_NO",
        "INHERITED"
FROM    __DBA_TYPE_ATTRS
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TYPE_ATTRS FOR DBA_TYPE_ATTRS;

CREATE OR REPLACE VIEW USER_TYPE_ATTRS
AS
SELECT  "TYPE_NAME",
        "ATTR_NAME",
        "ATTR_TYPE_MOD",
        "ATTR_TYPE_OWNER",
        "ATTR_TYPE_NAME",
        "LENGTH",
        "PRECISION",
        "SCALE",
        "CHARACTER_SET_NAME",
        "ATTR_NO",
        "INHERITED"
FROM    __DBA_TYPE_ATTRS
WHERE   OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TYPE_ATTRS FOR USER_TYPE_ATTRS;
GRANT SELECT ON USER_TYPE_ATTRS TO PUBLIC;

CREATE OR REPLACE VIEW ALL_TYPE_ATTRS
AS
SELECT  "OWNER",
        "TYPE_NAME",
        "ATTR_NAME",
        "ATTR_TYPE_MOD",
        "ATTR_TYPE_OWNER",
        "ATTR_TYPE_NAME",
        "LENGTH",
        "PRECISION",
        "SCALE",
        "CHARACTER_SET_NAME",
        "ATTR_NO",
        "INHERITED"
FROM    __DBA_TYPE_ATTRS
WHERE   OWNER_ID = USERENV('SCHEMAID')
   OR   OWNER_ID = 1
   OR   EXISTS (SELECT NULL
                FROM   (SELECT SAU2.PRIV_NO
                        FROM   SYS._DD_SYSAUTH SAU2
                        START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                        CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                       ) SAU
                WHERE (SAU.PRIV_NO    = -483
                        OR SAU.PRIV_NO = -482
                        OR SAU.PRIV_NO = -481
                        OR SAU.PRIV_NO = -480
                        OR SAU.PRIV_NO = -485
                        OR SAU.PRIV_NO = -473
                        OR SAU.PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
               )
   OR   OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TYPE_ATTRS FOR ALL_TYPE_ATTRS;
GRANT SELECT ON ALL_TYPE_ATTRS TO PUBLIC;



CREATE OR REPLACE VIEW __DBA_COLL_TYPES (
    "OWNER",
    "TYPE_NAME",
    "COLL_TYPE",
    "UPPER_BOUND",
    "ELEM_TYPE_MOD",
    "ELEM_TYPE_OWNER",
    "ELEM_TYPE_NAME",
    "LENGTH",
    "PRECISION",
    "SCALE",
    "CHARACTER_SET_NAME",
    "ELEM_STORAGE",
    "NULLS_STORED", 
    "OWNER_ID",
    "OBJ_ID" 
)
AS
SELECT 
    U1.NAME,
    O1.NAME,
    DECODE(BITAND(C1.PROPERTY, 1), 0, 'TABLE', 'VARYING ARRAY'), 
    DECODE(BITAND(C1.PROPERTY, 1), 0, NULL, C1.UPPER_BOUND), 
    CAST(NULL AS VARCHAR(7)),
    CAST (DECODE(C1.TYPE_NO, 29, U2.NAME, 30, U2.NAME, 
           32, U2.NAME, NULL) AS VARCHAR(128)),
    DECODE(C1.TYPE_NO,
           1, 'NUMBER',
           2, 'CHAR',
           3, 'VARCHAR',
           4, 'RAW',
           5, 'DATE',
           6, 'TIME(' ||C1.SCALE|| ')',
           7, 'TIMESTAMP('||C1.SCALE||')',
           8, 'INTERVAL YEAR(' ||C1.PRECISION||') TO MONTH',
           9, 'INTERVAL DAY(' ||C1.PRECISION||') TO SECOND(' || C1.SCALE || ')',
           10, 'LONG',
           11, 'LONG RAW',
           12, 'BLOB',
           13, 'CLOB',
           14, 'BFILE',
           15, 'ROWID',
           18, 'NCHAR',
           19, 'NVARCHAR',
           20, 'NCLOB',
           21, 'TIMESTAMP('||C1.SCALE||') WITH TIME ZONE',
           22, 'TIMESTAMP('||C1.SCALE||') WITH LOCAL TIME ZONE',
           23, 'BINARY_FLOAT',
           24, 'BINARY_DOUBLE',
           16, 'REF CURSOR',
           17, 'UNKNOWN',
           -- PSM types 
           25, 'BOOLEAN',
           26, 'PLS_INTEGER',
           27, 'BINARY_INTEGER',
           29, O2.NAME,
           30, O2.NAME,
           32, O2.NAME, 'UNDEFINED'),
    TO_NUMBER(NULL),
    DECODE(C1.TYPE_NO,
           29, NULL,
           30, NULL,
           32, NULL,
           DECODE(C1.PRECISION, 38, TO_NUMBER(NULL),
                  -128, TO_NUMBER(NULL), C1.PRECISION)),
    DECODE(C1.TYPE_NO,
           29, NULL,
           30, NULL,
           32, NULL,
           CASE WHEN C1.SCALE = -128 THEN TO_NUMBER(NULL) ELSE C1.SCALE END),
    CAST(NULL AS VARCHAR(128)), 
    TO_NUMBER(NULL), 
    CAST(NULL AS VARCHAR(3)), 
    O1.OWNER_ID,
    O1.OBJ_ID
FROM  SYS._DD_OBJ O1, SYS._DD_USER U1, SYS._DD_COLLECTION C1, SYS._DD_OID OID, 
      SYS._DD_OBJ O2, SYS._DD_USER U2
WHERE C1.TOBJ_ID = O1.OBJ_ID
  AND O1.OWNER_ID = U1.USER_ID
  AND O1.TYPE_NO = 22 
  AND C1.ELEM_TOID = OID.OID (+)
  AND OID.OBJ_ID = O2.OBJ_ID (+)
  AND O2.OWNER_ID = U2.USER_ID (+);

CREATE OR REPLACE VIEW DBA_COLL_TYPES
AS
SELECT  "OWNER",
        "TYPE_NAME",
        "COLL_TYPE",
        "UPPER_BOUND",
        "ELEM_TYPE_MOD",
        "ELEM_TYPE_OWNER",
        "ELEM_TYPE_NAME",
        "LENGTH",
        "PRECISION",
        "SCALE",
        "CHARACTER_SET_NAME",
        "ELEM_STORAGE",
        "NULLS_STORED" 
FROM    __DBA_COLL_TYPES
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_COLL_TYPES FOR DBA_COLL_TYPES;


CREATE OR REPLACE VIEW USER_COLL_TYPES
AS
SELECT  "TYPE_NAME",
        "COLL_TYPE",
        "UPPER_BOUND",
        "ELEM_TYPE_MOD",
        "ELEM_TYPE_OWNER",
        "ELEM_TYPE_NAME",
        "LENGTH",
        "PRECISION",
        "SCALE",
        "CHARACTER_SET_NAME",
        "ELEM_STORAGE",
        "NULLS_STORED" 
FROM    __DBA_COLL_TYPES
WHERE   OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_COLL_TYPES FOR USER_COLL_TYPES;
GRANT SELECT ON USER_COLL_TYPES TO PUBLIC;

CREATE OR REPLACE VIEW ALL_COLL_TYPES
AS
SELECT  "OWNER",
        "TYPE_NAME",
        "COLL_TYPE",
        "UPPER_BOUND",
        "ELEM_TYPE_MOD",
        "ELEM_TYPE_OWNER",
        "ELEM_TYPE_NAME",
        "LENGTH",
        "PRECISION",
        "SCALE",
        "CHARACTER_SET_NAME",
        "ELEM_STORAGE",
        "NULLS_STORED" 
FROM    __DBA_COLL_TYPES
WHERE   OWNER_ID = USERENV('SCHEMAID')
   OR   OWNER_ID = 1
   OR   EXISTS (SELECT NULL
                FROM   (SELECT SAU2.PRIV_NO
                        FROM   SYS._DD_SYSAUTH SAU2
                        START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                        CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                       ) SAU
                WHERE (SAU.PRIV_NO    = -483
                        OR SAU.PRIV_NO = -482
                        OR SAU.PRIV_NO = -481
                        OR SAU.PRIV_NO = -480
                        OR SAU.PRIV_NO = -485
                        OR SAU.PRIV_NO = -473
                        OR SAU.PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
               )
   OR   OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_COLL_TYPES FOR ALL_COLL_TYPES;
GRANT SELECT ON ALL_COLL_TYPES TO PUBLIC;



CREATE OR REPLACE VIEW __DBA_METHOD_PARAMS ( 
"OWNER",
"TYPE_NAME",
"METHOD_NAME",
"METHOD_NO",
"PARAM_NAME",
"PARAM_NO",
"PARAM_MODE",
"PARAM_TYPE_MOD",
"PARAM_TYPE_OWNER",
"PARAM_TYPE_NAME",
"CHARACTER_SET_NAME",
"OBJ_ID", 
"OWNER_ID"
)
AS
SELECT  
    U1.NAME ,
    O1.NAME ,  
    M1.NAME ,
    M1.MEMBER_NO  - MIN(M2.MEMBER_NO) + 1, 
    T1.NAME , 
    T1.POS_NO , 
    DECODE(BITAND(T1.PROPERTY, 3), 
           1, 'IN', 2, 'OUT', 3, 'IN/OUT', 'UNDEFINED') ,
    NULL , 
    DECODE(T1.TYPE_NO, 
           29, U2.NAME, 
           30, U2.NAME, 
           32, U2.NAME, NULL),
    DECODE(T1.TYPE_NO,
           1, 'NUMBER',
           2, 'CHAR',
           3, 'VARCHAR',
           4, 'RAW',
           5, 'DATE',
           6, 'TIME(' ||T1.SCALE|| ')',
           7, 'TIMESTAMP('||T1.SCALE||')',
           8, 'INTERVAL YEAR(' ||T1.PRECISION||') TO MONTH',
           9, 'INTERVAL DAY(' ||T1.PRECISION||') TO SECOND(' || T1.SCALE || ')',
           10, 'LONG',
           11, 'LONG RAW',
           12, 'BLOB',
           13, 'CLOB',
           14, 'BFILE',
           15, 'ROWID',
           18, 'NCHAR',
           19, 'NVARCHAR',
           20, 'NCLOB',
           21, 'TIMESTAMP('||T1.SCALE||') WITH TIME ZONE',
           22, 'TIMESTAMP('||T1.SCALE||') WITH LOCAL TIME ZONE',
           23, 'BINARY_FLOAT',
           24, 'BINARY_DOUBLE',
           16, 'REF CURSOR',
           17, 'UNKNOWN',
           -- PSM types 
           25, 'BOOLEAN',
           26, 'PLS_INTEGER',
           27, 'BINARY_INTEGER',
           29, O2.NAME,
           30, O2.NAME,
           32, O2.NAME,
           'UNDEFINED') ,
        NULL , 
        O1.OBJ_ID, 
        U1.USER_ID
FROM    SYS._DD_PSMUNIT P1, SYS._DD_OBJ O1, SYS._DD_USER U1,
        SYS._DD_PSMMEMBER M1, SYS._DD_PSMMEMBER M2, 
        SYS._DD_PSMTDEF T1, SYS._DD_OBJ O2, SYS._DD_USER U2
WHERE   
        P1.OBJ_ID = O1.OBJ_ID 
  AND   O1.OWNER_ID = U1.USER_ID 
  AND   O1.TYPE_NO = 22 
  AND   BITAND(P1.PROPERTY , 134217728) <> 0 
  AND   O1.OBJ_ID = M1.OBJ_ID
  AND   O1.OBJ_ID = M2.OBJ_ID
  AND   M1.KIND IN (50, 
                    51, 
                    52, 
                    53, 
                    54)
  AND   M2.KIND IN (50, 
                    51, 
                    52, 
                    53, 
                    54)
  AND   T1.MEMBER_NO = M1.MEMBER_NO
  AND   P1.OBJ_ID = T1.OBJ_ID
  AND   T1.POS_NO > 0
  AND   T1.META_OBJ_ID = O2.OBJ_ID (+) 
  AND   O2.OWNER_ID = U2.USER_ID (+) 
GROUP BY 
    U1.NAME, O1.NAME,  M1.NAME, M1.MEMBER_NO, 
    T1.NAME, T1.TYPE_NO, T1.SCALE, T1.PRECISION, 
    T1.SCALE, T1.PROPERTY,  T1.POS_NO, 
    O2.NAME, O1.OBJ_ID, U1.USER_ID, U2.NAME
;

CREATE OR REPLACE VIEW DBA_METHOD_PARAMS
AS
SELECT  "OWNER",
        "TYPE_NAME",
	"METHOD_NAME",
	"METHOD_NO",
	"PARAM_NAME",
	"PARAM_NO",
	"PARAM_MODE",
	"PARAM_TYPE_MOD",
	"PARAM_TYPE_OWNER",
	"PARAM_TYPE_NAME",
	"CHARACTER_SET_NAME"
FROM    __DBA_METHOD_PARAMS
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_METHOD_PARAMS FOR DBA_METHOD_PARAMS;

CREATE OR REPLACE VIEW USER_METHOD_PARAMS
AS
SELECT  "TYPE_NAME",
	"METHOD_NAME",
	"METHOD_NO",
	"PARAM_NAME",
	"PARAM_NO",
	"PARAM_MODE",
	"PARAM_TYPE_MOD",
	"PARAM_TYPE_OWNER",
	"PARAM_TYPE_NAME",
	"CHARACTER_SET_NAME"
FROM    __DBA_METHOD_PARAMS
WHERE   OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_METHOD_PARAMS FOR USER_METHOD_PARAMS;
GRANT SELECT ON USER_METHOD_PARAMS TO PUBLIC;

CREATE OR REPLACE VIEW ALL_METHOD_PARAMS
AS
SELECT  "OWNER",
        "TYPE_NAME",
	"METHOD_NAME",
	"METHOD_NO",
	"PARAM_NAME",
	"PARAM_NO",
	"PARAM_MODE",
	"PARAM_TYPE_MOD",
	"PARAM_TYPE_OWNER",
	"PARAM_TYPE_NAME",
	"CHARACTER_SET_NAME"
FROM    __DBA_METHOD_PARAMS
WHERE   OWNER_ID = USERENV('SCHEMAID')
   OR   OWNER_ID = 1
   OR   EXISTS (SELECT NULL
                FROM   (SELECT SAU2.PRIV_NO
                        FROM   SYS._DD_SYSAUTH SAU2
                        START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                        CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                       ) SAU
                WHERE (SAU.PRIV_NO    = -483
                        OR SAU.PRIV_NO = -482
                        OR SAU.PRIV_NO = -481
                        OR SAU.PRIV_NO = -480
                        OR SAU.PRIV_NO = -485
                        OR SAU.PRIV_NO = -473
                        OR SAU.PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
               )
   OR   OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_METHOD_PARAMS FOR ALL_METHOD_PARAMS;
GRANT SELECT ON ALL_METHOD_PARAMS TO PUBLIC;



CREATE OR REPLACE VIEW __DBA_METHOD_RESULTS ( 
"OWNER",
"TYPE_NAME",
"METHOD_NAME",
"METHOD_NO",
"PARAM_TYPE_MOD",
"PARAM_TYPE_OWNER",
"PARAM_TYPE_NAME",
"CHARACTER_SET_NAME",
"OBJ_ID", 
"OWNER_ID"
)
AS
SELECT  
    U1.NAME ,
    O1.NAME ,  
    M1.NAME ,
    M1.MEMBER_NO - MIN(M2.MEMBER_NO) + 1, 
    NULL , 
    DECODE(T1.TYPE_NO, 
           29, U2.NAME, 
           30, U2.NAME, 
           32, U2.NAME, NULL),
    DECODE(T1.TYPE_NO,
           1, 'NUMBER',
           2, 'CHAR',
           3, 'VARCHAR',
           4, 'RAW',
           5, 'DATE',
           6, 'TIME(' ||T1.SCALE|| ')',
           7, 'TIMESTAMP('||T1.SCALE||')',
           8, 'INTERVAL YEAR(' ||T1.PRECISION||') TO MONTH',
           9, 'INTERVAL DAY(' ||T1.PRECISION||') TO SECOND(' || T1.SCALE || ')',
           10, 'LONG',
           11, 'LONG RAW',
           12, 'BLOB',
           13, 'CLOB',
           14, 'BFILE',
           15, 'ROWID',
           18, 'NCHAR',
           19, 'NVARCHAR',
           20, 'NCLOB',
           21, 'TIMESTAMP('||T1.SCALE||') WITH TIME ZONE',
           22, 'TIMESTAMP('||T1.SCALE||') WITH LOCAL TIME ZONE',
           23, 'BINARY_FLOAT',
           24, 'BINARY_DOUBLE',
           16, 'REF CURSOR',
           17, 'UNKNOWN',
           -- PSM types 
           25, 'BOOLEAN',
           26, 'PLS_INTEGER',
           27, 'BINARY_INTEGER',
           29, O2.NAME,
           30, O2.NAME,
           32, O2.NAME,
           'UNDEFINED') ,
        NULL , 
        O1.OBJ_ID, 
        U1.USER_ID
FROM    SYS._DD_PSMUNIT P1, SYS._DD_OBJ O1, SYS._DD_USER U1,
        SYS._DD_PSMMEMBER M1, SYS._DD_PSMMEMBER M2, 
        SYS._DD_PSMTDEF T1, SYS._DD_OBJ O2, SYS._DD_USER U2
WHERE   
        P1.OBJ_ID = O1.OBJ_ID 
  AND   O1.OWNER_ID = U1.USER_ID 
  AND   O1.TYPE_NO = 22 
  AND   BITAND(P1.PROPERTY , 134217728) <> 0 
  AND   O1.OBJ_ID = M1.OBJ_ID
  AND   O1.OBJ_ID = M2.OBJ_ID
  AND   M1.KIND IN (51, 
                    52, 
                    53, 
                    54)
  AND   M2.KIND IN (51, 
                    50,
                    52, 
                    53, 
                    54)
  AND   T1.MEMBER_NO = M1.MEMBER_NO
  AND   P1.OBJ_ID = T1.OBJ_ID
  AND   T1.POS_NO = 0
  AND   T1.META_OBJ_ID = O2.OBJ_ID (+) 
  AND   O2.OWNER_ID = U2.USER_ID (+) 
GROUP BY
    U1.NAME, O1.NAME,  M1.NAME, M1.MEMBER_NO,
    T1.NAME, T1.TYPE_NO, T1.SCALE, T1.PRECISION,
    T1.SCALE, T1.PROPERTY,  T1.POS_NO,
    O2.NAME, O1.OBJ_ID, U1.USER_ID, U2.NAME
;

CREATE OR REPLACE VIEW DBA_METHOD_RESULTS
AS
SELECT  "OWNER",
        "TYPE_NAME",
	"METHOD_NAME",
	"METHOD_NO",
	"PARAM_TYPE_MOD",
	"PARAM_TYPE_OWNER",
	"PARAM_TYPE_NAME",
	"CHARACTER_SET_NAME"
FROM    __DBA_METHOD_RESULTS
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_METHOD_RESULTS FOR DBA_METHOD_RESULTS;

CREATE OR REPLACE VIEW USER_METHOD_RESULTS
AS
SELECT  "TYPE_NAME",
	"METHOD_NAME",
	"METHOD_NO",
	"PARAM_TYPE_MOD",
	"PARAM_TYPE_OWNER",
	"PARAM_TYPE_NAME",
	"CHARACTER_SET_NAME"
FROM    __DBA_METHOD_RESULTS
WHERE   OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_METHOD_RESULTS FOR USER_METHOD_RESULTS;
GRANT SELECT ON USER_METHOD_RESULTS TO PUBLIC;

CREATE OR REPLACE VIEW ALL_METHOD_RESULTS
AS
SELECT  "OWNER",
        "TYPE_NAME",
	"METHOD_NAME",
	"METHOD_NO",
	"PARAM_TYPE_MOD",
	"PARAM_TYPE_OWNER",
	"PARAM_TYPE_NAME",
	"CHARACTER_SET_NAME"
FROM    __DBA_METHOD_RESULTS
WHERE   OWNER_ID = USERENV('SCHEMAID')
   OR   OWNER_ID = 1
   OR   EXISTS (SELECT NULL
                FROM   (SELECT SAU2.PRIV_NO
                        FROM   SYS._DD_SYSAUTH SAU2
                        START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                        CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                       ) SAU
                WHERE (SAU.PRIV_NO    = -483
                        OR SAU.PRIV_NO = -482
                        OR SAU.PRIV_NO = -481
                        OR SAU.PRIV_NO = -480
                        OR SAU.PRIV_NO = -485
                        OR SAU.PRIV_NO = -473
                        OR SAU.PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
               )
   OR   OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_METHOD_RESULTS FOR ALL_METHOD_RESULTS;
GRANT SELECT ON ALL_METHOD_RESULTS TO PUBLIC;


CREATE OR REPLACE VIEW _DBA_PACKAGE_MEMBER_TYPES
AS
SELECT 
    U.name "OWNER",
    O.OWNER_ID "OWNER_ID",
    O.OBJ_ID "OBJ_ID",
    O.name "PACKAGE_NAME", 
    M.name "TYPE_NAME", 
    T.type_no "TYPE_NO",
    T.precision "PRECISION", 
    T.scale "SCALE",
    DECODE(T.meta_obj_id, -1, 
           CAST(NULL AS NUMBER), T.meta_obj_id) "TYPE_OBJ_ID",
    M.kind "KIND",
    T.member_no "MEMBER_NO",
    M.fld1 "LIMIT",
    M.col_cnt "COUNT"
FROM 
        SYS._DD_PSMMEMBER M,      
        SYS._DD_PSMTDEF T, 
        SYS._DD_OBJ O, 
        SYS._DD_USER U
WHERE   O.TYPE_NO = 7
AND     O.OWNER_ID = U.USER_ID    
AND     O.OBJ_ID = M.OBJ_ID
AND     M.OBJ_ID = T.OBJ_ID
AND     M.MEMBER_NO = T.MEMBER_NO 
AND     M.KIND in (31, 
                   32,
                   33,
                   34)
ORDER BY 
       U.name, O.name, M.NAME, T.POS_NO
;


CREATE OR REPLACE VIEW DBA_PACKAGE_MEMBER_TYPES
AS
SELECT  "OWNER",
        "PACKAGE_NAME",
	"TYPE_NAME",
	"TYPE_NO",
	"PRECISION",
	"SCALE",
	"TYPE_OBJ_ID",
	"MEMBER_NO", 
	"KIND", 
        "LIMIT", 
        "COUNT"
FROM    _DBA_PACKAGE_MEMBER_TYPES
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_PACKAGE_MEMBER_TYPES FOR DBA_PACKAGE_MEMBER_TYPES;

CREATE OR REPLACE VIEW USER_PACKAGE_MEMBER_TYPES
AS
SELECT "PACKAGE_NAME",
	"TYPE_NAME",
	"TYPE_NO",
	"PRECISION",
	"SCALE",
	"TYPE_OBJ_ID",
	"MEMBER_NO", 
	"KIND", 
        "LIMIT", 
        "COUNT"
FROM    _DBA_PACKAGE_MEMBER_TYPES
WHERE   OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_PACKAGE_MEMBER_TYPES FOR USER_PACKAGE_MEMBER_TYPES;
GRANT SELECT ON USER_PACKAGE_MEMBER_TYPES TO PUBLIC;

CREATE OR REPLACE VIEW ALL_PACKAGE_MEMBER_TYPES
AS
SELECT  "OWNER",
        "PACKAGE_NAME",
	"TYPE_NAME",
	"TYPE_NO",
	"PRECISION",
	"SCALE",
	"TYPE_OBJ_ID",
	"MEMBER_NO", 
	"KIND", 
        "LIMIT", 
        "COUNT"
FROM    _DBA_PACKAGE_MEMBER_TYPES
WHERE   OWNER_ID = USERENV('SCHEMAID')
   OR   OWNER_ID = 1
   OR   EXISTS (SELECT NULL
                FROM   (SELECT SAU2.PRIV_NO
                        FROM   SYS._DD_SYSAUTH SAU2
                        START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                        CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                       ) SAU
                WHERE (SAU.PRIV_NO    = -483
                        OR SAU.PRIV_NO = -482
                        OR SAU.PRIV_NO = -481
                        OR SAU.PRIV_NO = -480
                        OR SAU.PRIV_NO = -485
                        OR SAU.PRIV_NO = -473
                        OR SAU.PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
               )
   OR   OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_PACKAGE_MEMBER_TYPES FOR ALL_PACKAGE_MEMBER_TYPES;
GRANT SELECT ON ALL_PACKAGE_MEMBER_TYPES TO PUBLIC;


CREATE OR REPLACE VIEW DATABASE_PROPERTIES
AS
SELECT /*+ no_merge */  NAME,
        VALUE,
        COMMENT_STR
FROM    SYS._DD_PROPS;

CREATE OR REPLACE PUBLIC SYNONYM DATABASE_PROPERTIES FOR DATABASE_PROPERTIES;
GRANT SELECT ON DATABASE_PROPERTIES TO PUBLIC;



create or replace view dba_jobs
as
    select  /*+ no_merge */
        job, schema_user, next_date, interval, broken, failures, what, 
        instance, last_date, this_date 
    from ( 
    select  
        j.job_id    as "JOB", 
        j.owner_id  as "SCHEMA_USER", 
        j.next_date as "NEXT_DATE", 
        j.interval  as "INTERVAL",
        j.broken    as "BROKEN", 
        j.failure   as "FAILURES", 
        j.what      as "WHAT", 
        j.instance  as "INSTANCE",
        i.last_date as "LAST_DATE", 
        i.this_date as "THIS_DATE" 
    from sys._dd_job j, sys._jobinfo i
    where j.job_id = i.job_id (+)
    )
    order by job
;

create or replace view all_jobs
as
    select  /*+ no_merge */
        job, schema_user, next_date, interval, broken, failures, what, 
        instance, last_date, this_date 
    from ( 
    select  
        j.job_id    as "JOB", 
        j.owner_id  as "SCHEMA_USER", 
        j.next_date as "NEXT_DATE", 
        j.interval  as "INTERVAL",
        j.broken    as "BROKEN", 
        j.failure   as "FAILURES", 
        j.what      as "WHAT", 
        j.instance  as "INSTANCE",
        i.last_date as "LAST_DATE", 
        i.this_date as "THIS_DATE" 
    from sys._dd_job j, sys._jobinfo i
    where j.job_id = i.job_id (+)
    and   j.owner_id = USERENV('SCHEMAID')
    )
    order by job
;

create or replace view user_jobs
as
    select  /*+ no_merge */
        job, schema_user, next_date, interval, broken, failures, what, 
        instance, last_date, this_date 
    from ( 
    select  
        j.job_id    as "JOB", 
        j.owner_id  as "SCHEMA_USER", 
        j.next_date as "NEXT_DATE", 
        j.interval  as "INTERVAL",
        j.broken    as "BROKEN", 
        j.failure   as "FAILURES", 
        j.what      as "WHAT", 
        j.instance  as "INSTANCE",
        i.last_date as "LAST_DATE", 
        i.this_date as "THIS_DATE" 
    from sys._dd_job j, sys._jobinfo i
    where j.job_id = i.job_id (+)
    and   j.owner_id = USERENV('SCHEMAID')
    )
    order by job
;

create or replace public synonym dba_jobs for dba_jobs;
create or replace public synonym all_jobs for all_jobs;
create or replace public synonym user_jobs for user_jobs;

grant select on all_jobs to public;
grant select on user_jobs to public;


create or replace view dba_jobs_with_name
as
    select  /*+ no_merge */
        job, name, schema_user, next_date, interval, broken, failures, what, 
        instance, last_date, this_date
    from ( 
    select  
        j.job_id    as "JOB", 
        k.job_name  as "NAME",
        j.owner_id  as "SCHEMA_USER", 
        j.next_date as "NEXT_DATE", 
        j.interval  as "INTERVAL",
        j.broken    as "BROKEN", 
        j.failure   as "FAILURES", 
        j.what      as "WHAT", 
        j.instance  as "INSTANCE",
        i.last_date as "LAST_DATE", 
        i.this_date as "THIS_DATE"
    from sys._dd_job j, sys._jobinfo i, sys._job_with_name k
    where j.job_id = i.job_id (+)
    and   j.job_id = k.job_id
    )
    order by job
;

create or replace view all_jobs_with_name
as
    select  /*+ no_merge */
        job, name, schema_user, next_date, interval, broken, failures, what, 
        instance, last_date, this_date 
    from ( 
    select  
        j.job_id    as "JOB", 
        k.job_name  as "NAME",
        j.owner_id  as "SCHEMA_USER", 
        j.next_date as "NEXT_DATE", 
        j.interval  as "INTERVAL",
        j.broken    as "BROKEN", 
        j.failure   as "FAILURES", 
        j.what      as "WHAT", 
        j.instance  as "INSTANCE",
        i.last_date as "LAST_DATE", 
        i.this_date as "THIS_DATE"
    from sys._dd_job j, sys._jobinfo i, sys._job_with_name k
    where j.job_id = i.job_id (+)
    and   j.job_id = k.job_id
    and   j.owner_id = USERENV('SCHEMAID')
    )
    order by job
;

create or replace view user_jobs_with_name
as
    select  /*+ no_merge */
        job, name, schema_user, next_date, interval, broken, failures, what, 
        instance, last_date, this_date 
    from ( 
    select  
        j.job_id    as "JOB", 
        k.job_name  as "NAME",
        j.owner_id  as "SCHEMA_USER", 
        j.next_date as "NEXT_DATE", 
        j.interval  as "INTERVAL",
        j.broken    as "BROKEN", 
        j.failure   as "FAILURES", 
        j.what      as "WHAT", 
        j.instance  as "INSTANCE",
        i.last_date as "LAST_DATE", 
        i.this_date as "THIS_DATE" 
    from sys._dd_job j, sys._jobinfo i, sys._job_with_name k
    where j.job_id = i.job_id (+)
    and   j.job_id = k.job_id
    and   j.owner_id = USERENV('SCHEMAID')
    )
    order by job
;


create or replace view dba_job_history
as
    select  /*+ no_merge */
        job, name, schema_user, instance, start_date, end_date, result, comments
    from ( 
    select  
        j.job_id     as "JOB", 
        k.job_name   as "NAME",
        j.owner_id   as "SCHEMA_USER", 
        j.instance   as "INSTANCE",
        j.start_date as "START_DATE", 
        j.end_date   as "END_DATE",
        j.result     as "RESULT",
        j.comments   as "COMMENTS"
    from sys._job_history j, sys._job_with_name k
    where k.job_id (+) = j.job_id
    )
    order by job
;

create or replace view all_job_history
as
    select  /*+ no_merge */
        job, name, schema_user, instance, start_date, end_date, result, comments
    from ( 
    select  
        j.job_id     as "JOB", 
        k.job_name   as "NAME",
        j.owner_id   as "SCHEMA_USER", 
        j.instance   as "INSTANCE",
        j.start_date as "START_DATE", 
        j.end_date   as "END_DATE",
        j.result     as "RESULT",
        j.comments   as "COMMENTS"
    from sys._job_history j, sys._job_with_name k
    where k.job_id (+) = j.job_id
    and   j.owner_id = USERENV('SCHEMAID')
    )
    order by job
;

create or replace view user_job_history
as
    select  /*+ no_merge */
        job, name, schema_user, instance, start_date, end_date, result, comments
    from ( 
    select  
        j.job_id     as "JOB", 
        k.job_name   as "NAME",
        j.owner_id   as "SCHEMA_USER", 
        j.instance   as "INSTANCE",
        j.start_date as "START_DATE", 
        j.end_date   as "END_DATE",
        j.result     as "RESULT",
        j.comments   as "COMMENTS"
    from sys._job_history j, sys._job_with_name k
    where k.job_id (+) = j.job_id
    and   j.owner_id = USERENV('SCHEMAID')
    )
    order by job
;

create or replace public synonym dba_jobs_with_name for dba_jobs_with_name;
create or replace public synonym all_jobs_with_name for all_jobs_with_name;
create or replace public synonym user_jobs_with_name for user_jobs_with_name;

create or replace public synonym dba_job_history for dba_job_history;
create or replace public synonym all_job_history for all_job_history;
create or replace public synonym user_job_history for user_job_history;

grant select on all_jobs_with_name to public;
grant select on user_jobs_with_name to public;

grant select on all_job_history to public;
grant select on user_job_history to public;


create or replace view dba_scheduler_objects
as
    select  /*+ no_merge */
OWNER_ID, OBJECT_NAME, JOB_SUBNAME, JOB_STYLE, JOB_CREATOR, CLIENT_ID, GLOBAL_UID,
PROGRAM_OWNER, PROGRAM_NAME, PROGRAM_TYPE, PROGRAM_ACTION, JOB_TYPE, JOB_ACTION, NUMBER_OF_ARGUMENTS,
SCHEDULE_OWNER, SCHEDULE_NAME, SCHEDULE_TYPE, START_DATE, REPEAT_INTERVAL,
EVENT_QUEUE_OWNER, EVENT_QUEUE_NAME, EVENT_QUEUE_AGENT, EVENT_CONDITION,
EVENT_RULE, QUEUE_SPEC, FILE_WATCHER_OWNER, FILE_WATCHER_NAME, END_DATE, JOB_CLASS,
ENABLED, AUTO_DROP, RESTARTABLE, STATE, JOB_PRIORITY, RUN_COUNT, MAX_RUNS,
FAILURE_COUNT, MAX_FAILURES, RETRY_COUNT, LAST_START_DATE,
LAST_RUN_DURATION, NEXT_RUN_DATE, SCHEDULE_LIMIT, MAX_RUN_DURATION,
LOGGING_LEVEL, STOP_ON_WINDOW_CLOSE, INSTANCE_STICKINESS, RAISE_EVENTS,
SYSTEM, JOB_WEIGHT, NLS_ENV, SOURCE, NUMBER_OF_DESTINATIONS,
DESTINATION_OWNER, DESTINATION, CREDENTIAL_OWNER, CREDENTIAL_NAME,
INSTANCE_ID, DEFERRED_DROP, ALLOW_RUNS_IN_RESTRICTED_MODE, COMMENTS,
RULE_SET_NAME, EVALUATION_INTERVAL, FLAGS, JOB_ID, CHAIN_NAME, STEP_NAME, CTX_ID
    from ( 
    select  
o.OWNER_ID                        as "OWNER_ID",
o.OBJECT_NAME                     as "OBJECT_NAME",
o.JOB_SUBNAME                     as "JOB_SUBNAME",
o.JOB_STYLE                       as "JOB_STYLE",
o.JOB_CREATOR                     as "JOB_CREATOR",
o.CLIENT_ID                       as "CLIENT_ID",
o.GLOBAL_UID                      as "GLOBAL_UID",
o.PROGRAM_OWNER                   as "PROGRAM_OWNER",
o.PROGRAM_NAME                    as "PROGRAM_NAME",
o.PROGRAM_TYPE                    as "PROGRAM_TYPE",
o.PROGRAM_ACTION                  as "PROGRAM_ACTION",
o.JOB_TYPE                        as "JOB_TYPE",
o.JOB_ACTION                      as "JOB_ACTION",
o.NUMBER_OF_ARGUMENTS             as "NUMBER_OF_ARGUMENTS",
o.SCHEDULE_OWNER                  as "SCHEDULE_OWNER",
o.SCHEDULE_NAME                   as "SCHEDULE_NAME",
o.SCHEDULE_TYPE                   as "SCHEDULE_TYPE",
o.START_DATE                      as "START_DATE",
o.REPEAT_INTERVAL                 as "REPEAT_INTERVAL",
o.EVENT_QUEUE_OWNER               as "EVENT_QUEUE_OWNER",
o.EVENT_QUEUE_NAME                as "EVENT_QUEUE_NAME",
o.EVENT_QUEUE_AGENT               as "EVENT_QUEUE_AGENT",
o.EVENT_CONDITION                 as "EVENT_CONDITION",
o.EVENT_RULE                      as "EVENT_RULE",
o.QUEUE_SPEC                      as "QUEUE_SPEC",
o.FILE_WATCHER_OWNER              as "FILE_WATCHER_OWNER",
o.FILE_WATCHER_NAME               as "FILE_WATCHER_NAME",
o.END_DATE                        as "END_DATE",
o.JOB_CLASS                       as "JOB_CLASS",
o.ENABLED                         as "ENABLED",
o.AUTO_DROP                       as "AUTO_DROP",
o.RESTARTABLE                     as "RESTARTABLE",
o.STATE                           as "STATE",
o.PRIORITY                        as "JOB_PRIORITY",
o.RUN_COUNT                       as "RUN_COUNT",
o.MAX_RUNS                        as "MAX_RUNS",
o.FAILURE_COUNT                   as "FAILURE_COUNT",
o.MAX_FAILURES                    as "MAX_FAILURES",
o.RETRY_COUNT                     as "RETRY_COUNT",
o.LAST_START_DATE                 as "LAST_START_DATE",
o.LAST_RUN_DURATION               as "LAST_RUN_DURATION",
o.NEXT_RUN_DATE                   as "NEXT_RUN_DATE",
o.SCHEDULE_LIMIT                  as "SCHEDULE_LIMIT",
o.MAX_RUN_DURATION                as "MAX_RUN_DURATION",
o.LOGGING_LEVEL                   as "LOGGING_LEVEL",
o.STOP_ON_WINDOW_CLOSE            as "STOP_ON_WINDOW_CLOSE",
o.INSTANCE_STICKINESS             as "INSTANCE_STICKINESS",
o.RAISE_EVENTS                    as "RAISE_EVENTS",
o.SYSTEM                          as "SYSTEM",
o.WEIGHT                          as "JOB_WEIGHT",
o.NLS_ENV                         as "NLS_ENV",
o.SOURCE                          as "SOURCE",
o.NUMBER_OF_DESTINATIONS          as "NUMBER_OF_DESTINATIONS",
o.DESTINATION_OWNER               as "DESTINATION_OWNER",
o.DESTINATION                     as "DESTINATION",
o.CREDENTIAL_OWNER                as "CREDENTIAL_OWNER",
o.CREDENTIAL_NAME                 as "CREDENTIAL_NAME",
o.INSTANCE_ID                     as "INSTANCE_ID",
o.DEFERRED_DROP                   as "DEFERRED_DROP",
o.ALLOW_RUNS_IN_RESTRICTED_MODE   as "ALLOW_RUNS_IN_RESTRICTED_MODE",
o.COMMENTS                        as "COMMENTS",
o.RULE_SET_NAME                   as "RULE_SET_NAME",
o.EVALUATION_INTERVAL             as "EVALUATION_INTERVAL",
o.FLAGS                           as "FLAGS",
o.JOB_ID                          as "JOB_ID",
o.CHAIN_NAME                      as "CHAIN_NAME",
o.STEP_NAME                       as "STEP_NAME",
o.CTX_ID                          as "CTX_ID"
    from sys._scheduler_objects o
    )
;

create or replace view all_scheduler_objects
as
    select  /*+ no_merge */
OWNER_ID, OBJECT_NAME, JOB_SUBNAME, JOB_STYLE, JOB_CREATOR, CLIENT_ID, GLOBAL_UID,
PROGRAM_OWNER, PROGRAM_NAME, PROGRAM_TYPE, PROGRAM_ACTION, JOB_TYPE, JOB_ACTION, NUMBER_OF_ARGUMENTS,
SCHEDULE_OWNER, SCHEDULE_NAME, SCHEDULE_TYPE, START_DATE, REPEAT_INTERVAL,
EVENT_QUEUE_OWNER, EVENT_QUEUE_NAME, EVENT_QUEUE_AGENT, EVENT_CONDITION,
EVENT_RULE, QUEUE_SPEC, FILE_WATCHER_OWNER, FILE_WATCHER_NAME, END_DATE, JOB_CLASS,
ENABLED, AUTO_DROP, RESTARTABLE, STATE, JOB_PRIORITY, RUN_COUNT, MAX_RUNS,
FAILURE_COUNT, MAX_FAILURES, RETRY_COUNT, LAST_START_DATE,
LAST_RUN_DURATION, NEXT_RUN_DATE, SCHEDULE_LIMIT, MAX_RUN_DURATION,
LOGGING_LEVEL, STOP_ON_WINDOW_CLOSE, INSTANCE_STICKINESS, RAISE_EVENTS,
SYSTEM, JOB_WEIGHT, NLS_ENV, SOURCE, NUMBER_OF_DESTINATIONS,
DESTINATION_OWNER, DESTINATION, CREDENTIAL_OWNER, CREDENTIAL_NAME,
INSTANCE_ID, DEFERRED_DROP, ALLOW_RUNS_IN_RESTRICTED_MODE, COMMENTS,
RULE_SET_NAME, EVALUATION_INTERVAL, FLAGS, JOB_ID, CHAIN_NAME, STEP_NAME, CTX_ID
    from ( 
    select  
o.OWNER_ID                        as "OWNER_ID",
o.OBJECT_NAME                     as "OBJECT_NAME",
o.JOB_SUBNAME                     as "JOB_SUBNAME",
o.JOB_STYLE                       as "JOB_STYLE",
o.JOB_CREATOR                     as "JOB_CREATOR",
o.CLIENT_ID                       as "CLIENT_ID",
o.GLOBAL_UID                      as "GLOBAL_UID",
o.PROGRAM_OWNER                   as "PROGRAM_OWNER",
o.PROGRAM_NAME                    as "PROGRAM_NAME",
o.PROGRAM_TYPE                    as "PROGRAM_TYPE",
o.PROGRAM_ACTION                  as "PROGRAM_ACTION",
o.JOB_TYPE                        as "JOB_TYPE",
o.JOB_ACTION                      as "JOB_ACTION",
o.NUMBER_OF_ARGUMENTS             as "NUMBER_OF_ARGUMENTS",
o.SCHEDULE_OWNER                  as "SCHEDULE_OWNER",
o.SCHEDULE_NAME                   as "SCHEDULE_NAME",
o.SCHEDULE_TYPE                   as "SCHEDULE_TYPE",
o.START_DATE                      as "START_DATE",
o.REPEAT_INTERVAL                 as "REPEAT_INTERVAL",
o.EVENT_QUEUE_OWNER               as "EVENT_QUEUE_OWNER",
o.EVENT_QUEUE_NAME                as "EVENT_QUEUE_NAME",
o.EVENT_QUEUE_AGENT               as "EVENT_QUEUE_AGENT",
o.EVENT_CONDITION                 as "EVENT_CONDITION",
o.EVENT_RULE                      as "EVENT_RULE",
o.QUEUE_SPEC                      as "QUEUE_SPEC",
o.FILE_WATCHER_OWNER              as "FILE_WATCHER_OWNER",
o.FILE_WATCHER_NAME               as "FILE_WATCHER_NAME",
o.END_DATE                        as "END_DATE",
o.JOB_CLASS                       as "JOB_CLASS",
o.ENABLED                         as "ENABLED",
o.AUTO_DROP                       as "AUTO_DROP",
o.RESTARTABLE                     as "RESTARTABLE",
o.STATE                           as "STATE",
o.PRIORITY                        as "JOB_PRIORITY",
o.RUN_COUNT                       as "RUN_COUNT",
o.MAX_RUNS                        as "MAX_RUNS",
o.FAILURE_COUNT                   as "FAILURE_COUNT",
o.MAX_FAILURES                    as "MAX_FAILURES",
o.RETRY_COUNT                     as "RETRY_COUNT",
o.LAST_START_DATE                 as "LAST_START_DATE",
o.LAST_RUN_DURATION               as "LAST_RUN_DURATION",
o.NEXT_RUN_DATE                   as "NEXT_RUN_DATE",
o.SCHEDULE_LIMIT                  as "SCHEDULE_LIMIT",
o.MAX_RUN_DURATION                as "MAX_RUN_DURATION",
o.LOGGING_LEVEL                   as "LOGGING_LEVEL",
o.STOP_ON_WINDOW_CLOSE            as "STOP_ON_WINDOW_CLOSE",
o.INSTANCE_STICKINESS             as "INSTANCE_STICKINESS",
o.RAISE_EVENTS                    as "RAISE_EVENTS",
o.SYSTEM                          as "SYSTEM",
o.WEIGHT                          as "JOB_WEIGHT",
o.NLS_ENV                         as "NLS_ENV",
o.SOURCE                          as "SOURCE",
o.NUMBER_OF_DESTINATIONS          as "NUMBER_OF_DESTINATIONS",
o.DESTINATION_OWNER               as "DESTINATION_OWNER",
o.DESTINATION                     as "DESTINATION",
o.CREDENTIAL_OWNER                as "CREDENTIAL_OWNER",
o.CREDENTIAL_NAME                 as "CREDENTIAL_NAME",
o.INSTANCE_ID                     as "INSTANCE_ID",
o.DEFERRED_DROP                   as "DEFERRED_DROP",
o.ALLOW_RUNS_IN_RESTRICTED_MODE   as "ALLOW_RUNS_IN_RESTRICTED_MODE",
o.COMMENTS                        as "COMMENTS",
o.RULE_SET_NAME                   as "RULE_SET_NAME",
o.EVALUATION_INTERVAL             as "EVALUATION_INTERVAL",
o.FLAGS                           as "FLAGS",
o.JOB_ID                          as "JOB_ID",
o.CHAIN_NAME                      as "CHAIN_NAME",
o.STEP_NAME                       as "STEP_NAME",
o.CTX_ID                          as "CTX_ID"
    from sys._scheduler_objects o
    where o.owner_id = USERENV('SCHEMAID')
    )
;

create or replace view user_scheduler_objects
as
    select  /*+ no_merge */
OWNER_ID, OBJECT_NAME, JOB_SUBNAME, JOB_STYLE, JOB_CREATOR, CLIENT_ID, GLOBAL_UID,
PROGRAM_OWNER, PROGRAM_NAME, PROGRAM_TYPE, PROGRAM_ACTION, JOB_TYPE, JOB_ACTION, NUMBER_OF_ARGUMENTS,
SCHEDULE_OWNER, SCHEDULE_NAME, SCHEDULE_TYPE, START_DATE, REPEAT_INTERVAL,
EVENT_QUEUE_OWNER, EVENT_QUEUE_NAME, EVENT_QUEUE_AGENT, EVENT_CONDITION,
EVENT_RULE, QUEUE_SPEC, FILE_WATCHER_OWNER, FILE_WATCHER_NAME, END_DATE, JOB_CLASS,
ENABLED, AUTO_DROP, RESTARTABLE, STATE, JOB_PRIORITY, RUN_COUNT, MAX_RUNS,
FAILURE_COUNT, MAX_FAILURES, RETRY_COUNT, LAST_START_DATE,
LAST_RUN_DURATION, NEXT_RUN_DATE, SCHEDULE_LIMIT, MAX_RUN_DURATION,
LOGGING_LEVEL, STOP_ON_WINDOW_CLOSE, INSTANCE_STICKINESS, RAISE_EVENTS,
SYSTEM, JOB_WEIGHT, NLS_ENV, SOURCE, NUMBER_OF_DESTINATIONS,
DESTINATION_OWNER, DESTINATION, CREDENTIAL_OWNER, CREDENTIAL_NAME,
INSTANCE_ID, DEFERRED_DROP, ALLOW_RUNS_IN_RESTRICTED_MODE, COMMENTS,
RULE_SET_NAME, EVALUATION_INTERVAL, FLAGS, JOB_ID, CHAIN_NAME, STEP_NAME, CTX_ID
    from ( 
    select  
o.OWNER_ID                        as "OWNER_ID",
o.OBJECT_NAME                     as "OBJECT_NAME",
o.JOB_SUBNAME                     as "JOB_SUBNAME",
o.JOB_STYLE                       as "JOB_STYLE",
o.JOB_CREATOR                     as "JOB_CREATOR",
o.CLIENT_ID                       as "CLIENT_ID",
o.GLOBAL_UID                      as "GLOBAL_UID",
o.PROGRAM_OWNER                   as "PROGRAM_OWNER",
o.PROGRAM_NAME                    as "PROGRAM_NAME",
o.PROGRAM_TYPE                    as "PROGRAM_TYPE",
o.PROGRAM_ACTION                  as "PROGRAM_ACTION",
o.JOB_TYPE                        as "JOB_TYPE",
o.JOB_ACTION                      as "JOB_ACTION",
o.NUMBER_OF_ARGUMENTS             as "NUMBER_OF_ARGUMENTS",
o.SCHEDULE_OWNER                  as "SCHEDULE_OWNER",
o.SCHEDULE_NAME                   as "SCHEDULE_NAME",
o.SCHEDULE_TYPE                   as "SCHEDULE_TYPE",
o.START_DATE                      as "START_DATE",
o.REPEAT_INTERVAL                 as "REPEAT_INTERVAL",
o.EVENT_QUEUE_OWNER               as "EVENT_QUEUE_OWNER",
o.EVENT_QUEUE_NAME                as "EVENT_QUEUE_NAME",
o.EVENT_QUEUE_AGENT               as "EVENT_QUEUE_AGENT",
o.EVENT_CONDITION                 as "EVENT_CONDITION",
o.EVENT_RULE                      as "EVENT_RULE",
o.QUEUE_SPEC                      as "QUEUE_SPEC",
o.FILE_WATCHER_OWNER              as "FILE_WATCHER_OWNER",
o.FILE_WATCHER_NAME               as "FILE_WATCHER_NAME",
o.END_DATE                        as "END_DATE",
o.JOB_CLASS                       as "JOB_CLASS",
o.ENABLED                         as "ENABLED",
o.AUTO_DROP                       as "AUTO_DROP",
o.RESTARTABLE                     as "RESTARTABLE",
o.STATE                           as "STATE",
o.PRIORITY                        as "JOB_PRIORITY",
o.RUN_COUNT                       as "RUN_COUNT",
o.MAX_RUNS                        as "MAX_RUNS", o.FAILURE_COUNT                   as "FAILURE_COUNT",
o.MAX_FAILURES                    as "MAX_FAILURES",
o.RETRY_COUNT                     as "RETRY_COUNT",
o.LAST_START_DATE                 as "LAST_START_DATE",
o.LAST_RUN_DURATION               as "LAST_RUN_DURATION",
o.NEXT_RUN_DATE                   as "NEXT_RUN_DATE",
o.SCHEDULE_LIMIT                  as "SCHEDULE_LIMIT",
o.MAX_RUN_DURATION                as "MAX_RUN_DURATION",
o.LOGGING_LEVEL                   as "LOGGING_LEVEL",
o.STOP_ON_WINDOW_CLOSE            as "STOP_ON_WINDOW_CLOSE",
o.INSTANCE_STICKINESS             as "INSTANCE_STICKINESS",
o.RAISE_EVENTS                    as "RAISE_EVENTS",
o.SYSTEM                          as "SYSTEM",
o.WEIGHT                          as "JOB_WEIGHT",
o.NLS_ENV                         as "NLS_ENV",
o.SOURCE                          as "SOURCE",
o.NUMBER_OF_DESTINATIONS          as "NUMBER_OF_DESTINATIONS",
o.DESTINATION_OWNER               as "DESTINATION_OWNER",
o.DESTINATION                     as "DESTINATION",
o.CREDENTIAL_OWNER                as "CREDENTIAL_OWNER",
o.CREDENTIAL_NAME                 as "CREDENTIAL_NAME",
o.INSTANCE_ID                     as "INSTANCE_ID",
o.DEFERRED_DROP                   as "DEFERRED_DROP",
o.ALLOW_RUNS_IN_RESTRICTED_MODE   as "ALLOW_RUNS_IN_RESTRICTED_MODE",
o.COMMENTS                        as "COMMENTS",
o.RULE_SET_NAME                   as "RULE_SET_NAME",
o.EVALUATION_INTERVAL             as "EVALUATION_INTERVAL",
o.FLAGS                           as "FLAGS",
o.JOB_ID                          as "JOB_ID",
o.CHAIN_NAME                      as "CHAIN_NAME",
o.STEP_NAME                       as "STEP_NAME",
o.CTX_ID                          as "CTX_ID"
    from sys._scheduler_objects o
    where o.owner_id = USERENV('SCHEMAID')
    )
;

create or replace public synonym dba_scheduler_objects for dba_scheduler_objects;
create or replace public synonym all_scheduler_objects for all_scheduler_objects;
create or replace public synonym user_scheduler_objects for user_scheduler_objects;

grant select on all_scheduler_objects to public;
grant select on user_scheduler_objects to public;


create or replace view dba_scheduler_jobs
as
    select  /*+ no_merge */
OWNER_ID, JOB_NAME, JOB_SUBNAME, JOB_STYLE, JOB_CREATOR, CLIENT_ID, GLOBAL_UID,
PROGRAM_OWNER, PROGRAM_NAME, JOB_TYPE, JOB_ACTION, NUMBER_OF_ARGUMENTS,
SCHEDULE_OWNER, SCHEDULE_NAME, SCHEDULE_TYPE, START_DATE, REPEAT_INTERVAL,
EVENT_QUEUE_OWNER, EVENT_QUEUE_NAME, EVENT_QUEUE_AGENT, EVENT_CONDITION,
EVENT_RULE, FILE_WATCHER_OWNER, FILE_WATCHER_NAME, END_DATE, JOB_CLASS,
ENABLED, AUTO_DROP, RESTARTABLE, STATE, JOB_PRIORITY, RUN_COUNT, MAX_RUNS,
FAILURE_COUNT, MAX_FAILURES, RETRY_COUNT, LAST_START_DATE,
LAST_RUN_DURATION, NEXT_RUN_DATE, SCHEDULE_LIMIT, MAX_RUN_DURATION,
LOGGING_LEVEL, STOP_ON_WINDOW_CLOSE, INSTANCE_STICKINESS, RAISE_EVENTS,
SYSTEM, JOB_WEIGHT, NLS_ENV, SOURCE, NUMBER_OF_DESTINATIONS,
DESTINATION_OWNER, DESTINATION, CREDENTIAL_OWNER, CREDENTIAL_NAME,
INSTANCE_ID, DEFERRED_DROP, ALLOW_RUNS_IN_RESTRICTED_MODE, COMMENTS,
FLAGS, JOB_ID, CHAIN_NAME, STEP_NAME, CTX_ID
    from ( 
    select  
j.OWNER_ID                        as "OWNER_ID",
j.OBJECT_NAME                     as "JOB_NAME",
j.JOB_SUBNAME                     as "JOB_SUBNAME",
j.JOB_STYLE                       as "JOB_STYLE",
j.JOB_CREATOR                     as "JOB_CREATOR",
j.CLIENT_ID                       as "CLIENT_ID",
j.GLOBAL_UID                      as "GLOBAL_UID",
j.PROGRAM_OWNER                   as "PROGRAM_OWNER",
j.PROGRAM_NAME                    as "PROGRAM_NAME",
j.JOB_TYPE                        as "JOB_TYPE",
j.JOB_ACTION                      as "JOB_ACTION",
j.NUMBER_OF_ARGUMENTS             as "NUMBER_OF_ARGUMENTS",
j.SCHEDULE_OWNER                  as "SCHEDULE_OWNER",
j.SCHEDULE_NAME                   as "SCHEDULE_NAME",
j.SCHEDULE_TYPE                   as "SCHEDULE_TYPE",
j.START_DATE                      as "START_DATE",
j.REPEAT_INTERVAL                 as "REPEAT_INTERVAL",
j.EVENT_QUEUE_OWNER               as "EVENT_QUEUE_OWNER",
j.EVENT_QUEUE_NAME                as "EVENT_QUEUE_NAME",
j.EVENT_QUEUE_AGENT               as "EVENT_QUEUE_AGENT",
j.EVENT_CONDITION                 as "EVENT_CONDITION",
j.EVENT_RULE                      as "EVENT_RULE",
j.FILE_WATCHER_OWNER              as "FILE_WATCHER_OWNER",
j.FILE_WATCHER_NAME               as "FILE_WATCHER_NAME",
j.END_DATE                        as "END_DATE",
j.JOB_CLASS                       as "JOB_CLASS",
j.ENABLED                         as "ENABLED",
j.AUTO_DROP                       as "AUTO_DROP",
j.RESTARTABLE                     as "RESTARTABLE",
j.STATE                           as "STATE",
j.PRIORITY                        as "JOB_PRIORITY",
j.RUN_COUNT                       as "RUN_COUNT",
j.MAX_RUNS                        as "MAX_RUNS",
j.FAILURE_COUNT                   as "FAILURE_COUNT",
j.MAX_FAILURES                    as "MAX_FAILURES",
j.RETRY_COUNT                     as "RETRY_COUNT",
j.LAST_START_DATE                 as "LAST_START_DATE",
j.LAST_RUN_DURATION               as "LAST_RUN_DURATION",
j.NEXT_RUN_DATE                   as "NEXT_RUN_DATE",
j.SCHEDULE_LIMIT                  as "SCHEDULE_LIMIT",
j.MAX_RUN_DURATION                as "MAX_RUN_DURATION",
j.LOGGING_LEVEL                   as "LOGGING_LEVEL",
j.STOP_ON_WINDOW_CLOSE            as "STOP_ON_WINDOW_CLOSE",
j.INSTANCE_STICKINESS             as "INSTANCE_STICKINESS",
j.RAISE_EVENTS                    as "RAISE_EVENTS",
j.SYSTEM                          as "SYSTEM",
j.WEIGHT                          as "JOB_WEIGHT",
j.NLS_ENV                         as "NLS_ENV",
j.SOURCE                          as "SOURCE",
j.NUMBER_OF_DESTINATIONS          as "NUMBER_OF_DESTINATIONS",
j.DESTINATION_OWNER               as "DESTINATION_OWNER",
j.DESTINATION                     as "DESTINATION",
j.CREDENTIAL_OWNER                as "CREDENTIAL_OWNER",
j.CREDENTIAL_NAME                 as "CREDENTIAL_NAME",
j.INSTANCE_ID                     as "INSTANCE_ID",
j.DEFERRED_DROP                   as "DEFERRED_DROP",
j.ALLOW_RUNS_IN_RESTRICTED_MODE   as "ALLOW_RUNS_IN_RESTRICTED_MODE",
j.COMMENTS                        as "COMMENTS",
j.FLAGS                           as "FLAGS",
j.JOB_ID                          as "JOB_ID",
j.CHAIN_NAME                      as "CHAIN_NAME",
j.STEP_NAME                       as "STEP_NAME",
j.CTX_ID                          as "CTX_ID"
    from sys._scheduler_objects j where j.job_id > -1
    )
;

create or replace view all_scheduler_jobs
as
    select  /*+ no_merge */
OWNER_ID, JOB_NAME, JOB_SUBNAME, JOB_STYLE, JOB_CREATOR, CLIENT_ID, GLOBAL_UID,
PROGRAM_OWNER, PROGRAM_NAME, JOB_TYPE, JOB_ACTION, NUMBER_OF_ARGUMENTS,
SCHEDULE_OWNER, SCHEDULE_NAME, SCHEDULE_TYPE, START_DATE, REPEAT_INTERVAL,
EVENT_QUEUE_OWNER, EVENT_QUEUE_NAME, EVENT_QUEUE_AGENT, EVENT_CONDITION,
EVENT_RULE, FILE_WATCHER_OWNER, FILE_WATCHER_NAME, END_DATE, JOB_CLASS,
ENABLED, AUTO_DROP, RESTARTABLE, STATE, JOB_PRIORITY, RUN_COUNT, MAX_RUNS,
FAILURE_COUNT, MAX_FAILURES, RETRY_COUNT, LAST_START_DATE,
LAST_RUN_DURATION, NEXT_RUN_DATE, SCHEDULE_LIMIT, MAX_RUN_DURATION,
LOGGING_LEVEL, STOP_ON_WINDOW_CLOSE, INSTANCE_STICKINESS, RAISE_EVENTS,
SYSTEM, JOB_WEIGHT, NLS_ENV, SOURCE, NUMBER_OF_DESTINATIONS,
DESTINATION_OWNER, DESTINATION, CREDENTIAL_OWNER, CREDENTIAL_NAME,
INSTANCE_ID, DEFERRED_DROP, ALLOW_RUNS_IN_RESTRICTED_MODE, COMMENTS,
FLAGS, JOB_ID, CHAIN_NAME, STEP_NAME, CTX_ID
    from ( 
    select  
j.OWNER_ID                        as "OWNER_ID",
j.OBJECT_NAME                     as "JOB_NAME",
j.JOB_SUBNAME                     as "JOB_SUBNAME",
j.JOB_STYLE                       as "JOB_STYLE",
j.JOB_CREATOR                     as "JOB_CREATOR",
j.CLIENT_ID                       as "CLIENT_ID",
j.GLOBAL_UID                      as "GLOBAL_UID",
j.PROGRAM_OWNER                   as "PROGRAM_OWNER",
j.PROGRAM_NAME                    as "PROGRAM_NAME",
j.JOB_TYPE                        as "JOB_TYPE",
j.JOB_ACTION                      as "JOB_ACTION",
j.NUMBER_OF_ARGUMENTS             as "NUMBER_OF_ARGUMENTS",
j.SCHEDULE_OWNER                  as "SCHEDULE_OWNER",
j.SCHEDULE_NAME                   as "SCHEDULE_NAME",
j.SCHEDULE_TYPE                   as "SCHEDULE_TYPE",
j.START_DATE                      as "START_DATE",
j.REPEAT_INTERVAL                 as "REPEAT_INTERVAL",
j.EVENT_QUEUE_OWNER               as "EVENT_QUEUE_OWNER",
j.EVENT_QUEUE_NAME                as "EVENT_QUEUE_NAME",
j.EVENT_QUEUE_AGENT               as "EVENT_QUEUE_AGENT",
j.EVENT_CONDITION                 as "EVENT_CONDITION",
j.EVENT_RULE                      as "EVENT_RULE",
j.FILE_WATCHER_OWNER              as "FILE_WATCHER_OWNER",
j.FILE_WATCHER_NAME               as "FILE_WATCHER_NAME",
j.END_DATE                        as "END_DATE",
j.JOB_CLASS                       as "JOB_CLASS",
j.ENABLED                         as "ENABLED",
j.AUTO_DROP                       as "AUTO_DROP",
j.RESTARTABLE                     as "RESTARTABLE",
j.STATE                           as "STATE",
j.PRIORITY                        as "JOB_PRIORITY",
j.RUN_COUNT                       as "RUN_COUNT",
j.MAX_RUNS                        as "MAX_RUNS",
j.FAILURE_COUNT                   as "FAILURE_COUNT",
j.MAX_FAILURES                    as "MAX_FAILURES",
j.RETRY_COUNT                     as "RETRY_COUNT",
j.LAST_START_DATE                 as "LAST_START_DATE",
j.LAST_RUN_DURATION               as "LAST_RUN_DURATION",
j.NEXT_RUN_DATE                   as "NEXT_RUN_DATE",
j.SCHEDULE_LIMIT                  as "SCHEDULE_LIMIT",
j.MAX_RUN_DURATION                as "MAX_RUN_DURATION",
j.LOGGING_LEVEL                   as "LOGGING_LEVEL",
j.STOP_ON_WINDOW_CLOSE            as "STOP_ON_WINDOW_CLOSE",
j.INSTANCE_STICKINESS             as "INSTANCE_STICKINESS",
j.RAISE_EVENTS                    as "RAISE_EVENTS",
j.SYSTEM                          as "SYSTEM",
j.WEIGHT                          as "JOB_WEIGHT",
j.NLS_ENV                         as "NLS_ENV",
j.SOURCE                          as "SOURCE",
j.NUMBER_OF_DESTINATIONS          as "NUMBER_OF_DESTINATIONS",
j.DESTINATION_OWNER               as "DESTINATION_OWNER",
j.DESTINATION                     as "DESTINATION",
j.CREDENTIAL_OWNER                as "CREDENTIAL_OWNER",
j.CREDENTIAL_NAME                 as "CREDENTIAL_NAME",
j.INSTANCE_ID                     as "INSTANCE_ID",
j.DEFERRED_DROP                   as "DEFERRED_DROP",
j.ALLOW_RUNS_IN_RESTRICTED_MODE   as "ALLOW_RUNS_IN_RESTRICTED_MODE",
j.COMMENTS                        as "COMMENTS",
j.FLAGS                           as "FLAGS",
j.JOB_ID                          as "JOB_ID",
j.CHAIN_NAME                      as "CHAIN_NAME",
j.STEP_NAME                       as "STEP_NAME",
j.CTX_ID                          as "CTX_ID"
    from sys._scheduler_objects j
    where j.owner_id = USERENV('SCHEMAID') and j.job_id > -1
    )
;

create or replace view user_scheduler_jobs
as
    select  /*+ no_merge */
OWNER_ID, JOB_NAME, JOB_SUBNAME, JOB_STYLE, JOB_CREATOR, CLIENT_ID, GLOBAL_UID,
PROGRAM_OWNER, PROGRAM_NAME, JOB_TYPE, JOB_ACTION, NUMBER_OF_ARGUMENTS,
SCHEDULE_OWNER, SCHEDULE_NAME, SCHEDULE_TYPE, START_DATE, REPEAT_INTERVAL,
EVENT_QUEUE_OWNER, EVENT_QUEUE_NAME, EVENT_QUEUE_AGENT, EVENT_CONDITION,
EVENT_RULE, FILE_WATCHER_OWNER, FILE_WATCHER_NAME, END_DATE, JOB_CLASS,
ENABLED, AUTO_DROP, RESTARTABLE, STATE, JOB_PRIORITY, RUN_COUNT, MAX_RUNS,
FAILURE_COUNT, MAX_FAILURES, RETRY_COUNT, LAST_START_DATE,
LAST_RUN_DURATION, NEXT_RUN_DATE, SCHEDULE_LIMIT, MAX_RUN_DURATION,
LOGGING_LEVEL, STOP_ON_WINDOW_CLOSE, INSTANCE_STICKINESS, RAISE_EVENTS,
SYSTEM, JOB_WEIGHT, NLS_ENV, SOURCE, NUMBER_OF_DESTINATIONS,
DESTINATION_OWNER, DESTINATION, CREDENTIAL_OWNER, CREDENTIAL_NAME,
INSTANCE_ID, DEFERRED_DROP, ALLOW_RUNS_IN_RESTRICTED_MODE, COMMENTS,
FLAGS, JOB_ID, CHAIN_NAME, STEP_NAME, CTX_ID
    from ( 
    select  
j.OWNER_ID                        as "OWNER_ID",
j.OBJECT_NAME                     as "JOB_NAME",
j.JOB_SUBNAME                     as "JOB_SUBNAME",
j.JOB_STYLE                       as "JOB_STYLE",
j.JOB_CREATOR                     as "JOB_CREATOR",
j.CLIENT_ID                       as "CLIENT_ID",
j.GLOBAL_UID                      as "GLOBAL_UID",
j.PROGRAM_OWNER                   as "PROGRAM_OWNER",
j.PROGRAM_NAME                    as "PROGRAM_NAME",
j.JOB_TYPE                        as "JOB_TYPE",
j.JOB_ACTION                      as "JOB_ACTION",
j.NUMBER_OF_ARGUMENTS             as "NUMBER_OF_ARGUMENTS",
j.SCHEDULE_OWNER                  as "SCHEDULE_OWNER",
j.SCHEDULE_NAME                   as "SCHEDULE_NAME",
j.SCHEDULE_TYPE                   as "SCHEDULE_TYPE",
j.START_DATE                      as "START_DATE",
j.REPEAT_INTERVAL                 as "REPEAT_INTERVAL",
j.EVENT_QUEUE_OWNER               as "EVENT_QUEUE_OWNER",
j.EVENT_QUEUE_NAME                as "EVENT_QUEUE_NAME",
j.EVENT_QUEUE_AGENT               as "EVENT_QUEUE_AGENT",
j.EVENT_CONDITION                 as "EVENT_CONDITION",
j.EVENT_RULE                      as "EVENT_RULE",
j.FILE_WATCHER_OWNER              as "FILE_WATCHER_OWNER",
j.FILE_WATCHER_NAME               as "FILE_WATCHER_NAME",
j.END_DATE                        as "END_DATE",
j.JOB_CLASS                       as "JOB_CLASS",
j.ENABLED                         as "ENABLED",
j.AUTO_DROP                       as "AUTO_DROP",
j.RESTARTABLE                     as "RESTARTABLE",
j.STATE                           as "STATE",
j.PRIORITY                        as "JOB_PRIORITY",
j.RUN_COUNT                       as "RUN_COUNT",
j.MAX_RUNS                        as "MAX_RUNS",
j.FAILURE_COUNT                   as "FAILURE_COUNT",
j.MAX_FAILURES                    as "MAX_FAILURES",
j.RETRY_COUNT                     as "RETRY_COUNT",
j.LAST_START_DATE                 as "LAST_START_DATE",
j.LAST_RUN_DURATION               as "LAST_RUN_DURATION",
j.NEXT_RUN_DATE                   as "NEXT_RUN_DATE",
j.SCHEDULE_LIMIT                  as "SCHEDULE_LIMIT",
j.MAX_RUN_DURATION                as "MAX_RUN_DURATION",
j.LOGGING_LEVEL                   as "LOGGING_LEVEL",
j.STOP_ON_WINDOW_CLOSE            as "STOP_ON_WINDOW_CLOSE",
j.INSTANCE_STICKINESS             as "INSTANCE_STICKINESS",
j.RAISE_EVENTS                    as "RAISE_EVENTS",
j.SYSTEM                          as "SYSTEM",
j.WEIGHT                          as "JOB_WEIGHT",
j.NLS_ENV                         as "NLS_ENV",
j.SOURCE                          as "SOURCE",
j.NUMBER_OF_DESTINATIONS          as "NUMBER_OF_DESTINATIONS",
j.DESTINATION_OWNER               as "DESTINATION_OWNER",
j.DESTINATION                     as "DESTINATION",
j.CREDENTIAL_OWNER                as "CREDENTIAL_OWNER",
j.CREDENTIAL_NAME                 as "CREDENTIAL_NAME",
j.INSTANCE_ID                     as "INSTANCE_ID",
j.DEFERRED_DROP                   as "DEFERRED_DROP",
j.ALLOW_RUNS_IN_RESTRICTED_MODE   as "ALLOW_RUNS_IN_RESTRICTED_MODE",
j.COMMENTS                        as "COMMENTS",
j.FLAGS                           as "FLAGS",
j.JOB_ID                          as "JOB_ID",
j.CHAIN_NAME                      as "CHAIN_NAME",
j.STEP_NAME                       as "STEP_NAME",
j.CTX_ID                          as "CTX_ID"
    from sys._scheduler_objects j
    where j.owner_id = USERENV('SCHEMAID') and j.job_id > -1
    )
;

create or replace public synonym dba_scheduler_jobs for dba_scheduler_jobs;
create or replace public synonym all_scheduler_jobs for all_scheduler_jobs;
create or replace public synonym user_scheduler_jobs for user_scheduler_jobs;

grant select on all_scheduler_jobs to public;
grant select on user_scheduler_jobs to public;


create or replace view dba_scheduler_programs
as
    select  /*+ no_merge */
OWNER_ID, PROGRAM_NAME, PROGRAM_TYPE, PROGRAM_ACTION, NUMBER_OF_ARGUMENTS,
ENABLED, DETACHED, SCHEDULE_LIMIT, PRIORITY, WEIGHT, MAX_RUNS,
MAX_FAILURES, MAX_RUN_DURATION, NLS_ENV, COMMENTS
    from ( 
    select  
j.OWNER_ID            as "OWNER_ID",
j.OBJECT_NAME         as "PROGRAM_NAME",
j.PROGRAM_TYPE        as "PROGRAM_TYPE",
j.PROGRAM_ACTION      as "PROGRAM_ACTION",
j.NUMBER_OF_ARGUMENTS as "NUMBER_OF_ARGUMENTS",
j.ENABLED             as "ENABLED",
j.DETACHED            as "DETACHED",
j.SCHEDULE_LIMIT      as "SCHEDULE_LIMIT",
j.PRIORITY            as "PRIORITY",
j.WEIGHT              as "WEIGHT",
j.MAX_RUNS            as "MAX_RUNS",
j.MAX_FAILURES        as "MAX_FAILURES",
j.MAX_RUN_DURATION    as "MAX_RUN_DURATION",
j.NLS_ENV             as "NLS_ENV",
j.COMMENTS            as "COMMENTS"
    from sys._scheduler_objects j
    )
;

create or replace view all_scheduler_programs
as
    select  /*+ no_merge */
OWNER_ID, PROGRAM_NAME, PROGRAM_TYPE, PROGRAM_ACTION, NUMBER_OF_ARGUMENTS,
ENABLED, DETACHED, SCHEDULE_LIMIT, PRIORITY, WEIGHT, MAX_RUNS,
MAX_FAILURES, MAX_RUN_DURATION, NLS_ENV, COMMENTS
    from ( 
    select  
j.OWNER_ID            as "OWNER_ID",
j.OBJECT_NAME         as "PROGRAM_NAME",
j.PROGRAM_TYPE        as "PROGRAM_TYPE",
j.PROGRAM_ACTION      as "PROGRAM_ACTION",
j.NUMBER_OF_ARGUMENTS as "NUMBER_OF_ARGUMENTS",
j.ENABLED             as "ENABLED",
j.DETACHED            as "DETACHED",
j.SCHEDULE_LIMIT      as "SCHEDULE_LIMIT",
j.PRIORITY            as "PRIORITY",
j.WEIGHT              as "WEIGHT",
j.MAX_RUNS            as "MAX_RUNS",
j.MAX_FAILURES        as "MAX_FAILURES",
j.MAX_RUN_DURATION    as "MAX_RUN_DURATION",
j.NLS_ENV             as "NLS_ENV",
j.COMMENTS            as "COMMENTS"
    from sys._scheduler_objects j
    where j.owner_id = USERENV('SCHEMAID')
    )
;

create or replace view user_scheduler_programs
as
    select  /*+ no_merge */
OWNER_ID, PROGRAM_NAME, PROGRAM_TYPE, PROGRAM_ACTION, NUMBER_OF_ARGUMENTS,
ENABLED, DETACHED, SCHEDULE_LIMIT, PRIORITY, WEIGHT, MAX_RUNS,
MAX_FAILURES, MAX_RUN_DURATION, NLS_ENV, COMMENTS
    from ( 
    select  
j.OWNER_ID            as "OWNER_ID",
j.OBJECT_NAME         as "PROGRAM_NAME",
j.PROGRAM_TYPE        as "PROGRAM_TYPE",
j.PROGRAM_ACTION      as "PROGRAM_ACTION",
j.NUMBER_OF_ARGUMENTS as "NUMBER_OF_ARGUMENTS",
j.ENABLED             as "ENABLED",
j.DETACHED            as "DETACHED",
j.SCHEDULE_LIMIT      as "SCHEDULE_LIMIT",
j.PRIORITY            as "PRIORITY",
j.WEIGHT              as "WEIGHT",
j.MAX_RUNS            as "MAX_RUNS",
j.MAX_FAILURES        as "MAX_FAILURES",
j.MAX_RUN_DURATION    as "MAX_RUN_DURATION",
j.NLS_ENV             as "NLS_ENV",
j.COMMENTS            as "COMMENTS"
    from sys._scheduler_objects j
    where j.owner_id = USERENV('SCHEMAID')
    )
;

create or replace public synonym dba_scheduler_programs for dba_scheduler_programs;
create or replace public synonym all_scheduler_programs for all_scheduler_programs;
create or replace public synonym user_scheduler_programs for user_scheduler_programs;

grant select on all_scheduler_programs to public;
grant select on user_scheduler_programs to public;


create or replace view dba_scheduler_chains
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, RULE_SET_NAME, EVALUATION_INTERVAL, COMMENTS
    from ( 
    select  
j.OWNER_ID                        as "OWNER_ID",
j.OBJECT_NAME                     as "CHAIN_NAME",
j.RULE_SET_NAME                   as "RULE_SET_NAME",
j.EVALUATION_INTERVAL             as "EVALUATION_INTERVAL",
j.COMMENTS            as "COMMENTS"
    from sys._scheduler_objects j
    )
;

create or replace view all_scheduler_chains
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, RULE_SET_NAME, EVALUATION_INTERVAL, COMMENTS
    from ( 
    select  
j.OWNER_ID                        as "OWNER_ID",
j.OBJECT_NAME                     as "CHAIN_NAME",
j.RULE_SET_NAME                   as "RULE_SET_NAME",
j.EVALUATION_INTERVAL             as "EVALUATION_INTERVAL",
j.COMMENTS            as "COMMENTS"
    from sys._scheduler_objects j
    where j.owner_id = USERENV('SCHEMAID')
    )
;

create or replace view user_scheduler_chains
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, RULE_SET_NAME, EVALUATION_INTERVAL, COMMENTS
    from ( 
    select  
j.OWNER_ID                        as "OWNER_ID",
j.OBJECT_NAME                     as "CHAIN_NAME",
j.RULE_SET_NAME                   as "RULE_SET_NAME",
j.EVALUATION_INTERVAL             as "EVALUATION_INTERVAL",
j.COMMENTS            as "COMMENTS"
    from sys._scheduler_objects j
    where j.owner_id = USERENV('SCHEMAID')
    )
;

create or replace public synonym dba_scheduler_chains for dba_scheduler_chains;
create or replace public synonym all_scheduler_chains for all_scheduler_chains;
create or replace public synonym user_scheduler_chains for user_scheduler_chains;

grant select on all_scheduler_chains to public;
grant select on user_scheduler_chains to public;


create or replace view dba_scheduler_running_jobs
as
    select  /*+ no_merge */
OWNER_ID, JOB_NAME, JOB_SUBNAME, JOB_STYLE, JOB_CREATOR, CLIENT_ID, GLOBAL_UID,
PROGRAM_OWNER, PROGRAM_NAME, JOB_TYPE, JOB_ACTION, NUMBER_OF_ARGUMENTS,
SCHEDULE_OWNER, SCHEDULE_NAME, SCHEDULE_TYPE, START_DATE, REPEAT_INTERVAL,
EVENT_QUEUE_OWNER, EVENT_QUEUE_NAME, EVENT_QUEUE_AGENT, EVENT_CONDITION,
EVENT_RULE, FILE_WATCHER_OWNER, FILE_WATCHER_NAME, END_DATE, JOB_CLASS,
ENABLED, AUTO_DROP, RESTARTABLE, STATE, JOB_PRIORITY, RUN_COUNT, MAX_RUNS,
FAILURE_COUNT, MAX_FAILURES, RETRY_COUNT, LAST_START_DATE,
LAST_RUN_DURATION, NEXT_RUN_DATE, SCHEDULE_LIMIT, MAX_RUN_DURATION,
LOGGING_LEVEL, STOP_ON_WINDOW_CLOSE, INSTANCE_STICKINESS, RAISE_EVENTS,
SYSTEM, JOB_WEIGHT, NLS_ENV, SOURCE, NUMBER_OF_DESTINATIONS,
DESTINATION_OWNER, DESTINATION, CREDENTIAL_OWNER, CREDENTIAL_NAME,
INSTANCE_ID, DEFERRED_DROP, ALLOW_RUNS_IN_RESTRICTED_MODE, COMMENTS,
FLAGS, JOB_ID, CHAIN_NAME, STEP_NAME, CTX_ID
    from ( 
    select  
j.OWNER_ID                        as "OWNER_ID",
j.OBJECT_NAME                     as "JOB_NAME",
j.JOB_SUBNAME                     as "JOB_SUBNAME",
j.JOB_STYLE                       as "JOB_STYLE",
j.JOB_CREATOR                     as "JOB_CREATOR",
j.CLIENT_ID                       as "CLIENT_ID",
j.GLOBAL_UID                      as "GLOBAL_UID",
j.PROGRAM_OWNER                   as "PROGRAM_OWNER",
j.PROGRAM_NAME                    as "PROGRAM_NAME",
j.JOB_TYPE                        as "JOB_TYPE",
j.JOB_ACTION                      as "JOB_ACTION",
j.NUMBER_OF_ARGUMENTS             as "NUMBER_OF_ARGUMENTS",
j.SCHEDULE_OWNER                  as "SCHEDULE_OWNER",
j.SCHEDULE_NAME                   as "SCHEDULE_NAME",
j.SCHEDULE_TYPE                   as "SCHEDULE_TYPE",
j.START_DATE                      as "START_DATE",
j.REPEAT_INTERVAL                 as "REPEAT_INTERVAL",
j.EVENT_QUEUE_OWNER               as "EVENT_QUEUE_OWNER",
j.EVENT_QUEUE_NAME                as "EVENT_QUEUE_NAME",
j.EVENT_QUEUE_AGENT               as "EVENT_QUEUE_AGENT",
j.EVENT_CONDITION                 as "EVENT_CONDITION",
j.EVENT_RULE                      as "EVENT_RULE",
j.FILE_WATCHER_OWNER              as "FILE_WATCHER_OWNER",
j.FILE_WATCHER_NAME               as "FILE_WATCHER_NAME",
j.END_DATE                        as "END_DATE",
j.JOB_CLASS                       as "JOB_CLASS",
j.ENABLED                         as "ENABLED",
j.AUTO_DROP                       as "AUTO_DROP",
j.RESTARTABLE                     as "RESTARTABLE",
j.STATE                           as "STATE",
j.PRIORITY                        as "JOB_PRIORITY",
j.RUN_COUNT                       as "RUN_COUNT",
j.MAX_RUNS                        as "MAX_RUNS",
j.FAILURE_COUNT                   as "FAILURE_COUNT",
j.MAX_FAILURES                    as "MAX_FAILURES",
j.RETRY_COUNT                     as "RETRY_COUNT",
j.LAST_START_DATE                 as "LAST_START_DATE",
j.LAST_RUN_DURATION               as "LAST_RUN_DURATION",
j.NEXT_RUN_DATE                   as "NEXT_RUN_DATE",
j.SCHEDULE_LIMIT                  as "SCHEDULE_LIMIT",
j.MAX_RUN_DURATION                as "MAX_RUN_DURATION",
j.LOGGING_LEVEL                   as "LOGGING_LEVEL",
j.STOP_ON_WINDOW_CLOSE            as "STOP_ON_WINDOW_CLOSE",
j.INSTANCE_STICKINESS             as "INSTANCE_STICKINESS",
j.RAISE_EVENTS                    as "RAISE_EVENTS",
j.SYSTEM                          as "SYSTEM",
j.WEIGHT                          as "JOB_WEIGHT",
j.NLS_ENV                         as "NLS_ENV",
j.SOURCE                          as "SOURCE",
j.NUMBER_OF_DESTINATIONS          as "NUMBER_OF_DESTINATIONS",
j.DESTINATION_OWNER               as "DESTINATION_OWNER",
j.DESTINATION                     as "DESTINATION",
j.CREDENTIAL_OWNER                as "CREDENTIAL_OWNER",
j.CREDENTIAL_NAME                 as "CREDENTIAL_NAME",
j.INSTANCE_ID                     as "INSTANCE_ID",
j.DEFERRED_DROP                   as "DEFERRED_DROP",
j.ALLOW_RUNS_IN_RESTRICTED_MODE   as "ALLOW_RUNS_IN_RESTRICTED_MODE",
j.COMMENTS                        as "COMMENTS",
j.FLAGS                           as "FLAGS",
j.JOB_ID                          as "JOB_ID",
j.CHAIN_NAME                      as "CHAIN_NAME",
j.STEP_NAME                       as "STEP_NAME",
j.CTX_ID                          as "CTX_ID"
    from sys._scheduler_objects j, sys._vt_running_jobs r
    where r.job_id = j.job_id (+)
    )
;

create or replace view all_scheduler_running_jobs
as
    select  /*+ no_merge */
OWNER_ID, JOB_NAME, JOB_SUBNAME, JOB_STYLE, JOB_CREATOR, CLIENT_ID, GLOBAL_UID,
PROGRAM_OWNER, PROGRAM_NAME, JOB_TYPE, JOB_ACTION, NUMBER_OF_ARGUMENTS,
SCHEDULE_OWNER, SCHEDULE_NAME, SCHEDULE_TYPE, START_DATE, REPEAT_INTERVAL,
EVENT_QUEUE_OWNER, EVENT_QUEUE_NAME, EVENT_QUEUE_AGENT, EVENT_CONDITION,
EVENT_RULE, FILE_WATCHER_OWNER, FILE_WATCHER_NAME, END_DATE, JOB_CLASS,
ENABLED, AUTO_DROP, RESTARTABLE, STATE, JOB_PRIORITY, RUN_COUNT, MAX_RUNS,
FAILURE_COUNT, MAX_FAILURES, RETRY_COUNT, LAST_START_DATE,
LAST_RUN_DURATION, NEXT_RUN_DATE, SCHEDULE_LIMIT, MAX_RUN_DURATION,
LOGGING_LEVEL, STOP_ON_WINDOW_CLOSE, INSTANCE_STICKINESS, RAISE_EVENTS,
SYSTEM, JOB_WEIGHT, NLS_ENV, SOURCE, NUMBER_OF_DESTINATIONS,
DESTINATION_OWNER, DESTINATION, CREDENTIAL_OWNER, CREDENTIAL_NAME,
INSTANCE_ID, DEFERRED_DROP, ALLOW_RUNS_IN_RESTRICTED_MODE, COMMENTS,
FLAGS, JOB_ID, CHAIN_NAME, STEP_NAME, CTX_ID
    from ( 
    select  
j.OWNER_ID                        as "OWNER_ID",
j.OBJECT_NAME                     as "JOB_NAME",
j.JOB_SUBNAME                     as "JOB_SUBNAME",
j.JOB_STYLE                       as "JOB_STYLE",
j.JOB_CREATOR                     as "JOB_CREATOR",
j.CLIENT_ID                       as "CLIENT_ID",
j.GLOBAL_UID                      as "GLOBAL_UID",
j.PROGRAM_OWNER                   as "PROGRAM_OWNER",
j.PROGRAM_NAME                    as "PROGRAM_NAME",
j.JOB_TYPE                        as "JOB_TYPE",
j.JOB_ACTION                      as "JOB_ACTION",
j.NUMBER_OF_ARGUMENTS             as "NUMBER_OF_ARGUMENTS",
j.SCHEDULE_OWNER                  as "SCHEDULE_OWNER",
j.SCHEDULE_NAME                   as "SCHEDULE_NAME",
j.SCHEDULE_TYPE                   as "SCHEDULE_TYPE",
j.START_DATE                      as "START_DATE",
j.REPEAT_INTERVAL                 as "REPEAT_INTERVAL",
j.EVENT_QUEUE_OWNER               as "EVENT_QUEUE_OWNER",
j.EVENT_QUEUE_NAME                as "EVENT_QUEUE_NAME",
j.EVENT_QUEUE_AGENT               as "EVENT_QUEUE_AGENT",
j.EVENT_CONDITION                 as "EVENT_CONDITION",
j.EVENT_RULE                      as "EVENT_RULE",
j.FILE_WATCHER_OWNER              as "FILE_WATCHER_OWNER",
j.FILE_WATCHER_NAME               as "FILE_WATCHER_NAME",
j.END_DATE                        as "END_DATE",
j.JOB_CLASS                       as "JOB_CLASS",
j.ENABLED                         as "ENABLED",
j.AUTO_DROP                       as "AUTO_DROP",
j.RESTARTABLE                     as "RESTARTABLE",
j.STATE                           as "STATE",
j.PRIORITY                        as "JOB_PRIORITY",
j.RUN_COUNT                       as "RUN_COUNT",
j.MAX_RUNS                        as "MAX_RUNS",
j.FAILURE_COUNT                   as "FAILURE_COUNT",
j.MAX_FAILURES                    as "MAX_FAILURES",
j.RETRY_COUNT                     as "RETRY_COUNT",
j.LAST_START_DATE                 as "LAST_START_DATE",
j.LAST_RUN_DURATION               as "LAST_RUN_DURATION",
j.NEXT_RUN_DATE                   as "NEXT_RUN_DATE",
j.SCHEDULE_LIMIT                  as "SCHEDULE_LIMIT",
j.MAX_RUN_DURATION                as "MAX_RUN_DURATION",
j.LOGGING_LEVEL                   as "LOGGING_LEVEL",
j.STOP_ON_WINDOW_CLOSE            as "STOP_ON_WINDOW_CLOSE",
j.INSTANCE_STICKINESS             as "INSTANCE_STICKINESS",
j.RAISE_EVENTS                    as "RAISE_EVENTS",
j.SYSTEM                          as "SYSTEM",
j.WEIGHT                          as "JOB_WEIGHT",
j.NLS_ENV                         as "NLS_ENV",
j.SOURCE                          as "SOURCE",
j.NUMBER_OF_DESTINATIONS          as "NUMBER_OF_DESTINATIONS",
j.DESTINATION_OWNER               as "DESTINATION_OWNER",
j.DESTINATION                     as "DESTINATION",
j.CREDENTIAL_OWNER                as "CREDENTIAL_OWNER",
j.CREDENTIAL_NAME                 as "CREDENTIAL_NAME",
j.INSTANCE_ID                     as "INSTANCE_ID",
j.DEFERRED_DROP                   as "DEFERRED_DROP",
j.ALLOW_RUNS_IN_RESTRICTED_MODE   as "ALLOW_RUNS_IN_RESTRICTED_MODE",
j.COMMENTS                        as "COMMENTS",
j.FLAGS                           as "FLAGS",
j.JOB_ID                          as "JOB_ID",
j.CHAIN_NAME                      as "CHAIN_NAME",
j.STEP_NAME                       as "STEP_NAME",
j.CTX_ID                          as "CTX_ID"
    from sys._scheduler_objects j, sys._vt_running_jobs r
    where r.job_id = j.job_id (+)
    and j.owner_id = USERENV('SCHEMAID')
    )
;

create or replace view user_scheduler_running_jobs
as
    select  /*+ no_merge */
OWNER_ID, JOB_NAME, JOB_SUBNAME, JOB_STYLE, JOB_CREATOR, CLIENT_ID, GLOBAL_UID,
PROGRAM_OWNER, PROGRAM_NAME, JOB_TYPE, JOB_ACTION, NUMBER_OF_ARGUMENTS,
SCHEDULE_OWNER, SCHEDULE_NAME, SCHEDULE_TYPE, START_DATE, REPEAT_INTERVAL,
EVENT_QUEUE_OWNER, EVENT_QUEUE_NAME, EVENT_QUEUE_AGENT, EVENT_CONDITION,
EVENT_RULE, FILE_WATCHER_OWNER, FILE_WATCHER_NAME, END_DATE, JOB_CLASS,
ENABLED, AUTO_DROP, RESTARTABLE, STATE, JOB_PRIORITY, RUN_COUNT, MAX_RUNS,
FAILURE_COUNT, MAX_FAILURES, RETRY_COUNT, LAST_START_DATE,
LAST_RUN_DURATION, NEXT_RUN_DATE, SCHEDULE_LIMIT, MAX_RUN_DURATION,
LOGGING_LEVEL, STOP_ON_WINDOW_CLOSE, INSTANCE_STICKINESS, RAISE_EVENTS,
SYSTEM, JOB_WEIGHT, NLS_ENV, SOURCE, NUMBER_OF_DESTINATIONS,
DESTINATION_OWNER, DESTINATION, CREDENTIAL_OWNER, CREDENTIAL_NAME,
INSTANCE_ID, DEFERRED_DROP, ALLOW_RUNS_IN_RESTRICTED_MODE, COMMENTS,
FLAGS, JOB_ID, CHAIN_NAME, STEP_NAME, CTX_ID
    from ( 
    select  
j.OWNER_ID                        as "OWNER_ID",
j.OBJECT_NAME                     as "JOB_NAME",
j.JOB_SUBNAME                     as "JOB_SUBNAME",
j.JOB_STYLE                       as "JOB_STYLE",
j.JOB_CREATOR                     as "JOB_CREATOR",
j.CLIENT_ID                       as "CLIENT_ID",
j.GLOBAL_UID                      as "GLOBAL_UID",
j.PROGRAM_OWNER                   as "PROGRAM_OWNER",
j.PROGRAM_NAME                    as "PROGRAM_NAME",
j.JOB_TYPE                        as "JOB_TYPE",
j.JOB_ACTION                      as "JOB_ACTION",
j.NUMBER_OF_ARGUMENTS             as "NUMBER_OF_ARGUMENTS",
j.SCHEDULE_OWNER                  as "SCHEDULE_OWNER",
j.SCHEDULE_NAME                   as "SCHEDULE_NAME",
j.SCHEDULE_TYPE                   as "SCHEDULE_TYPE",
j.START_DATE                      as "START_DATE",
j.REPEAT_INTERVAL                 as "REPEAT_INTERVAL",
j.EVENT_QUEUE_OWNER               as "EVENT_QUEUE_OWNER",
j.EVENT_QUEUE_NAME                as "EVENT_QUEUE_NAME",
j.EVENT_QUEUE_AGENT               as "EVENT_QUEUE_AGENT",
j.EVENT_CONDITION                 as "EVENT_CONDITION",
j.EVENT_RULE                      as "EVENT_RULE",
j.FILE_WATCHER_OWNER              as "FILE_WATCHER_OWNER",
j.FILE_WATCHER_NAME               as "FILE_WATCHER_NAME",
j.END_DATE                        as "END_DATE",
j.JOB_CLASS                       as "JOB_CLASS",
j.ENABLED                         as "ENABLED",
j.AUTO_DROP                       as "AUTO_DROP",
j.RESTARTABLE                     as "RESTARTABLE",
j.STATE                           as "STATE",
j.PRIORITY                        as "JOB_PRIORITY",
j.RUN_COUNT                       as "RUN_COUNT",
j.MAX_RUNS                        as "MAX_RUNS",
j.FAILURE_COUNT                   as "FAILURE_COUNT",
j.MAX_FAILURES                    as "MAX_FAILURES",
j.RETRY_COUNT                     as "RETRY_COUNT",
j.LAST_START_DATE                 as "LAST_START_DATE",
j.LAST_RUN_DURATION               as "LAST_RUN_DURATION",
j.NEXT_RUN_DATE                   as "NEXT_RUN_DATE",
j.SCHEDULE_LIMIT                  as "SCHEDULE_LIMIT",
j.MAX_RUN_DURATION                as "MAX_RUN_DURATION",
j.LOGGING_LEVEL                   as "LOGGING_LEVEL",
j.STOP_ON_WINDOW_CLOSE            as "STOP_ON_WINDOW_CLOSE",
j.INSTANCE_STICKINESS             as "INSTANCE_STICKINESS",
j.RAISE_EVENTS                    as "RAISE_EVENTS",
j.SYSTEM                          as "SYSTEM",
j.WEIGHT                          as "JOB_WEIGHT",
j.NLS_ENV                         as "NLS_ENV",
j.SOURCE                          as "SOURCE",
j.NUMBER_OF_DESTINATIONS          as "NUMBER_OF_DESTINATIONS",
j.DESTINATION_OWNER               as "DESTINATION_OWNER",
j.DESTINATION                     as "DESTINATION",
j.CREDENTIAL_OWNER                as "CREDENTIAL_OWNER",
j.CREDENTIAL_NAME                 as "CREDENTIAL_NAME",
j.INSTANCE_ID                     as "INSTANCE_ID",
j.DEFERRED_DROP                   as "DEFERRED_DROP",
j.ALLOW_RUNS_IN_RESTRICTED_MODE   as "ALLOW_RUNS_IN_RESTRICTED_MODE",
j.COMMENTS                        as "COMMENTS",
j.FLAGS                           as "FLAGS",
j.JOB_ID                          as "JOB_ID",
j.CHAIN_NAME                      as "CHAIN_NAME",
j.STEP_NAME                       as "STEP_NAME",
j.CTX_ID                          as "CTX_ID"
    from sys._scheduler_objects j, sys._vt_running_jobs r
    where r.job_id = j.job_id (+)
    and j.owner_id = USERENV('SCHEMAID')
    )
;

create or replace public synonym dba_scheduler_running_jobs for dba_scheduler_running_jobs;
create or replace public synonym all_scheduler_running_jobs for all_scheduler_running_jobs;
create or replace public synonym user_scheduler_running_jobs for user_scheduler_running_jobs;

grant select on all_scheduler_running_jobs to public;
grant select on user_scheduler_running_jobs to public;


create or replace view dba_scheduler_steps
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, STEP_NAME, PROGRAM_NAME, COMMENTS
    from ( 
    select  
s.OWNER_ID                        as "OWNER_ID",
s.CHAIN_NAME                      as "CHAIN_NAME",
s.STEP_NAME                       as "STEP_NAME",
s.PROGRAM_NAME                    as "PROGRAM_NAME",
s.COMMENTS                        as "COMMENTS"
    from sys._scheduler_chain_steps s
    )
;

create or replace view all_scheduler_steps
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, STEP_NAME, PROGRAM_NAME, COMMENTS
    from ( 
    select  
s.OWNER_ID                        as "OWNER_ID",
s.CHAIN_NAME                      as "CHAIN_NAME",
s.STEP_NAME                       as "STEP_NAME",
s.PROGRAM_NAME                    as "PROGRAM_NAME",
s.COMMENTS                        as "COMMENTS"
    from sys._scheduler_chain_steps s
    where s.owner_id = USERENV('SCHEMAID')
    )
;

create or replace view user_scheduler_steps
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, STEP_NAME, PROGRAM_NAME, COMMENTS
    from ( 
    select  
s.OWNER_ID                        as "OWNER_ID",
s.CHAIN_NAME                      as "CHAIN_NAME",
s.STEP_NAME                       as "STEP_NAME",
s.PROGRAM_NAME                    as "PROGRAM_NAME",
s.COMMENTS                        as "COMMENTS"
    from sys._scheduler_chain_steps s
    where s.owner_id = USERENV('SCHEMAID')
    )
;

create or replace public synonym dba_scheduler_steps for dba_scheduler_steps;
create or replace public synonym all_scheduler_steps for all_scheduler_steps;
create or replace public synonym user_scheduler_steps for user_scheduler_steps;

grant select on all_scheduler_steps to public;
grant select on user_scheduler_steps to public;


create or replace view dba_scheduler_rules
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, CONDITION, ACTION, RULE_NAME, COMMENTS
    from ( 
    select  
r.OWNER_ID                        as "OWNER_ID",
r.CHAIN_NAME                      as "CHAIN_NAME",
r.CONDITION                       as "CONDITION",
r.ACTION                          as "ACTION",
r.RULE_NAME                       as "RULE_NAME",
r.COMMENTS                        as "COMMENTS"
    from sys._scheduler_chain_rules r
    )
;

create or replace view all_scheduler_rules
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, CONDITION, ACTION, RULE_NAME, COMMENTS
    from ( 
    select  
r.OWNER_ID                        as "OWNER_ID",
r.CHAIN_NAME                      as "CHAIN_NAME",
r.CONDITION                       as "CONDITION",
r.ACTION                          as "ACTION",
r.RULE_NAME                       as "RULE_NAME",
r.COMMENTS                        as "COMMENTS"
    from sys._scheduler_chain_rules r
    where r.owner_id = USERENV('SCHEMAID')
    )
;

create or replace view user_scheduler_rules
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, CONDITION, ACTION, RULE_NAME, COMMENTS
    from ( 
    select  
r.OWNER_ID                        as "OWNER_ID",
r.CHAIN_NAME                      as "CHAIN_NAME",
r.CONDITION                       as "CONDITION",
r.ACTION                          as "ACTION",
r.RULE_NAME                       as "RULE_NAME",
r.COMMENTS                        as "COMMENTS"
    from sys._scheduler_chain_rules r
    where r.owner_id = USERENV('SCHEMAID')
    )
;

create or replace public synonym dba_scheduler_rules for dba_scheduler_rules;
create or replace public synonym all_scheduler_rules for all_scheduler_rules;
create or replace public synonym user_scheduler_rules for user_scheduler_rules;

grant select on all_scheduler_rules to public;
grant select on user_scheduler_rules to public;


create or replace view dba_scheduler_step_ctx
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, STEP_NAME, CTX_ID, JOB_ID, INSTANCE_ID, COMPLETED, STATE, START_DATE,
END_DATE, ERROR_CODE, DURATION
    from ( 
    select  
s.OWNER_ID                        as "OWNER_ID",
s.CHAIN_NAME                      as "CHAIN_NAME",
s.STEP_NAME                       as "STEP_NAME",
s.CTX_ID                          as "CTX_ID",
s.JOB_ID                          as "JOB_ID",
s.INSTANCE_ID                     as "INSTANCE_ID",
s.COMPLETED                       as "COMPLETED",
s.STATE                           as "STATE",
s.START_DATE                      as "START_DATE",
s.END_DATE                        as "END_DATE",
s.ERROR_CODE                      as "ERROR_CODE",
s.DURATION                        as "DURATION"
    from sys._scheduler_step_ctx s
    )
;

create or replace view all_scheduler_step_ctx
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, STEP_NAME, CTX_ID, JOB_ID, INSTANCE_ID, COMPLETED, STATE, START_DATE,
END_DATE, ERROR_CODE, DURATION
    from ( 
    select  
s.OWNER_ID                        as "OWNER_ID",
s.CHAIN_NAME                      as "CHAIN_NAME",
s.STEP_NAME                       as "STEP_NAME",
s.CTX_ID                          as "CTX_ID",
s.JOB_ID                          as "JOB_ID",
s.INSTANCE_ID                     as "INSTANCE_ID",
s.COMPLETED                       as "COMPLETED",
s.STATE                           as "STATE",
s.START_DATE                      as "START_DATE",
s.END_DATE                        as "END_DATE",
s.ERROR_CODE                      as "ERROR_CODE",
s.DURATION                        as "DURATION"
    from sys._scheduler_step_ctx s
    where s.owner_id = USERENV('SCHEMAID')
    )
;

create or replace view user_scheduler_step_ctx
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, STEP_NAME, CTX_ID, JOB_ID, INSTANCE_ID, COMPLETED, STATE, START_DATE,
END_DATE, ERROR_CODE, DURATION
    from ( 
    select  
s.OWNER_ID                        as "OWNER_ID",
s.CHAIN_NAME                      as "CHAIN_NAME",
s.STEP_NAME                       as "STEP_NAME",
s.CTX_ID                          as "CTX_ID",
s.JOB_ID                          as "JOB_ID",
s.INSTANCE_ID                     as "INSTANCE_ID",
s.COMPLETED                       as "COMPLETED",
s.STATE                           as "STATE",
s.START_DATE                      as "START_DATE",
s.END_DATE                        as "END_DATE",
s.ERROR_CODE                      as "ERROR_CODE",
s.DURATION                        as "DURATION"
    from sys._scheduler_step_ctx s
    where s.owner_id = USERENV('SCHEMAID')
    )
;

create or replace public synonym dba_scheduler_step_ctx for dba_scheduler_step_ctx;
create or replace public synonym all_scheduler_step_ctx for all_scheduler_step_ctx;
create or replace public synonym user_scheduler_step_ctx for user_scheduler_step_ctx;

grant select on all_scheduler_step_ctx to public;
grant select on user_scheduler_step_ctx to public;


create or replace view dba_scheduler_rule_ctx
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, CONDITION, ACTION, RULE_NAME, CTX_ID
    from ( 
    select  
r.OWNER_ID                        as "OWNER_ID",
r.CHAIN_NAME                      as "CHAIN_NAME",
r.CONDITION                       as "CONDITION",
r.ACTION                          as "ACTION",
r.RULE_NAME                       as "RULE_NAME",
r.CTX_ID                          as "CTX_ID"
    from sys._scheduler_rule_ctx r
    )
;

create or replace view all_scheduler_rule_ctx
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, CONDITION, ACTION, RULE_NAME, CTX_ID
    from ( 
    select  
r.OWNER_ID                        as "OWNER_ID",
r.CHAIN_NAME                      as "CHAIN_NAME",
r.CONDITION                       as "CONDITION",
r.ACTION                          as "ACTION",
r.RULE_NAME                       as "RULE_NAME",
r.CTX_ID                          as "CTX_ID"
    from sys._scheduler_rule_ctx r
    where r.owner_id = USERENV('SCHEMAID')
    )
;

create or replace view user_scheduler_rule_ctx
as
    select  /*+ no_merge */
OWNER_ID, CHAIN_NAME, CONDITION, ACTION, RULE_NAME, CTX_ID
    from ( 
    select  
r.OWNER_ID                        as "OWNER_ID",
r.CHAIN_NAME                      as "CHAIN_NAME",
r.CONDITION                       as "CONDITION",
r.ACTION                          as "ACTION",
r.RULE_NAME                       as "RULE_NAME",
r.CTX_ID                          as "CTX_ID"
    from sys._scheduler_rule_ctx r
    where r.owner_id = USERENV('SCHEMAID')
    )
;

create or replace public synonym dba_scheduler_rule_ctx for dba_scheduler_rule_ctx;
create or replace public synonym all_scheduler_rule_ctx for all_scheduler_rule_ctx;
create or replace public synonym user_scheduler_rule_ctx for user_scheduler_rule_ctx;

grant select on all_scheduler_rule_ctx to public;
grant select on user_scheduler_rule_ctx to public;



CREATE OR REPLACE VIEW DBA_DIRECTORIES
AS
    SELECT /*+ no_merge */
        NAME, PATH
        FROM SYS._DD_OBJ O, SYS._DD_DIR D
        WHERE O.OBJ_ID = D.OBJ_ID
;

CREATE OR REPLACE VIEW ALL_DIRECTORIES
AS
    SELECT /*+ no_merge */
        NAME, PATH
        FROM SYS._DD_OBJ O, SYS._DD_DIR D
        WHERE O.OBJ_ID = D.OBJ_ID
              
          AND
          (EXISTS (
               SELECT NULL
               FROM   SYS._DD_SYSAUTH SAU
               WHERE  SAU.GRANTEE_ID = USERENV('SCHEMAID')
                 AND  (SAU.PRIV_NO    = -436
                       OR SAU.PRIV_NO = -435
                       OR SAU.PRIV_NO = -473
                       OR SAU.PRIV_NO IN (
                             SELECT USER_ID FROM SYS._DD_USER
                             WHERE NAME = 'DBA')))
              
           OR O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
          )
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_DIRECTORIES FOR DBA_DIRECTORIES;
CREATE OR REPLACE PUBLIC SYNONYM ALL_DIRECTORIES FOR ALL_DIRECTORIES;

GRANT SELECT ON ALL_DIRECTORIES TO PUBLIC;



CREATE OR REPLACE VIEW DBA_EXTERNAL_TABLES
(OWNER, TABLE_NAME, DEFAULT_DIRECTORY_NAME, ACCESS_PARAMETERS)
AS
    SELECT /*+ no_merge */
        U.NAME, O.NAME, E.DFLT_DIR, E.ACC_PARAM
    FROM SYS._DD_OBJ O, SYS._DD_EXTTBL E, SYS._DD_USER U
    WHERE O.OBJ_ID = E.OBJ_ID
      AND O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE VIEW ALL_EXTERNAL_TABLES
(OWNER, TABLE_NAME, DEFAULT_DIRECTORY_NAME, ACCESS_PARAMETERS)
AS
    SELECT /*+ no_merge */
        U.NAME, O.NAME, E.DFLT_DIR, E.ACC_PARAM
    FROM SYS._DD_OBJ O, SYS._DD_EXTTBL E, SYS._DD_USER U
    WHERE O.OBJ_ID = E.OBJ_ID
      AND O.OWNER_ID = U.USER_ID
      AND (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1
              
          OR EXISTS (SELECT NULL
                     FROM   (SELECT SAU2.PRIV_NO
                             FROM   SYS._DD_SYSAUTH SAU2
                             START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                             CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                            ) SAU
                     WHERE (SAU.PRIV_NO    = -483
                             OR SAU.PRIV_NO = -482
                             OR SAU.PRIV_NO = -481
                             OR SAU.PRIV_NO = -480
                             OR SAU.PRIV_NO = -485
                             OR SAU.PRIV_NO = -473
                             OR SAU.PRIV_NO IN (
                                   SELECT USER_ID FROM SYS._DD_USER
                                   WHERE NAME = 'DBA')
                            )
                    )
              
          OR O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
        )
;

CREATE OR REPLACE VIEW USER_EXTERNAL_TABLES
(TABLE_NAME, DEFAULT_DIRECTORY_NAME, ACCESS_PARAMETERS)
AS
    SELECT /*+ no_merge */
        O.NAME, E.DFLT_DIR, E.ACC_PARAM
    FROM SYS._DD_OBJ O, SYS._DD_EXTTBL E
    WHERE O.OBJ_ID = E.OBJ_ID
      AND O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_EXTERNAL_TABLES FOR DBA_EXTERNAL_TABLES;
CREATE OR REPLACE PUBLIC SYNONYM ALL_EXTERNAL_TABLES FOR ALL_EXTERNAL_TABLES;
CREATE OR REPLACE PUBLIC SYNONYM USER_EXTERNAL_TABLES FOR USER_EXTERNAL_TABLES;

GRANT SELECT ON ALL_EXTERNAL_TABLES TO PUBLIC;
GRANT SELECT ON USER_EXTERNAL_TABLES TO PUBLIC;



CREATE OR REPLACE VIEW DBA_EXTERNAL_LOCATIONS
(OWNER, TABLE_NAME, DIRECTORY_NAME, LOCATION)
AS
    SELECT /*+ no_merge */
        U.NAME, O.NAME, L.DIR, L.LOCATION
    FROM SYS._DD_OBJ O, SYS._DD_EXTTBL T, SYS._DD_EXTLOC L, SYS._DD_USER U
    WHERE O.OBJ_ID = T.OBJ_ID
      AND T.OBJ_ID = L.OBJ_ID
      AND O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE VIEW ALL_EXTERNAL_LOCATIONS
(OWNER, TABLE_NAME, DIRECTORY_NAME, LOCATION)
AS
    SELECT /*+ no_merge */
        U.NAME, O.NAME, L.DIR, L.LOCATION
    FROM SYS._DD_OBJ O, SYS._DD_EXTTBL T, SYS._DD_EXTLOC L, SYS._DD_USER U
    WHERE O.OBJ_ID = T.OBJ_ID
      AND T.OBJ_ID = L.OBJ_ID
      AND O.OWNER_ID = U.USER_ID
      AND (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1
              
          OR EXISTS (SELECT NULL
                     FROM   (SELECT SAU2.PRIV_NO
                             FROM   SYS._DD_SYSAUTH SAU2
                             START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                             CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                            ) SAU
                     WHERE (SAU.PRIV_NO    = -483
                             OR SAU.PRIV_NO = -482
                             OR SAU.PRIV_NO = -481
                             OR SAU.PRIV_NO = -480
                             OR SAU.PRIV_NO = -485
                             OR SAU.PRIV_NO = -473
                             OR SAU.PRIV_NO IN (
                                   SELECT USER_ID FROM SYS._DD_USER
                                   WHERE NAME = 'DBA')
                            )
                    )
              
          OR O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
          )
;

CREATE OR REPLACE VIEW USER_EXTERNAL_LOCATIONS
(TABLE_NAME, DIRECTORY_NAME, LOCATION)
AS
    SELECT /*+ no_merge */
        O.NAME, L.DIR, L.LOCATION
    FROM SYS._DD_OBJ O, SYS._DD_EXTTBL T, SYS._DD_EXTLOC L
    WHERE O.OBJ_ID = T.OBJ_ID
      AND T.OBJ_ID = L.OBJ_ID
      AND O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_EXTERNAL_LOCATIONS FOR DBA_EXTERNAL_LOCATIONS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_EXTERNAL_LOCATIONS FOR ALL_EXTERNAL_LOCATIONS;
CREATE OR REPLACE PUBLIC SYNONYM USER_EXTERNAL_LOCATIONS FOR USER_EXTERNAL_LOCATIONS;

GRANT SELECT ON ALL_EXTERNAL_LOCATIONS TO PUBLIC;
GRANT SELECT ON USER_EXTERNAL_LOCATIONS TO PUBLIC;




CREATE OR REPLACE VIEW DBA_LIBRARIES
(OWNER, LIBRARY_NAME, FILE_SPEC, STATUS)
AS
    SELECT /*+ no_merge */
        U.NAME, O.NAME, L.PATH,
        DECODE(BITAND(O.FLAGS, 128), 0, 'VALID', 'INVALID')
    FROM SYS._DD_OBJ O, SYS._DD_LIB L, SYS._DD_USER U
    WHERE O.OBJ_ID = L.OBJ_ID
      AND O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE VIEW ALL_LIBRARIES
(OWNER, LIBRARY_NAME, FILE_SPEC, STATUS)
AS
    SELECT /*+ no_merge */
        U.NAME, O.NAME, L.PATH,
        DECODE(BITAND(O.FLAGS, 128), 0, 'VALID', 'INVALID')
    FROM SYS._DD_OBJ O, SYS._DD_LIB L, SYS._DD_USER U
    WHERE O.OBJ_ID = L.OBJ_ID
      AND O.OWNER_ID = U.USER_ID
      AND (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1
              
          OR EXISTS (
                SELECT NULL
                FROM   SYS._DD_SYSAUTH
                WHERE  GRANTEE_ID = USERENV('SCHEMAID')
                  AND  (PRIV_NO    = -431
                        OR PRIV_NO = -430
                        OR PRIV_NO = -429
                        OR PRIV_NO = -473
                        OR PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
             )
              
          OR O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
          )
;

CREATE OR REPLACE VIEW USER_LIBRARIES
(LIBRARY_NAME, FILE_SPEC, STATUS)
AS
    SELECT /*+ no_merge */
        O.NAME, L.PATH,
        DECODE(BITAND(O.FLAGS, 128), 0, 'VALID', 'INVALID')
    FROM SYS._DD_OBJ O, SYS._DD_LIB L
    WHERE O.OBJ_ID = L.OBJ_ID
      AND O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_LIBRARIES FOR DBA_LIBRARIES;
CREATE OR REPLACE PUBLIC SYNONYM ALL_LIBRARIES FOR ALL_LIBRARIES;
CREATE OR REPLACE PUBLIC SYNONYM USER_LIBRARIES FOR USER_LIBRARIES;

GRANT SELECT ON ALL_LIBRARIES TO PUBLIC;
GRANT SELECT ON USER_LIBRARIES TO PUBLIC;




CREATE OR REPLACE VIEW DBA_JAVA_CLASSES
(OWNER, NAME, MAJOR, MINOR, KIND, ACCESSIBILITY, IS_INNER, IS_ABSTRACT,
 IS_FINAL, STATUS, SOURCE, SUPER, OUTER)
AS
    SELECT /*+ no_merge */
        U.NAME, C.LONGNAME,
        0,  
        0,  
        DECODE(C.KIND, 10, 'CLASS', 'INTERFACE'),
        DECODE(BITAND(C.PROPERTY, 8),
               8, 'PUBLIC',
               DECODE(BITAND(C.PROPERTY, 16),
                      16, 'PRIVATE', 'PROTECTED')),
        DECODE(BITAND(C.PROPERTY, 2048), 0, 'N', 'Y'),
        DECODE(BITAND(C.PROPERTY, 1), 0, 'N', 'Y'),
        DECODE(BITAND(C.PROPERTY, 2), 0, 'N', 'Y'),
        DECODE(BITAND(O.FLAGS, 128), 0, 'VALID', 'INVALID'),
        J.FILENAME,
        C.SUPER,
        C.OUTER
    FROM SYS._DD_OBJ O, SYS._DD_JAVA J, SYS._DD_JAVACLASS C, SYS._DD_USER U
    WHERE O.OBJ_ID = J.OBJ_ID
      AND O.OWNER_ID = U.USER_ID
      AND O.OBJ_ID = C.OBJ_ID
;

CREATE OR REPLACE VIEW ALL_JAVA_CLASSES
(OWNER, NAME, MAJOR, MINOR, KIND, ACCESSIBILITY, IS_INNER, IS_ABSTRACT,
 IS_FINAL, STATUS, SOURCE, SUPER, OUTER)
AS
    SELECT /*+ no_merge */
        U.NAME, C.LONGNAME,
        0,  
        0,  
        DECODE(C.KIND, 10, 'CLASS', 'INTERFACE'),
        DECODE(BITAND(C.PROPERTY, 8),
               8, 'PUBLIC',
               DECODE(BITAND(C.PROPERTY, 16),
                      16, 'PRIVATE', 'PROTECTED')),
        DECODE(BITAND(C.PROPERTY, 2048), 0, 'N', 'Y'),
        DECODE(BITAND(C.PROPERTY, 1), 0, 'N', 'Y'),
        DECODE(BITAND(C.PROPERTY, 2), 0, 'N', 'Y'),
        DECODE(BITAND(O.FLAGS, 128), 0, 'VALID', 'INVALID'),
        J.FILENAME,
        C.SUPER,
        C.OUTER
    FROM SYS._DD_OBJ O, SYS._DD_JAVA J, SYS._DD_JAVACLASS C, SYS._DD_USER U
    WHERE O.OBJ_ID = J.OBJ_ID
      AND O.OWNER_ID = U.USER_ID
      AND (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1
              
          OR EXISTS (
                SELECT NULL
                FROM   SYS._DD_SYSAUTH
                WHERE  GRANTEE_ID = USERENV('SCHEMAID')
                  AND  (PRIV_NO    = -452
                        OR PRIV_NO = -450
                        OR PRIV_NO = -449
                        OR PRIV_NO = -473
                        OR PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
             )
              
          OR O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
          )
;

CREATE OR REPLACE VIEW USER_JAVA_CLASSES
AS
    SELECT  /*+ no_merge */NAME, MAJOR, MINOR, KIND, ACCESSIBILITY, IS_INNER, IS_ABSTRACT,
           IS_FINAL, STATUS, SOURCE, SUPER, OUTER
    FROM DBA_JAVA_CLASSES
    WHERE OWNER = USERENV('SCHEMA')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_JAVA_CLASSES FOR DBA_JAVA_CLASSES;
CREATE OR REPLACE PUBLIC SYNONYM ALL_JAVA_CLASSES FOR ALL_JAVA_CLASSES;
CREATE OR REPLACE PUBLIC SYNONYM USER_JAVA_CLASSES FOR USER_JAVA_CLASSES;

GRANT SELECT ON ALL_JAVA_CLASSES TO PUBLIC;
GRANT SELECT ON USER_JAVA_CLASSES TO PUBLIC;



CREATE OR REPLACE VIEW DBA_JAVA_METHODS
(OWNER, NAME, METHOD_INDEX, METHOD_NAME, ACCESSIBILITY, IS_STATIC, IS_FINAL,
 IS_SYNCHRONIZED, IS_NATIVE, IS_STRICT, ARGUMENTS, THROWS, ARRAY_DEPTH,
 RETURN_TYPE, RETURN_CLASS)
AS
    SELECT /*+ no_merge */
        U.NAME, C.LONGNAME, F.MEMBER_NO, F.LONGNAME,
        DECODE(BITAND(F.PROPERTY, 8),
               8, 'PUBLIC',
               DECODE(BITAND(F.PROPERTY, 16),
                      16, 'PRIVATE', 'PROTECTED')),
        DECODE(BITAND(F.PROPERTY, 64), 0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 2), 0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 128),
               0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 4), 0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 1024), 0, 'N', 'Y'),
        F.COL_CNT, F.THROW_CNT,
        T.ARRAY_DEPTH,
        CASE T.TYPE_NO
            WHEN 1 THEN 'byte'
            WHEN 2 THEN 'short'
            WHEN 3 THEN 'int'
            WHEN 4 THEN 'long'
            WHEN 5 THEN 'float'
            WHEN 6 THEN 'double'
            WHEN 7 THEN 'boolean'
            WHEN 8 THEN 'char'
            WHEN 9 THEN 'void'
            ELSE 'class'
        END,
        T.TYPE_CLASS
    FROM SYS._DD_OBJ O, SYS._DD_JAVACLASS C, SYS._DD_JAVAFIELD F,
         SYS._DD_JAVATDEF T, SYS._DD_USER U
    WHERE O.OWNER_ID = U.USER_ID
      AND O.OBJ_ID = C.OBJ_ID
      AND O.OBJ_ID = F.OBJ_ID
      AND O.OBJ_ID = T.OBJ_ID
      AND C.CLASS_NO = F.CLASS_NO
      AND C.CLASS_NO = T.CLASS_NO
      AND F.MEMBER_NO = T.MEMBER_NO
      AND F.KIND = 20
      AND T.POS_NO = 0
;

CREATE OR REPLACE VIEW ALL_JAVA_METHODS
(OWNER, NAME, METHOD_INDEX, METHOD_NAME, ACCESSIBILITY, IS_STATIC, IS_FINAL,
 IS_SYNCHRONIZED, IS_NATIVE, IS_STRICT, ARGUMENTS, THROWS, ARRAY_DEPTH,
 RETURN_TYPE, RETURN_CLASS)
AS
    SELECT /*+ no_merge */
        U.NAME, C.LONGNAME, F.MEMBER_NO, F.LONGNAME,
        DECODE(BITAND(F.PROPERTY, 8),
               8, 'PUBLIC',
               DECODE(BITAND(F.PROPERTY, 16),
                      16, 'PRIVATE', 'PROTECTED')),
        DECODE(BITAND(F.PROPERTY, 64), 0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 2), 0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 128),
               0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 4), 0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 1024), 0, 'N', 'Y'),
        F.COL_CNT, F.THROW_CNT,
        T.ARRAY_DEPTH,
        CASE T.TYPE_NO
            WHEN 1 THEN 'byte'
            WHEN 2 THEN 'short'
            WHEN 3 THEN 'int'
            WHEN 4 THEN 'long'
            WHEN 5 THEN 'float'
            WHEN 6 THEN 'double'
            WHEN 7 THEN 'boolean'
            WHEN 8 THEN 'char'
            WHEN 9 THEN 'void'
            ELSE 'class'
        END,
        T.TYPE_CLASS
    FROM SYS._DD_OBJ O, SYS._DD_JAVACLASS C, SYS._DD_JAVAFIELD F,
         SYS._DD_JAVATDEF T, SYS._DD_USER U
    WHERE O.OWNER_ID = U.USER_ID
      AND O.OBJ_ID = C.OBJ_ID
      AND O.OBJ_ID = F.OBJ_ID
      AND O.OBJ_ID = T.OBJ_ID
      AND C.CLASS_NO = F.CLASS_NO
      AND C.CLASS_NO = T.CLASS_NO
      AND F.MEMBER_NO = T.MEMBER_NO
      AND F.KIND = 20
      AND T.POS_NO = 0
      AND (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1
              
          OR EXISTS (
                SELECT NULL
                FROM   SYS._DD_SYSAUTH
                WHERE  GRANTEE_ID = USERENV('SCHEMAID')
                  AND  (PRIV_NO    = -452
                        OR PRIV_NO = -450
                        OR PRIV_NO = -449
                        OR PRIV_NO = -473
                        OR PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
             )
              
          OR O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
          )
;

CREATE OR REPLACE VIEW USER_JAVA_METHODS
AS
    SELECT /*+ no_merge */ NAME, METHOD_INDEX, METHOD_NAME, ACCESSIBILITY, IS_STATIC, IS_FINAL,
           IS_SYNCHRONIZED, IS_NATIVE, IS_STRICT, ARGUMENTS, THROWS,
           ARRAY_DEPTH, RETURN_TYPE, RETURN_CLASS
    FROM DBA_JAVA_METHODS
    WHERE OWNER = USERENV('SCHEMA')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_JAVA_METHODS FOR DBA_JAVA_METHODS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_JAVA_METHODS FOR ALL_JAVA_METHODS;
CREATE OR REPLACE PUBLIC SYNONYM USER_JAVA_METHODS FOR USER_JAVA_METHODS;

GRANT SELECT ON ALL_JAVA_METHODS TO PUBLIC;
GRANT SELECT ON USER_JAVA_METHODS TO PUBLIC;



CREATE OR REPLACE VIEW DBA_JAVA_FIELDS
(OWNER, NAME, FIELD_INDEX, FIELD_NAME, ACCESSIBILITY, IS_STATIC, IS_FINAL,
 IS_VOLATILE, IS_TRANSIENT, ARRAY_DEPTH, FIELD_TYPE, FIELD_CLASS)
AS
    SELECT /*+ no_merge */
        U.NAME, C.LONGNAME, F.MEMBER_NO, F.LONGNAME,
        DECODE(BITAND(F.PROPERTY, 8),
               8, 'PUBLIC',
               DECODE(BITAND(F.PROPERTY, 16),
                      16, 'PRIVATE', 'PROTECTED')),
        DECODE(BITAND(F.PROPERTY, 64), 0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 2), 0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 512), 0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 256), 0, 'N', 'Y'),
        T.ARRAY_DEPTH,
        CASE T.TYPE_NO
            WHEN 1 THEN 'byte'
            WHEN 2 THEN 'short'
            WHEN 3 THEN 'int'
            WHEN 4 THEN 'long'
            WHEN 5 THEN 'float'
            WHEN 6 THEN 'double'
            WHEN 7 THEN 'boolean'
            WHEN 8 THEN 'char'
            WHEN 9 THEN 'void'
            ELSE 'class'
        END,
        T.TYPE_CLASS
    FROM SYS._DD_OBJ O, SYS._DD_JAVACLASS C, SYS._DD_JAVAFIELD F,
         SYS._DD_JAVATDEF T, SYS._DD_USER U
    WHERE O.OWNER_ID = U.USER_ID
      AND O.OBJ_ID = C.OBJ_ID
      AND O.OBJ_ID = F.OBJ_ID
      AND O.OBJ_ID = T.OBJ_ID
      AND C.CLASS_NO = F.CLASS_NO
      AND C.CLASS_NO = T.CLASS_NO
      AND F.MEMBER_NO = T.MEMBER_NO
      AND F.KIND = 21
;

CREATE OR REPLACE VIEW ALL_JAVA_FIELDS
(OWNER, NAME, FIELD_INDEX, FIELD_NAME, ACCESSIBILITY, IS_STATIC, IS_FINAL,
 IS_VOLATILE, IS_TRANSIENT, ARRAY_DEPTH, FIELD_TYPE, FIELD_CLASS)
AS
    SELECT /*+ no_merge */
        U.NAME, C.LONGNAME, F.MEMBER_NO, F.LONGNAME,
        DECODE(BITAND(F.PROPERTY, 8),
               8, 'PUBLIC',
               DECODE(BITAND(F.PROPERTY, 16),
                      16, 'PRIVATE', 'PROTECTED')),
        DECODE(BITAND(F.PROPERTY, 64), 0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 2), 0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 512), 0, 'N', 'Y'),
        DECODE(BITAND(F.PROPERTY, 256), 0, 'N', 'Y'),
        T.ARRAY_DEPTH,
        CASE T.TYPE_NO
            WHEN 1 THEN 'byte'
            WHEN 2 THEN 'short'
            WHEN 3 THEN 'int'
            WHEN 4 THEN 'long'
            WHEN 5 THEN 'float'
            WHEN 6 THEN 'double'
            WHEN 7 THEN 'boolean'
            WHEN 8 THEN 'char'
            WHEN 9 THEN 'void'
            ELSE 'class'
        END,
        T.TYPE_CLASS
    FROM SYS._DD_OBJ O, SYS._DD_JAVACLASS C, SYS._DD_JAVAFIELD F,
         SYS._DD_JAVATDEF T, SYS._DD_USER U
    WHERE O.OWNER_ID = U.USER_ID
      AND O.OBJ_ID = C.OBJ_ID
      AND O.OBJ_ID = F.OBJ_ID
      AND O.OBJ_ID = T.OBJ_ID
      AND C.CLASS_NO = F.CLASS_NO
      AND C.CLASS_NO = T.CLASS_NO
      AND F.MEMBER_NO = T.MEMBER_NO
      AND F.KIND = 21
      AND (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1
              
          OR EXISTS (
                SELECT NULL
                FROM   SYS._DD_SYSAUTH
                WHERE  GRANTEE_ID = USERENV('SCHEMAID')
                  AND  (PRIV_NO    = -452
                        OR PRIV_NO = -450
                        OR PRIV_NO = -449
                        OR PRIV_NO = -473
                        OR PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
             )
              
          OR O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
          )
;

CREATE OR REPLACE VIEW USER_JAVA_FIELDS
AS
    SELECT /*+ no_merge */ NAME, FIELD_INDEX, FIELD_NAME, ACCESSIBILITY, IS_STATIC, IS_FINAL,
           IS_VOLATILE, IS_TRANSIENT, ARRAY_DEPTH, FIELD_TYPE, FIELD_CLASS
    FROM DBA_JAVA_FIELDS
    WHERE OWNER = USERENV('SCHEMA')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_JAVA_FIELDS FOR DBA_JAVA_FIELDS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_JAVA_FIELDS FOR ALL_JAVA_FIELDS;
CREATE OR REPLACE PUBLIC SYNONYM USER_JAVA_FIELDS FOR USER_JAVA_FIELDS;

GRANT SELECT ON ALL_JAVA_FIELDS TO PUBLIC;
GRANT SELECT ON USER_JAVA_FIELDS TO PUBLIC;




CREATE OR REPLACE VIEW DBA_JAVA_ARGUMENTS
(OWNER, NAME, METHOD_INDEX, METHOD_NAME, ARGUMENT_POSITION, ARRAY_DEPTH,
 ARGUMENT_TYPE, ARGUMENT_CLASS)
AS
    SELECT /*+ no_merge */
        U.NAME, C.LONGNAME, F.MEMBER_NO, F.LONGNAME, T.POS_NO, T.ARRAY_DEPTH,
        CASE T.TYPE_NO
            WHEN 1 THEN 'byte'
            WHEN 2 THEN 'short'
            WHEN 3 THEN 'int'
            WHEN 4 THEN 'long'
            WHEN 5 THEN 'float'
            WHEN 6 THEN 'double'
            WHEN 7 THEN 'boolean'
            WHEN 8 THEN 'char'
            WHEN 9 THEN 'void'
            ELSE 'class'
        END,
        T.TYPE_CLASS
    FROM SYS._DD_OBJ O, SYS._DD_JAVACLASS C, SYS._DD_JAVAFIELD F,
         SYS._DD_JAVATDEF T, SYS._DD_USER U
    WHERE O.OWNER_ID = U.USER_ID
      AND O.OBJ_ID = C.OBJ_ID
      AND O.OBJ_ID = F.OBJ_ID
      AND O.OBJ_ID = T.OBJ_ID
      AND C.CLASS_NO = F.CLASS_NO
      AND C.CLASS_NO = T.CLASS_NO
      AND F.MEMBER_NO = T.MEMBER_NO
      AND F.KIND = 20
      AND T.POS_NO > 0
;

CREATE OR REPLACE VIEW ALL_JAVA_ARGUMENTS
(OWNER, NAME, METHOD_INDEX, METHOD_NAME, ARGUMENT_POSITION, ARRAY_DEPTH,
 ARGUMENT_TYPE, ARGUMENT_CLASS)
AS
    SELECT /*+ no_merge */
        U.NAME, C.LONGNAME, F.MEMBER_NO, F.LONGNAME, T.POS_NO, T.ARRAY_DEPTH,
        CASE T.TYPE_NO
            WHEN 1 THEN 'byte'
            WHEN 2 THEN 'short'
            WHEN 3 THEN 'int'
            WHEN 4 THEN 'long'
            WHEN 5 THEN 'float'
            WHEN 6 THEN 'double'
            WHEN 7 THEN 'boolean'
            WHEN 8 THEN 'char'
            WHEN 9 THEN 'void'
            ELSE 'class'
        END,
        T.TYPE_CLASS
    FROM SYS._DD_OBJ O, SYS._DD_JAVACLASS C, SYS._DD_JAVAFIELD F,
         SYS._DD_JAVATDEF T, SYS._DD_USER U
    WHERE O.OWNER_ID = U.USER_ID
      AND O.OBJ_ID = C.OBJ_ID
      AND O.OBJ_ID = F.OBJ_ID
      AND O.OBJ_ID = T.OBJ_ID
      AND C.CLASS_NO = F.CLASS_NO
      AND C.CLASS_NO = T.CLASS_NO
      AND F.MEMBER_NO = T.MEMBER_NO
      AND F.KIND = 20
      AND T.POS_NO > 0
      AND (O.OWNER_ID = USERENV('SCHEMAID') OR O.OWNER_ID = 1
              
          OR EXISTS (
                SELECT NULL
                FROM   SYS._DD_SYSAUTH
                WHERE  GRANTEE_ID = USERENV('SCHEMAID')
                  AND  (PRIV_NO    = -452
                        OR PRIV_NO = -450
                        OR PRIV_NO = -449
                        OR PRIV_NO = -473
                        OR PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
             )
              
          OR O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
              )
          )
;

CREATE OR REPLACE VIEW USER_JAVA_ARGUMENTS
AS
    SELECT /*+ no_merge */ OWNER, NAME, METHOD_INDEX, METHOD_NAME, ARGUMENT_POSITION,
           ARRAY_DEPTH, ARGUMENT_TYPE, ARGUMENT_CLASS
    FROM DBA_JAVA_ARGUMENTS
    WHERE OWNER = USERENV('SCHEMA')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_JAVA_ARGUMENTS FOR DBA_JAVA_ARGUMENTS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_JAVA_ARGUMENTS FOR ALL_JAVA_ARGUMENTS;
CREATE OR REPLACE PUBLIC SYNONYM USER_JAVA_ARGUMENTS FOR USER_JAVA_ARGUMENTS;

GRANT SELECT ON ALL_JAVA_ARGUMENTS TO PUBLIC;
GRANT SELECT ON USER_JAVA_ARGUMENTS TO PUBLIC;



CREATE OR REPLACE VIEW DBA_OBJ_AUDIT_OPTS
(OWNER, OBJECT_NAME, OBJECT_TYPE,
 ALT, DEL, IND, INS, LOC, SEL, UPD, REF, EXE, REA, WRI)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME, 'TABLE',
       substr(T.AUDIT_FLAGS, 2 * 0 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 0 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 1 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 1 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 2 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 2 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 3 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 3 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 4 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 4 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 5 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 5 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 6 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 6 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 7 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 7 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 8 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 8 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 9 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 9 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 10 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 10 + 2, 1)
FROM SYS._DD_OBJ O, SYS._DD_USER U, SYS._DD_TBL T
WHERE (instrb(T.AUDIT_FLAGS, 'S') != 0 OR instrb(T.AUDIT_FLAGS, 'A') != 0)
  AND O.OWNER_ID = U.USER_ID AND O.OBJ_ID = T.OBJ_ID

UNION ALL

SELECT U.NAME, O.NAME, 'VIEW',
       substr(V.AUDIT_FLAGS, 2 * 0 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 0 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 1 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 1 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 2 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 2 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 3 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 3 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 4 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 4 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 5 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 5 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 6 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 6 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 7 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 7 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 8 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 8 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 9 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 9 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 10 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 10 + 2, 1)
FROM SYS._DD_OBJ O, SYS._DD_USER U, SYS._DD_VIEW V
WHERE (instrb(V.AUDIT_FLAGS, 'S') != 0 OR instrb(V.AUDIT_FLAGS, 'A') != 0)
  AND O.OWNER_ID = U.USER_ID AND O.OBJ_ID = V.OBJ_ID

UNION ALL

SELECT U.NAME, O.NAME, 'SEQUENCE',
       substr(S.AUDIT_FLAGS, 2 * 0 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 0 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 1 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 1 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 2 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 2 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 3 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 3 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 4 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 4 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 5 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 5 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 6 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 6 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 7 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 7 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 8 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 8 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 9 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 9 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 10 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 10 + 2, 1)
FROM SYS._DD_OBJ O, SYS._DD_USER U, SYS._DD_SEQ S
WHERE (instrb(S.AUDIT_FLAGS, 'S') != 0 OR instrb(S.AUDIT_FLAGS, 'A') != 0)
  AND O.OWNER_ID = U.USER_ID AND O.OBJ_ID = S.OBJ_ID

UNION ALL

SELECT U.NAME, O.NAME, 'PROCEDURE',
       substr(P.AUDIT_FLAGS, 2 * 0 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 0 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 1 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 1 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 2 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 2 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 3 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 3 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 4 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 4 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 5 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 5 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 6 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 6 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 7 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 7 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 8 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 8 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 9 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 9 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 10 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 10 + 2, 1)
FROM SYS._DD_OBJ O, SYS._DD_USER U, SYS._DD_PSMUNIT P
WHERE (instrb(P.AUDIT_FLAGS, 'S') != 0 OR instrb(P.AUDIT_FLAGS, 'A') != 0)
  AND O.OWNER_ID = U.USER_ID AND O.OBJ_ID = P.OBJ_ID

UNION ALL

SELECT U.NAME, O.NAME, 'DIRECTORY',
       substr(D.AUDIT_FLAGS, 2 * 0 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 0 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 1 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 1 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 2 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 2 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 3 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 3 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 4 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 4 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 5 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 5 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 6 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 6 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 7 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 7 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 8 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 8 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 9 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 9 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 10 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 10 + 2, 1)
FROM SYS._DD_OBJ O, SYS._DD_USER U, SYS._DD_DIR D
WHERE (instrb(D.AUDIT_FLAGS, 'S') != 0 OR instrb(D.AUDIT_FLAGS, 'A') != 0)
  AND O.OWNER_ID = U.USER_ID AND O.OBJ_ID = D.OBJ_ID

UNION ALL

SELECT U.NAME, O.NAME, 'JAVA',
       substr(J.AUDIT_FLAGS, 2 * 0 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 0 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 1 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 1 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 2 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 2 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 3 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 3 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 4 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 4 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 5 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 5 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 6 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 6 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 7 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 7 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 8 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 8 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 9 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 9 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 10 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 10 + 2, 1)
FROM SYS._DD_OBJ O, SYS._DD_USER U, SYS._DD_JAVA J
WHERE (instrb(J.AUDIT_FLAGS, 'S') != 0 OR instrb(J.AUDIT_FLAGS, 'A') != 0)
  AND O.OWNER_ID = U.USER_ID AND O.OBJ_ID = J.OBJ_ID
;


CREATE OR REPLACE VIEW USER_OBJ_AUDIT_OPTS
(OBJECT_NAME, OBJECT_TYPE,
 ALT, DEL, IND, INS, LOC, SEL, UPD, REF, EXE, REA, WRI)
AS
SELECT /*+ no_merge */ O.NAME, 'TABLE',
       substr(T.AUDIT_FLAGS, 2 * 0 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 0 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 1 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 1 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 2 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 2 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 3 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 3 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 4 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 4 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 5 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 5 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 6 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 6 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 7 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 7 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 8 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 8 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 9 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 9 + 2, 1),
       substr(T.AUDIT_FLAGS, 2 * 10 + 1, 1)
       || '/' || substr(T.AUDIT_FLAGS, 2 * 10 + 2, 1)
FROM SYS._DD_OBJ O, SYS._DD_TBL T
WHERE (instrb(T.AUDIT_FLAGS, 'S') != 0 OR instrb(T.AUDIT_FLAGS, 'A') != 0)
  AND O.OWNER_ID = USERENV('SCHEMAID') AND O.OBJ_ID = T.OBJ_ID

UNION ALL

SELECT O.NAME, 'VIEW',
       substr(V.AUDIT_FLAGS, 2 * 0 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 0 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 1 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 1 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 2 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 2 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 3 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 3 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 4 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 4 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 5 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 5 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 6 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 6 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 7 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 7 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 8 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 8 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 9 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 9 + 2, 1),
       substr(V.AUDIT_FLAGS, 2 * 10 + 1, 1)
       || '/' || substr(V.AUDIT_FLAGS, 2 * 10 + 2, 1)
FROM SYS._DD_OBJ O, SYS._DD_VIEW V
WHERE (instrb(V.AUDIT_FLAGS, 'S') != 0 OR instrb(V.AUDIT_FLAGS, 'A') != 0)
  AND O.OWNER_ID = USERENV('SCHEMAID') AND O.OBJ_ID = V.OBJ_ID

UNION ALL

SELECT O.NAME, 'SEQUENCE',
       substr(S.AUDIT_FLAGS, 2 * 0 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 0 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 1 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 1 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 2 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 2 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 3 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 3 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 4 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 4 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 5 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 5 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 6 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 6 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 7 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 7 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 8 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 8 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 9 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 9 + 2, 1),
       substr(S.AUDIT_FLAGS, 2 * 10 + 1, 1)
       || '/' || substr(S.AUDIT_FLAGS, 2 * 10 + 2, 1)
FROM SYS._DD_OBJ O, SYS._DD_SEQ S
WHERE (instrb(S.AUDIT_FLAGS, 'S') != 0 OR instrb(S.AUDIT_FLAGS, 'A') != 0)
  AND O.OWNER_ID = USERENV('SCHEMAID') AND O.OBJ_ID = S.OBJ_ID

UNION ALL

SELECT O.NAME, 'PROCEDURE',
       substr(P.AUDIT_FLAGS, 2 * 0 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 0 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 1 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 1 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 2 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 2 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 3 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 3 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 4 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 4 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 5 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 5 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 6 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 6 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 7 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 7 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 8 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 8 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 9 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 9 + 2, 1),
       substr(P.AUDIT_FLAGS, 2 * 10 + 1, 1)
       || '/' || substr(P.AUDIT_FLAGS, 2 * 10 + 2, 1)
FROM SYS._DD_OBJ O, SYS._DD_PSMUNIT P
WHERE (instrb(P.AUDIT_FLAGS, 'S') != 0 OR instrb(P.AUDIT_FLAGS, 'A') != 0)
  AND O.OWNER_ID = USERENV('SCHEMAID') AND O.OBJ_ID = P.OBJ_ID

UNION ALL

SELECT O.NAME, 'DIRECTORY',
       substr(D.AUDIT_FLAGS, 2 * 0 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 0 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 1 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 1 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 2 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 2 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 3 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 3 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 4 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 4 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 5 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 5 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 6 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 6 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 7 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 7 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 8 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 8 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 9 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 9 + 2, 1),
       substr(D.AUDIT_FLAGS, 2 * 10 + 1, 1)
       || '/' || substr(D.AUDIT_FLAGS, 2 * 10 + 2, 1)
FROM SYS._DD_OBJ O, SYS._DD_DIR D
WHERE (instrb(D.AUDIT_FLAGS, 'S') != 0 OR instrb(D.AUDIT_FLAGS, 'A') != 0)
  AND O.OWNER_ID = USERENV('SCHEMAID') AND O.OBJ_ID = D.OBJ_ID

UNION ALL

SELECT O.NAME, 'JAVA',
       substr(J.AUDIT_FLAGS, 2 * 0 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 0 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 1 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 1 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 2 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 2 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 3 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 3 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 4 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 4 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 5 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 5 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 6 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 6 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 7 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 7 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 8 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 8 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 9 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 9 + 2, 1),
       substr(J.AUDIT_FLAGS, 2 * 10 + 1, 1)
       || '/' || substr(J.AUDIT_FLAGS, 2 * 10 + 2, 1)
FROM SYS._DD_OBJ O, SYS._DD_JAVA J
WHERE (instrb(J.AUDIT_FLAGS, 'S') != 0 OR instrb(J.AUDIT_FLAGS, 'A') != 0)
  AND O.OWNER_ID = USERENV('SCHEMAID') AND O.OBJ_ID = J.OBJ_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_OBJ_AUDIT_OPTS FOR DBA_OBJ_AUDIT_OPTS;
CREATE OR REPLACE PUBLIC SYNONYM USER_OBJ_AUDIT_OPTS FOR USER_OBJ_AUDIT_OPTS;

GRANT SELECT ON USER_OBJ_AUDIT_OPTS TO PUBLIC;


CREATE OR REPLACE VIEW DBA_PRIV_AUDIT_OPTS
(USER_NAME, PROXY_NAME, PRIVILEGE, SUCCESS, FAILURE)
AS
SELECT /*+ no_merge */ U.NAME, X.NAME, P.NAME,
       DECODE(A.SUCCESS, 1, 'BY SESSION',
                         2, 'BY ACCESS', 'NOT SET'),
       DECODE(A.FAILURE, 1, 'BY SESSION',
                         2, 'BY ACCESS', 'NOT SET')
FROM SYS._DD_USER U, SYS._DD_USER X, SYS.SYSTEM_PRIVILEGES P, SYS._DD_AUDIT A
WHERE A.USER_ID = U.USER_ID AND A.TYPE_NO = P.PRIV_NO
  AND A.PROXY_ID = X.USER_ID(+)
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_PRIV_AUDIT_OPTS FOR DBA_PRIV_AUDIT_OPTS;


CREATE OR REPLACE VIEW DBA_AUDIT_TRAIL
(OS_USERNAME, USERNAME, USERHOST, TIMESTAMP, OWNER, OBJ_NAME,
 SESSIONID, SERIALNO, ACTION, ENTRYID, STATEMENTID, PRIV_USED, CLIENT_ID,
 INSTANCE_NUMBER, OS_PROCESS, TRANSACTIONID, TSN, SQL_TEXT)
AS
SELECT /*+ no_merge */ A.OS_USER, A.USER_NAME, A.USER_HOST,
       to_char(A.AUD_TIME, 'YYYY-MM-DD:HH24:MI:SS'),
       A.OBJ_OWNER, A.OBJ_NAME,
       A.SESS_ID, A.SERIAL_NO, A.ACTION, A.AUD_NO, A.STMT_ID,
       SP.NAME || OP.NAME, A.CLIENT_ID,
       A.INSTANCE, A.PID,
       A.USGMT_ID || '.' || A.SLOTNO || '.' || A.WRAPNO,
       A.TSN, A.SQLTEXT
FROM SYS._DD_AUD A, SYS.SYSTEM_PRIVILEGES SP, SYS.OBJECT_PRIVILEGES OP
WHERE A.PRIV_NO = SP.PRIV_NO(+) AND A.PRIV_NO = OP.PRIV_NO(+)
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_AUDIT_TRAIL FOR DBA_AUDIT_TRAIL;

CREATE OR REPLACE VIEW USER_AUDIT_TRAIL
(OS_USERNAME, USERNAME, USERHOST, TIMESTAMP, OWNER, OBJ_NAME,
 SESSIONID, SERIALNO, ACTION, ENTRYID, STATEMENTID, PRIV_USED, CLIENT_ID,
 INSTANCE_NUMBER, OS_PROCESS, TRANSACTIONID, TSN, SQL_TEXT)
AS
SELECT /*+ no_merge */ D.*
FROM DBA_AUDIT_TRAIL D, SYS._DD_USER U
WHERE (D.OWNER = U.NAME AND U.USER_ID = USERENV('SCHEMAID'))
   OR (D.OWNER IS NULL AND D.USERNAME = U.NAME AND U.USER_ID = USERENV('SCHEMAID'))
   
   OR (U.USER_ID = USERENV('SCHEMAID') AND U.NAME = 'SYS') 
;

CREATE OR REPLACE PUBLIC SYNONYM USER_AUDIT_TRAIL FOR USER_AUDIT_TRAIL;
GRANT SELECT ON USER_AUDIT_TRAIL TO PUBLIC;


CREATE OR REPLACE VIEW SESSION_PRIVS
(PRIVILEGE)
AS
SELECT /*+ no_merge */ DISTINCT P.NAME
FROM X$USER_ROLE R, SYS._DD_SYSAUTH S, SYS.SYSTEM_PRIVILEGES P
WHERE R.USER_ID = S.GRANTEE_ID AND S.PRIV_NO = P.PRIV_NO
;

CREATE OR REPLACE PUBLIC SYNONYM SESSION_PRIVS FOR SESSION_PRIVS;
GRANT SELECT ON SESSION_PRIVS TO PUBLIC;


CREATE OR REPLACE VIEW ROLE_SYS_PRIVS
(ROLE, PRIVILEGE, ADMIN_OPTION)
AS
SELECT /*+ no_merge */ U.NAME, P.NAME,
       DECODE(S.FLAGS, 0, 'NO', 4, 'YES', 'ERR')
FROM X$USER_ROLE R, SYS._DD_SYSAUTH S, SYS.SYSTEM_PRIVILEGES P, SYS._DD_USER U
WHERE R.USER_ID = S.GRANTEE_ID AND S.PRIV_NO = P.PRIV_NO
  AND R.USER_ID = U.USER_ID
  AND R.USER_ID NOT IN (USERENV('SCHEMAID'), 1)
;

CREATE OR REPLACE PUBLIC SYNONYM ROLE_SYS_PRIVS FOR ROLE_SYS_PRIVS;
GRANT SELECT ON ROLE_SYS_PRIVS TO PUBLIC;


CREATE OR REPLACE VIEW ROLE_TAB_PRIVS
(ROLE, OWNER, TABLE_NAME, COLUMN_NAME, PRIVILEGE, ADMIN_OPTION)
AS
SELECT /*+ no_merge */ U.NAME, OBJ_OWNER.NAME, OBJ.NAME, '', O.NAME,
       DECODE(S.FLAGS, 0, 'NO', 4, 'YES', 'ERR')

FROM X$USER_ROLE R, SYS._DD_OBJAUTH S, SYS.OBJECT_PRIVILEGES O, SYS._DD_USER U, SYS._DD_OBJ OBJ, SYS._DD_USER OBJ_OWNER
WHERE R.USER_ID = S.GRANTEE_ID AND S.PRIV_NO = O.PRIV_NO
    AND R.USER_ID = U.USER_ID
    AND S.OBJ_ID = OBJ.OBJ_ID
    AND OBJ.OWNER_ID = OBJ_OWNER.USER_ID
    AND S.COL_NO < 0
    AND R.USER_ID NOT IN (USERENV('SCHEMAID'), 1)
UNION ALL
SELECT U.NAME, OBJ_OWNER.NAME, OBJ.NAME, COL.NAME, O.NAME,
       DECODE(S.FLAGS, 0, 'NO', 4, 'YES', 'ERR')

FROM X$USER_ROLE R, SYS._DD_OBJAUTH S, SYS.OBJECT_PRIVILEGES O, SYS._DD_USER U, SYS._DD_OBJ OBJ, SYS._DD_USER OBJ_OWNER, SYS._DD_COL COL
WHERE R.USER_ID = S.GRANTEE_ID AND S.PRIV_NO = O.PRIV_NO
    AND R.USER_ID = U.USER_ID
    AND S.OBJ_ID = OBJ.OBJ_ID
    AND OBJ.OWNER_ID = OBJ_OWNER.USER_ID
    AND S.COL_NO > -1
    AND S.OBJ_ID = COL.OBJ_ID
    AND S.COL_NO = COL.COL_NO
    AND R.USER_ID NOT IN (USERENV('SCHEMAID'), 1)
;

CREATE OR REPLACE PUBLIC SYNONYM ROLE_TAB_PRIVS FOR ROLE_TAB_PRIVS;
GRANT SELECT ON ROLE_TAB_PRIVS TO PUBLIC;




CREATE OR REPLACE VIEW ROLE_ROLE_PRIVS
(ROLE, GRANTED_ROLE, ADMIN_OPTION)
AS
SELECT /*+ no_merge */ U.NAME, U2.NAME,
       DECODE(S.FLAGS, 0, 'NO', 4, 'YES', 'ERR')
FROM X$USER_ROLE R, SYS._DD_SYSAUTH S, SYS._DD_USER U, SYS._DD_USER U2
WHERE R.USER_ID = S.PRIV_NO AND S.PRIV_NO > 0
  AND S.GRANTEE_ID = U.USER_ID AND U.TYPE_NO = 0
  AND R.USER_ID = U2.USER_ID AND U2.TYPE_NO = 0
  AND (R.USER_ID = 1
       OR R.USER_ID IN (SELECT USER_ID FROM X$USER_ROLE))
;

CREATE OR REPLACE PUBLIC SYNONYM ROLE_ROLE_PRIVS FOR ROLE_ROLE_PRIVS;
GRANT SELECT ON ROLE_ROLE_PRIVS TO PUBLIC;


CREATE OR REPLACE VIEW DBA_REDEFINITION_OBJECTS
(OBJECT_TYPE, OBJECT_OWNER, OBJECT_NAME, BASE_TABLE_OWNER, BASE_TABLE_NAME,
 INTERIM_OBJECT_OWNER, INTERIM_OBJECT_NAME)
AS
SELECT /*+ no_merge */ 'TABLE',
       RO.OWNER, RO.NAME, R.OWNER, R.NAME,
       RO.INT_OWNER, RO.INT_NAME
FROM SYS._DD_REDEFOBJ RO, SYS._DD_REDEF R
WHERE RO.REDEF_ID = R.ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_REDEFINITION_OBJECTS FOR DBA_REDEFINITION_OBJECTS;




CREATE OR REPLACE VIEW DBA_ENCRYPTED_COLUMNS
(OWNER, TABLE_NAME, COLUMN_NAME, ENCRYPTION_ALG, SALT)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME, C.NAME,
       DECODE(E.ENC_ALG, 0, 'DES 64 bits key',
                         1, '3 Key Triple DES 168 bits key',
                         2, 'AES 128 bits key',
                         3, 'AES 192 bits key',
                         4, 'AES 256 bits key',
                         5, 'ARIA 128 bits key',
                         6, 'ARIA 192 bits key',
                         7, 'ARIA 256 bits key',
                         8, 'SEED 128 bits key',
              'ERROR'),
       DECODE(BITAND(C.PROPERTY, 536870912), 0, 'YES', 'NO')
FROM SYS._DD_OBJ O, SYS._DD_COL C, SYS._DD_ENC E, SYS._DD_USER U
WHERE O.OBJ_ID = E.OBJ_ID AND E.OBJ_ID = C.OBJ_ID
  AND BITAND(O.FLAGS, 128) = 0
  AND BITAND(C.PROPERTY, 67108864) = 67108864
  AND O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE VIEW ALL_ENCRYPTED_COLUMNS
(OWNER, TABLE_NAME, COLUMN_NAME, ENCRYPTION_ALG, SALT)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME, C.NAME,
       DECODE(E.ENC_ALG, 0, 'DES 64 bits key',
                         1, '3 Key Triple DES 168 bits key',
                         2, 'AES 128 bits key',
                         3, 'AES 192 bits key',
                         4, 'AES 256 bits key',
                         5, 'ARIA 128 bits key',
                         6, 'ARIA 192 bits key',
                         7, 'ARIA 256 bits key',
                         8, 'SEED 128 bits key',
              'ERROR'),
       DECODE(BITAND(C.PROPERTY, 536870912), 0, 'YES', 'NO')
FROM SYS._DD_OBJ O, SYS._DD_COL C, SYS._DD_ENC E, SYS._DD_USER U
WHERE O.OBJ_ID = E.OBJ_ID AND E.OBJ_ID = C.OBJ_ID
  AND BITAND(O.FLAGS, 128) = 0
  AND BITAND(C.PROPERTY, 67108864) = 67108864
  AND O.OWNER_ID = U.USER_ID
  AND (O.OWNER_ID = USERENV('SCHEMAID')
          
       OR O.OBJ_ID IN (
                SELECT OBJ_ID
                FROM   SYS._DD_OBJAUTH
                WHERE  GRANTEE_ID IN (SELECT USER_ID FROM X$USER_ROLE)
              )
          
       OR (
              EXISTS (SELECT NULL
                      FROM   (SELECT SAU2.PRIV_NO
                              FROM   SYS._DD_SYSAUTH SAU2
                              START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                              CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                             ) SAU
                      WHERE (SAU.PRIV_NO    = -483
                              OR SAU.PRIV_NO = -482
                              OR SAU.PRIV_NO = -481
                              OR SAU.PRIV_NO = -480
                              OR SAU.PRIV_NO = -485
                              OR SAU.PRIV_NO = -473
                              OR SAU.PRIV_NO IN (
                                    SELECT USER_ID FROM SYS._DD_USER
                                    WHERE NAME = 'DBA')
                             )
                     )
          )
      )
;

CREATE OR REPLACE VIEW USER_ENCRYPTED_COLUMNS
(TABLE_NAME, COLUMN_NAME, ENCRYPTION_ALG, SALT)
AS
SELECT /*+ no_merge */ O.NAME, C.NAME,
       DECODE(E.ENC_ALG, 0, 'DES 64 bits key',
                         1, '3 Key Triple DES 168 bits key',
                         2, 'AES 128 bits key',
                         3, 'AES 192 bits key',
                         4, 'AES 256 bits key',
                         5, 'ARIA 128 bits key',
                         6, 'ARIA 192 bits key',
                         7, 'ARIA 256 bits key',
                         8, 'SEED 128 bits key',
              'ERROR'),
       DECODE(BITAND(C.PROPERTY, 536870912), 0, 'YES', 'NO')
FROM SYS._DD_OBJ O, SYS._DD_COL C, SYS._DD_ENC E
WHERE O.OBJ_ID = E.OBJ_ID AND E.OBJ_ID = C.OBJ_ID
  AND BITAND(O.FLAGS, 128) = 0
  AND BITAND(C.PROPERTY, 67108864) = 67108864
  AND O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_ENCRYPTED_COLUMNS FOR DBA_ENCRYPTED_COLUMNS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_ENCRYPTED_COLUMNS FOR ALL_ENCRYPTED_COLUMNS;
CREATE OR REPLACE PUBLIC SYNONYM USER_ENCRYPTED_COLUMNS FOR USER_ENCRYPTED_COLUMNS;
GRANT SELECT ON ALL_ENCRYPTED_COLUMNS TO PUBLIC;
GRANT SELECT ON USER_ENCRYPTED_COLUMNS TO PUBLIC;


CREATE OR REPLACE VIEW DBA_MVIEWS
(OWNER, MVIEW_NAME, CONTAINER_NAME, QUERY, QUERY_LEN, UPDATABLE, UPDATE_LOG,
 MASTER_ROLLBACK_SEG, MASTER_LINK, REWRITE_ENABLED, REWRITE_CAPABILITY,
 REFRESH_MODE, REFRESH_METHOD, BUILD_MODE, FAST_REFRESHABLE,
 LAST_REFRESH_TYPE, LAST_REFRESH_DATE, STALENESS, AFTER_FAST_REFRESH,
 UNKNOWN_PREBUILT, UNKNOWN_PLSQL_FUNC, UNKNOWN_EXTERNAL_TABLE,
 UNKNOWN_CONSIDER_FRESH, UNKNOWN_IMPORT, UNKNOWN_TRUSTED_FD,
 COMPILE_STATE, USE_NO_INDEX, STALE_SINCE, INTERVAL, REDUCED_PRECISION,
 REFRESH_KEY)
AS
SELECT /*+ no_merge */ U.NAME AS OWNER,
       O.NAME AS MVIEW_NAME,
       O.NAME AS CONTAINER_NAME,
       M.TEXT AS QUERY,
       LENGTH(M.TEXT) AS QUERY_LEN,
       'N' AS UPDATABLE,
       '' AS UPDATE_LOG,
       '' AS MASTER_ROLLBACK_SEG,
       '' AS MASTER_LINK,
       DECODE(BITAND(M.FLAGS, 4096), 0, 'N', 'Y') AS REWRITE_ENABLED,
       'GENERAL' AS REWRITE_CAPABILITY,
       DECODE(BITAND(M.FLAGS, 128), 128, 'NEVER',
        DECODE(BITAND(M.FLAGS, 1), 0, 'COMMIT', 'DEMAND')) AS REFRESH_MODE,
       DECODE(BITAND(M.FLAGS, 16), 16, 'F',
        DECODE(BITAND(M.FLAGS, 32), 32, 'C',
         DECODE(BITAND(M.FLAGS, 64), 64, '?', 'N'))) AS REFRESH_METHOD,
       DECODE(BITAND(M.FLAGS, 268435456), 268435456, 'PREBUILT',
        DECODE(BITAND(M.FLAGS, 256), 256, 'IMMEDIATE', 'DEFERRED')) AS BUILD_MODE,
       DECODE(BITAND(M.FLAGS, 4),
              4, 'DML', 'NO') AS FAST_REFRESHABLE,
       DECODE(M.LAST_RFSH_TYPE, 1, 'COMPLETE', 
              2, 'FAST', 'NA') AS LAST_REFRESH_TYPE,
       CASE M.LAST_RFSH_DATE WHEN TO_DATE('19500101','YYYYMMDD') THEN NULL ELSE M.LAST_RFSH_DATE END
            AS LAST_REFRESH_DATE,
       DECODE(M.STATUS,
               1, 'STALE',
               0, 'FRESH',
               3, 'ONREFRESH',
               2, 'STALE'
               ) AS STALENESS,
       'NA' AS AFTER_FAST_REFRESH,
       'N' AS UNKNOWN_PREBUILT,
       'N' AS UNKNOWN_PLSQL_FUNC,
       'N' AS UNKNOWN_EXTERNAL_TABLE,
       'N' AS UNKNOWN_CONSIDER_FRESH,
       'N' AS UNKNOWN_IMPORT,
       'N' AS UNKNOWN_TRUSTED_FD,
       'VALID' AS COMPILE_STATE,
       'N' AS USE_NO_INDEX,
       NULL AS STALE_SINCE,
       RFSH_INTERVAL AS INTERVAL,
       DECODE(BITAND(M.FLAGS, 268435456), 268435456, DECODE(BITAND(M.FLAGS, 536870912), 536870912, 'Y', 'N'), NULL) AS REDUCED_PRECISION,
       DECODE(BITAND(M.FLAGS, 16777216), 16777216, 'ROWID', 'PRIMARY KEY') AS REFRESH_KEY

FROM SYS._DD_USER U, SYS._DD_MVIEW M, SYS._DD_OBJ O
WHERE M.OBJ_ID = O.OBJ_ID AND O.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_MVIEWS FOR DBA_MVIEWS;

CREATE OR REPLACE VIEW ALL_MVIEWS
AS
SELECT /*+ no_merge */ M.* FROM DBA_MVIEWS M, SYS._DD_OBJ O, SYS._DD_USER U
WHERE O.OWNER_ID = U.USER_ID AND M.MVIEW_NAME = O.NAME
    AND U.NAME = M.OWNER AND O.TYPE_NO = 1
    AND
    (
        U.USER_ID = USERENV('SCHEMAID')
        OR U.USER_ID = 1
        OR EXISTS (SELECT NULL
                   FROM   (SELECT SAU2.PRIV_NO
                           FROM   SYS._DD_SYSAUTH SAU2
                           START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                           CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                          ) SAU
                   WHERE (SAU.PRIV_NO    = -483
                           OR SAU.PRIV_NO = -482
                           OR SAU.PRIV_NO = -481
                           OR SAU.PRIV_NO = -480
                           OR SAU.PRIV_NO = -485
                           OR SAU.PRIV_NO = -473
                           OR SAU.PRIV_NO IN (
                                 SELECT USER_ID FROM SYS._DD_USER
                                 WHERE NAME = 'DBA')
                          )
                  )
        OR O.OBJ_ID IN (
            SELECT OBJ_ID
            FROM SYS._DD_OBJAUTH
            WHERE GRANTEE_ID IN (SELECT USER_ID FROM X$USER_ROLE)
        )
    )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_MVIEWS FOR ALL_MVIEWS;
GRANT SELECT ON ALL_MVIEWS TO PUBLIC;

CREATE OR REPLACE VIEW USER_MVIEWS
AS
SELECT M.* FROM DBA_MVIEWS M, SYS._DD_USER U
WHERE U.NAME = M.OWNER AND U.USER_ID = USERENV('SCHEMAID');

CREATE OR REPLACE PUBLIC SYNONYM USER_MVIEWS FOR USER_MVIEWS;
GRANT SELECT ON USER_MVIEWS TO PUBLIC;


CREATE OR REPLACE VIEW USER_MVIEW_COLUMNS
(MVIEW_NAME, TABLE_COLUMN_ID, MVIEW_COLUMN_ID, IS_EQC)
AS
SELECT /*+ no_merge */ 
       O.NAME AS MVIEW_NAME,
       MC.COL_NO AS TABLE_COLUMN_ID,
       MC.POS_NO AS MVIEW_COLUMN_ID,
       DECODE(BITAND(MC.FLAGS,2), 0, 'NO', 'YES')
FROM SYS._DD_MVCOL MC, SYS._DD_OBJ O
WHERE MC.OBJ_ID = O.OBJ_ID AND O.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_MVIEW_COLUMNS FOR USER_MVIEW_COLUMNS;
GRANT SELECT ON USER_MVIEW_COLUMNS TO PUBLIC;




CREATE OR REPLACE VIEW DBA_MVIEW_LOGS
( LOG_OWNER, MASTER, LOG_TABLE, LOG_TRIGGER, ROWIDS, PRIMARY_KEY,
  FILTER_COLUMNS, SEQUENCE, INCLUDE_NEW_VALUES)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME, M.LOG, M.TRIG,
       DECODE(BITAND(M.FLAGS,1), 0, 'NO', 'YES'),
       DECODE(BITAND(M.FLAGS,2), 0, 'NO', 'YES'),
       DECODE(BITAND(M.FLAGS,4), 0, 'NO', 'YES'),
       DECODE(BITAND(M.FLAGS,8), 0, 'NO', 'YES'),
       DECODE(BITAND(M.FLAGS,16), 0, 'NO', 'YES')
FROM SYS._DD_MLOG M, SYS._DD_USER U, SYS._DD_OBJ O
WHERE M.OBJ_ID = O.OBJ_ID AND O.OWNER_ID = U.USER_ID;

CREATE OR REPLACE PUBLIC SYNONYM DBA_MVIEW_LOGS FOR DBA_MVIEW_LOGS;

CREATE OR REPLACE VIEW ALL_MVIEW_LOGS
AS
SELECT /*+ no_merge */ M.* FROM DBA_MVIEW_LOGS M, SYS._DD_OBJ O, SYS._DD_USER U
WHERE O.OWNER_ID = U.USER_ID AND M.MASTER = O.NAME
    AND U.NAME = M.LOG_OWNER AND O.TYPE_NO = 1
    AND
    (
        U.USER_ID = USERENV('SCHEMAID')
        OR U.USER_ID = 1
        OR EXISTS (SELECT NULL
                   FROM   (SELECT SAU2.PRIV_NO
                           FROM   SYS._DD_SYSAUTH SAU2
                           START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                           CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                          ) SAU
                   WHERE (SAU.PRIV_NO    = -483
                           OR SAU.PRIV_NO = -482
                           OR SAU.PRIV_NO = -481
                           OR SAU.PRIV_NO = -480
                           OR SAU.PRIV_NO = -485
                           OR SAU.PRIV_NO = -473
                           OR SAU.PRIV_NO IN (
                                 SELECT USER_ID FROM SYS._DD_USER
                                 WHERE NAME = 'DBA')
                          )
                  )
        OR O.OBJ_ID IN (
            SELECT OBJ_ID
            FROM SYS._DD_OBJAUTH
            WHERE GRANTEE_ID IN (SELECT USER_ID FROM X$USER_ROLE)
        )
    )
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_MVIEW_LOGS FOR ALL_MVIEW_LOGS;
GRANT SELECT ON ALL_MVIEW_LOGS TO PUBLIC;

CREATE OR REPLACE VIEW USER_MVIEW_LOGS
AS
SELECT /*+ no_merge */ M.* FROM DBA_MVIEW_LOGS M, SYS._DD_USER U
WHERE U.NAME = M.LOG_OWNER AND U.USER_ID = USERENV('SCHEMAID');

CREATE OR REPLACE PUBLIC SYNONYM USER_MVIEW_LOGS FOR USER_MVIEW_LOGS;
GRANT SELECT ON USER_MVIEW_LOGS TO PUBLIC;


CREATE OR REPLACE VIEW DBA_TRIGGER_COLS
(TRIGGER_OWNER, TRIGGER_NAME, TABLE_OWNER, TABLE_NAME, COLUMN_NAME,
 COLUMN_LIST, COLUMN_USAGE)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME, U2.NAME, O2.NAME, C.NAME,
       DECODE(min(TC.TYPE_NO), 0,'YES','NO'),
       DECODE(max(TC.TYPE_NO),
              1, 'NEW IN',
              2, 'OLD IN',
              3, 'NEW IN OLD IN',
              4, 'NEW OUT',
              5, 'NEW IN OUT',
              6, 'NEW OUT OLD IN',
              7, 'NEW IN OUT OLD IN',
              16, 'PARENT IN',
              'NONE')

FROM SYS._DD_TRG T, SYS._DD_TCOL TC, SYS._DD_COL C,
     SYS._DD_OBJ O, SYS._DD_OBJ O2,
     SYS._DD_USER U, SYS._DD_USER U2
WHERE T.OBJ_ID = TC.OBJ_ID AND T.OBJ_ID = O.OBJ_ID
  AND BITAND(O2.FLAGS, 128) = 0
  AND T.BO_ID = C.OBJ_ID AND T.BO_ID = O2.OBJ_ID AND C.COL_NO = TC.COL_NO
  AND U.USER_ID = O.OWNER_ID AND U2.USER_ID = O2.OWNER_ID
GROUP BY U.NAME, O.NAME, U2.NAME, O2.NAME, C.NAME
;

CREATE OR REPLACE VIEW ALL_TRIGGER_COLS
(TRIGGER_OWNER, TRIGGER_NAME, TABLE_OWNER, TABLE_NAME, COLUMN_NAME,
 COLUMN_LIST, COLUMN_USAGE)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME, U2.NAME, O2.NAME, C.NAME,
       DECODE(min(TC.TYPE_NO), 0,'YES','NO'),
       DECODE(max(TC.TYPE_NO), 1, 'NEW IN',
              2, 'OLD IN',
              3, 'NEW IN OLD IN',
              4, 'NEW OUT',
              5, 'NEW IN OUT',
              6, 'NEW OUT OLD IN',
              7, 'NEW IN OUT OLD IN',
              16, 'PARENT IN',
              'NONE')

FROM SYS._DD_TRG T, SYS._DD_TCOL TC, SYS._DD_COL C,
     SYS._DD_OBJ O, SYS._DD_OBJ O2,
     SYS._DD_USER U, SYS._DD_USER U2
WHERE T.OBJ_ID = TC.OBJ_ID AND T.OBJ_ID = O.OBJ_ID
  AND BITAND(O2.FLAGS, 128) = 0
  AND T.BO_ID = C.OBJ_ID AND T.BO_ID = O2.OBJ_ID AND C.COL_NO = TC.COL_NO
  AND U.USER_ID = O.OWNER_ID AND U2.USER_ID = O2.OWNER_ID
  AND (O.OWNER_ID = USERENV('SCHEMAID') OR O2.OWNER_ID = USERENV('SCHEMAID')
          
       OR EXISTS (
            SELECT NULL
             FROM   SYS._DD_SYSAUTH
             WHERE  GRANTEE_ID = USERENV('SCHEMAID')
               AND  (PRIV_NO    = -447
                     OR PRIV_NO = -473
                     OR PRIV_NO IN (
                           SELECT USER_ID FROM SYS._DD_USER
                           WHERE NAME = 'DBA')
                    )
          )
          
      OR  O.OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
      OR  O2.OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
    )
GROUP BY U.NAME, O.NAME, U2.NAME, O2.NAME, C.NAME
;

CREATE OR REPLACE VIEW USER_TRIGGER_COLS
(TRIGGER_OWNER, TRIGGER_NAME, TABLE_OWNER, TABLE_NAME, COLUMN_NAME,
 COLUMN_LIST, COLUMN_USAGE)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME, U2.NAME, O2.NAME, C.NAME,
       DECODE(min(TC.TYPE_NO), 0,'YES','NO'),
       DECODE(max(TC.TYPE_NO), 1, 'NEW IN',
              2, 'OLD IN',
              3, 'NEW IN OLD IN',
              4, 'NEW OUT',
              5, 'NEW IN OUT',
              6, 'NEW OUT OLD IN',
              7, 'NEW IN OUT OLD IN',
              16, 'PARENT IN',
              'NONE')

FROM SYS._DD_TRG T, SYS._DD_TCOL TC, SYS._DD_COL C,
     SYS._DD_OBJ O, SYS._DD_OBJ O2,
     SYS._DD_USER U, SYS._DD_USER U2
WHERE T.OBJ_ID = TC.OBJ_ID AND T.OBJ_ID = O.OBJ_ID
  AND BITAND(O2.FLAGS, 128) = 0
  AND T.BO_ID = C.OBJ_ID AND T.BO_ID = O2.OBJ_ID AND C.COL_NO = TC.COL_NO
  AND U.USER_ID = O.OWNER_ID AND U2.USER_ID = O2.OWNER_ID
  AND (O.OWNER_ID = USERENV('SCHEMAID') OR O2.OWNER_ID = USERENV('SCHEMAID'))
GROUP BY U.NAME, O.NAME, U2.NAME, O2.NAME, C.NAME
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TRIGGER_COLS FOR DBA_TRIGGER_COLS;
CREATE OR REPLACE PUBLIC SYNONYM ALL_TRIGGER_COLS FOR ALL_TRIGGER_COLS;
CREATE OR REPLACE PUBLIC SYNONYM USER_TRIGGER_COLS FOR USER_TRIGGER_COLS;
GRANT SELECT ON ALL_TRIGGER_COLS TO PUBLIC;
GRANT SELECT ON USER_TRIGGER_COLS TO PUBLIC;


CREATE OR REPLACE VIEW ALL_RECYCLEBIN
(OWNER, OBJECT_NAME, ORIGINAL_NAME, TYPE, TS_NAME,
 CREATETIME, DROPTIME, DROPTSN, BASE_OBJECT, SPACE)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME, R.NAME,
       DECODE(R.TYPE_NO, 1, 'TABLE',
                         0, 'INDEX',
                         9, 'TRIGGER', 
                         12, 'LOB', 'ERROR'),
       T.NAME,
       TO_CHAR(O.CTIME, 'YYYY-MM-DD:HH24:MI:SS'),
       TO_CHAR(R.TIME, 'YYYY-MM-DD:HH24:MI:SS'),
       R.TSN, DECODE(R.BO_ID, 4294967295, NULL, R.BO_ID),
       NULL
FROM SYS._DD_RECYCLEBIN R, SYS._DD_OBJ O, SYS._DD_TS T, SYS._DD_USER U
WHERE R.OBJ_ID = O.OBJ_ID AND R.TS_ID = T.TS_ID(+)
  AND (R.OWNER_ID = USERENV('SCHEMAID') OR R.OWNER_ID = 1)
  AND U.USER_ID = R.OWNER_ID
UNION
SELECT U.NAME, O.NAME, R.NAME,
       DECODE(R.TYPE_NO, 1, 'TABLE',
                         0, 'INDEX',
                         9, 'TRIGGER',
                         12, 'LOB', 'ERROR'),
       T.NAME,
       TO_CHAR(O.CTIME, 'YYYY-MM-DD:HH24:MI:SS'),
       TO_CHAR(R.TIME, 'YYYY-MM-DD:HH24:MI:SS'),
       R.TSN, DECODE(R.BO_ID, 4294967295, NULL, R.BO_ID),
       NULL
FROM SYS._DD_RECYCLEBIN R, SYS._DD_OBJ O, SYS._DD_TS T, SYS._DD_USER U
WHERE R.OBJ_ID = O.OBJ_ID AND R.TS_ID = T.TS_ID(+)
      AND  U.USER_ID = R.OWNER_ID
      AND  EXISTS (
            SELECT NULL
            FROM   SYS._DD_SYSAUTH
            WHERE  GRANTEE_ID = USERENV('SCHEMAID')
              AND  (PRIV_NO    = -483
                    OR PRIV_NO = -482
                    OR PRIV_NO = -481
                    OR PRIV_NO = -480
                    OR PRIV_NO = -485
                    OR PRIV_NO = -473
                    OR PRIV_NO IN (
                          SELECT USER_ID FROM SYS._DD_USER
                          WHERE NAME = 'DBA')
                   )
           )
UNION
SELECT U.NAME, O.NAME, R.NAME,
       DECODE(R.TYPE_NO, 1, 'TABLE',
                         0, 'INDEX',
                         9, 'TRIGGER',
                         12, 'LOB', 'ERROR'),
       T.NAME,
       TO_CHAR(O.CTIME, 'YYYY-MM-DD:HH24:MI:SS'),
       TO_CHAR(R.TIME, 'YYYY-MM-DD:HH24:MI:SS'),
       R.TSN, DECODE(R.BO_ID, 4294967295, NULL, R.BO_ID),
       NULL
FROM SYS._DD_RECYCLEBIN R, SYS._DD_OBJ O, SYS._DD_TS T, SYS._DD_USER U
WHERE R.OBJ_ID = O.OBJ_ID AND R.TS_ID = T.TS_ID(+)
      AND  R.OWNER_ID = U.USER_ID
      AND  R.OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )

;
CREATE OR REPLACE VIEW DBA_RECYCLEBIN
(OWNER, OBJECT_NAME, ORIGINAL_NAME, TYPE, TS_NAME,
 CREATETIME, DROPTIME, DROPTSN, BASE_OBJECT, SPACE)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME, R.NAME,
       DECODE(R.TYPE_NO, 1, 'TABLE',
                         0, 'INDEX',
                         9, 'TRIGGER', 
                         12, 'LOB', 'ERROR'),
       T.NAME,
       TO_CHAR(O.CTIME, 'YYYY-MM-DD:HH24:MI:SS'),
       TO_CHAR(R.TIME, 'YYYY-MM-DD:HH24:MI:SS'),
       R.TSN, DECODE(R.BO_ID, 4294967295, NULL, R.BO_ID),
       NULL
FROM SYS._DD_RECYCLEBIN R, SYS._DD_OBJ O, SYS._DD_TS T, SYS._DD_USER U
WHERE R.OBJ_ID = O.OBJ_ID AND R.TS_ID = T.TS_ID(+)
  AND R.OWNER_ID = U.USER_ID
;

CREATE OR REPLACE VIEW USER_RECYCLEBIN
(OBJECT_NAME, ORIGINAL_NAME, TYPE, TS_NAME,
 CREATETIME, DROPTIME, DROPTSN, BASE_OBJECT, SPACE)
AS
SELECT /*+ no_merge */ O.NAME, R.NAME,
       DECODE(R.TYPE_NO, 1, 'TABLE',
                         0, 'INDEX',
                         9, 'TRIGGER', 
                         12, 'LOB', 'ERROR'),
       T.NAME,
       TO_CHAR(O.CTIME, 'YYYY-MM-DD:HH24:MI:SS'),
       TO_CHAR(R.TIME, 'YYYY-MM-DD:HH24:MI:SS'),
       R.TSN, DECODE(R.BO_ID, 4294967295, NULL, R.BO_ID),
       NULL
FROM SYS._DD_RECYCLEBIN R, SYS._DD_OBJ O, SYS._DD_TS T
WHERE R.OBJ_ID = O.OBJ_ID AND R.TS_ID = T.TS_ID(+)
  AND R.OWNER_ID = USERENV('SCHEMAID')
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_RECYCLEBIN FOR ALL_RECYCLEBIN;
CREATE OR REPLACE PUBLIC SYNONYM DBA_RECYCLEBIN FOR DBA_RECYCLEBIN;
CREATE OR REPLACE PUBLIC SYNONYM USER_RECYCLEBIN FOR USER_RECYCLEBIN;
CREATE OR REPLACE PUBLIC SYNONYM RECYCLEBIN FOR USER_RECYCLEBIN;
GRANT SELECT ON ALL_RECYCLEBIN TO PUBLIC;
GRANT SELECT ON USER_RECYCLEBIN TO PUBLIC;
GRANT SELECT ON RECYCLEBIN TO PUBLIC;



CREATE OR REPLACE VIEW ALL_QUEUE_SUBSCRIBERS
(OWNER, QUEUE_NAME, QUEUE_TABLE, CONSUMER_NAME, ADDRESS, PROTOCOL, 
 TRANSFORMATION, RULE, DELIVERY_MODE, IF_NONDURABLE_SUBSCRIBER, QUEUE_TO_QUEUE)
AS
SELECT T.SCHEMA, Q.NAME, T.NAME, s.name, s.address, s.protocol, NULL, NULL, 
       'PERSISTENT', 'NO', 'FALSE'
  FROM SYS.AQ$_QUEUES Q, SYS.AQ$_QUEUE_TABLES T, SYS._DD_USER U,
       table(sys.dbms_aq_utl.get_subscriber_table (t.schema, t.name)) s
 WHERE U.USER_ID = USERENV('SCHEMAID')
   AND U.NAME = T.SCHEMA
   AND Q.TABLE_OBJNO = T.OBJNO
   AND BITAND(T.FLAGS, 1) = 1
;

CREATE OR REPLACE VIEW DBA_QUEUE_SUBSCRIBERS
(OWNER, QUEUE_NAME, QUEUE_TABLE, CONSUMER_NAME, ADDRESS, PROTOCOL, 
 TRANSFORMATION, RULE, DELIVERY_MODE, IF_NONDURABLE_SUBSCRIBER, QUEUE_TO_QUEUE)
AS
SELECT T.SCHEMA, Q.NAME, T.NAME, s.name, s.address, s.protocol, NULL, NULL, 
       'PERSISTENT', 'NO', 'FALSE'
  FROM SYS.AQ$_QUEUES Q, SYS.AQ$_QUEUE_TABLES T,
       table(sys.dbms_aq_utl.get_subscriber_table (t.schema, t.name)) s
 WHERE Q.TABLE_OBJNO = T.OBJNO
   AND BITAND(T.FLAGS, 1) = 1
;

CREATE OR REPLACE VIEW USER_QUEUE_SUBSCRIBERS
(QUEUE_NAME, QUEUE_TABLE, CONSUMER_NAME, ADDRESS, PROTOCOL, 
 TRANSFORMATION, RULE, DELIVERY_MODE, IF_NONDURABLE_SUBSCRIBER, QUEUE_TO_QUEUE)
AS
SELECT Q.NAME, T.NAME, s.name, s.address, s.protocol, NULL, NULL, 
       'PERSISTENT', 'NO', 'FALSE'
  FROM SYS.AQ$_QUEUES Q, SYS.AQ$_QUEUE_TABLES T, SYS._DD_USER U,
       table(sys.dbms_aq_utl.get_subscriber_table (t.schema, t.name)) s
 WHERE U.USER_ID = USERENV('SCHEMAID')
   AND U.NAME = T.SCHEMA
   AND Q.TABLE_OBJNO = T.OBJNO
   AND BITAND(T.FLAGS, 1) = 1
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_QUEUE_SUBSCRIBERS FOR ALL_QUEUE_SUBSCRIBERS;
CREATE OR REPLACE PUBLIC SYNONYM DBA_QUEUE_SUBSCRIBERS FOR DBA_QUEUE_SUBSCRIBERS;
CREATE OR REPLACE PUBLIC SYNONYM USER_QUEUE_SUBSCRIBERS FOR USER_QUEUE_SUBSCRIBERS;
GRANT SELECT ON ALL_QUEUE_SUBSCRIBERS TO PUBLIC;
GRANT SELECT ON USER_QUEUE_SUBSCRIBERS TO PUBLIC;



CREATE OR REPLACE VIEW ALL_QUEUE_TABLES
(OWNER, QUEUE_TABLE, TYPE, OBJECT_TYPE, SORT_ORDER, RECIPIENTS,
 MESSAGE_GROUPING, PRIMARY_INSTANCE, SECONDARY_INSTANCE, OWNER_INSTANCE,
 USER_COMMENT)
AS
SELECT T.SCHEMA, T.NAME, 
       DECODE(T.UDATA_TYPE, 1, 'OBJECT', 2, 'RAW'), NULL, 
       DECODE(T.SORT_COLS, 0, 'NONE', 1, 'PRIORITY', 2, 'ENQUEUE_TIME',
              3, 'PRIORITY, ENQUEUE_TIME', 4, 'COMMIT_TIME',
              5, 'PRIORITY, COMMIT_TIME', 7, 'ENQUEUE_TIME, PRIORITY'),
       DECODE(BITAND(T.FLAGS, 1), 1, 'MULTIPLE', 0, 'SINGLE'),
       DECODE(BITAND(T.FLAGS, 2), 2, 'TRANSACTIONAL', 0, 'NONE'),
       0, 0, 0,
       SUBSTR(T.TABLE_COMMENT, 1, 50)
  FROM SYS.AQ$_QUEUE_TABLES T, SYS._DD_USER U
 WHERE U.USER_ID = USERENV('SCHEMAID')
   AND U.NAME = T.SCHEMA
;

CREATE OR REPLACE VIEW DBA_QUEUE_TABLES
(OWNER, QUEUE_TABLE, TYPE, OBJECT_TYPE, SORT_ORDER, RECIPIENTS,
 MESSAGE_GROUPING, PRIMARY_INSTANCE, SECONDARY_INSTANCE, OWNER_INSTANCE,
 USER_COMMENT)
AS
SELECT T.SCHEMA, T.NAME, 
       DECODE(T.UDATA_TYPE, 1, 'OBJECT', 2, 'RAW'), NULL, 
       DECODE(T.SORT_COLS, 0, 'NONE', 1, 'PRIORITY', 2, 'ENQUEUE_TIME',
              3, 'PRIORITY, ENQUEUE_TIME', 4, 'COMMIT_TIME',
              5, 'PRIORITY, COMMIT_TIME', 7, 'ENQUEUE_TIME, PRIORITY'),
       DECODE(BITAND(T.FLAGS, 1), 1, 'MULTIPLE', 0, 'SINGLE'),
       DECODE(BITAND(T.FLAGS, 2), 2, 'TRANSACTIONAL', 0, 'NONE'),
       0, 0, 0,
       SUBSTR(T.TABLE_COMMENT, 1, 50)
  FROM SYS.AQ$_QUEUE_TABLES T
;

CREATE OR REPLACE VIEW USER_QUEUE_TABLES
(QUEUE_TABLE, TYPE, OBJECT_TYPE, SORT_ORDER, RECIPIENTS, MESSAGE_GROUPING, 
 PRIMARY_INSTANCE, SECONDARY_INSTANCE, OWNER_INSTANCE, USER_COMMENT)
AS
SELECT T.NAME, 
       DECODE(T.UDATA_TYPE, 1, 'OBJECT', 2, 'RAW'), NULL, 
       DECODE(T.SORT_COLS, 0, 'NONE', 1, 'PRIORITY', 2, 'ENQUEUE_TIME',
              3, 'PRIORITY, ENQUEUE_TIME', 4, 'COMMIT_TIME',
              5, 'PRIORITY, COMMIT_TIME', 7, 'ENQUEUE_TIME, PRIORITY'),
       DECODE(BITAND(T.FLAGS, 1), 1, 'MULTIPLE', 0, 'SINGLE'),
       DECODE(BITAND(T.FLAGS, 2), 2, 'TRANSACTIONAL', 0, 'NONE'),
       0, 0, 0,
       SUBSTR(T.TABLE_COMMENT, 1, 50)
  FROM SYS.AQ$_QUEUE_TABLES T, SYS._DD_USER U
 WHERE U.USER_ID = USERENV('SCHEMAID')
   AND U.NAME = T.SCHEMA
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_QUEUE_TABLES FOR ALL_QUEUE_TABLES;
CREATE OR REPLACE PUBLIC SYNONYM DBA_QUEUE_TABLES FOR DBA_QUEUE_TABLES;
CREATE OR REPLACE PUBLIC SYNONYM USER_QUEUE_TABLES FOR USER_QUEUE_TABLES;
GRANT SELECT ON ALL_QUEUE_TABLES TO PUBLIC;
GRANT SELECT ON USER_QUEUE_TABLES TO PUBLIC;



CREATE OR REPLACE VIEW ALL_QUEUES
(OWNER, NAME, QUEUE_TABLE, QID, QUEUE_TYPE, MAX_RETRIES, RETRY_DELAY,
 ENQUEUE_ENABLED, DEQUEUE_ENABLED, RETENTION, USER_COMMENT)
AS
SELECT T.SCHEMA, Q.NAME, T.NAME, -1, 
       DECODE(Q.USAGE, 1, 'EXCEPTION_QUEUE', 2, 'NON_PERSISTENT_QUEUE',
              'NORMAL_QUEUE'),
       Q.MAX_RETRIES, Q.RETRY_DELAY,
       DECODE(BITAND(Q.ENABLE_FLAG, 1), 1 , 'YES', 'NO'),
       DECODE(BITAND(Q.ENABLE_FLAG, 2), 2 , 'YES', 'NO'),
       DECODE(Q.RET_TIME, -1, ' FOREVER', Q.RET_TIME),
       SUBSTR(Q.QUEUE_COMMENT, 1, 50)
  FROM SYS.AQ$_QUEUES Q, SYS.AQ$_QUEUE_TABLES T, SYS._DD_USER U
 WHERE U.USER_ID = USERENV('SCHEMAID')
   AND U.NAME = T.SCHEMA
   AND Q.TABLE_OBJNO = T.OBJNO
;

CREATE OR REPLACE VIEW DBA_QUEUES
(OWNER, NAME, QUEUE_TABLE, QID, QUEUE_TYPE, MAX_RETRIES, RETRY_DELAY,
 ENQUEUE_ENABLED, DEQUEUE_ENABLED, RETENTION, USER_COMMENT)
AS
SELECT T.SCHEMA, Q.NAME, T.NAME, -1, 
       DECODE(Q.USAGE, 1, 'EXCEPTION_QUEUE', 2, 'NON_PERSISTENT_QUEUE',
              'NORMAL_QUEUE'),
       Q.MAX_RETRIES, Q.RETRY_DELAY,
       DECODE(BITAND(Q.ENABLE_FLAG, 1), 1 , 'YES', 'NO'),
       DECODE(BITAND(Q.ENABLE_FLAG, 2), 2 , 'YES', 'NO'),
       DECODE(Q.RET_TIME, -1, ' FOREVER', Q.RET_TIME),
       SUBSTR(Q.QUEUE_COMMENT, 1, 50)
  FROM SYS.AQ$_QUEUES Q, SYS.AQ$_QUEUE_TABLES T
 WHERE Q.TABLE_OBJNO = T.OBJNO
;

CREATE OR REPLACE VIEW USER_QUEUES
(NAME, QUEUE_TABLE, QID, QUEUE_TYPE, MAX_RETRIES, RETRY_DELAY,
 ENQUEUE_ENABLED, DEQUEUE_ENABLED, RETENTION, USER_COMMENT)
AS
SELECT Q.NAME, T.NAME, -1, 
       DECODE(Q.USAGE, 1, 'EXCEPTION_QUEUE', 2, 'NON_PERSISTENT_QUEUE',
              'NORMAL_QUEUE'),
       Q.MAX_RETRIES, Q.RETRY_DELAY,
       DECODE(BITAND(Q.ENABLE_FLAG, 1), 1 , 'YES', 'NO'),
       DECODE(BITAND(Q.ENABLE_FLAG, 2), 2 , 'YES', 'NO'),
       DECODE(Q.RET_TIME, -1, ' FOREVER', Q.RET_TIME),
       SUBSTR(Q.QUEUE_COMMENT, 1, 50)
  FROM SYS.AQ$_QUEUES Q, SYS.AQ$_QUEUE_TABLES T, SYS._DD_USER U
 WHERE U.USER_ID = USERENV('SCHEMAID')
   AND U.NAME = T.SCHEMA
   AND Q.TABLE_OBJNO = T.OBJNO
;

CREATE OR REPLACE PUBLIC SYNONYM ALL_QUEUES FOR ALL_QUEUES;
CREATE OR REPLACE PUBLIC SYNONYM DBA_QUEUES FOR DBA_QUEUES;
CREATE OR REPLACE PUBLIC SYNONYM USER_QUEUES FOR USER_QUEUES;
GRANT SELECT ON ALL_QUEUES TO PUBLIC;
GRANT SELECT ON USER_QUEUES TO PUBLIC;

SET DEFINE ON;

CREATE OR REPLACE VIEW V$OBJECT_USAGE
(OWNER_NAME, INDEX_NAME, TABLE_NAME, MONITORING, USED, START_MONITORING, END_MONITORING)
AS
SELECT /*+ no_merge */ U.NAME, O.NAME INDEX_NAME, BO.NAME TABLE_NAME, 
       DECODE(BITAND(I.FLAGS, 65536), 0, 'N', 'Y') MONITORING, 
       OU.USED,
       TO_CHAR(OU.START_MONITORING, 'YYYY-MM-DD:HH24:MI:SS'),
       TO_CHAR(OU.END_MONITORING, 'YYYY-MM-DD:HH24:MI:SS')
FROM SYS._DD_USER U, SYS._DD_IDX I, SYS._DD_OBJ O, SYS._DD_OBJ BO,(select * from (select OBJ_ID, MONITORED, USED, START_MONITORING, END_MONITORING, ROW_NUMBER() over (PARTITION BY OBJ_ID ORDER BY START_MONITORING DESC) RN from sys._object_usage) where RN = 1) OU
WHERE OU.OBJ_ID = I.OBJ_ID
    AND I.OBJ_ID = O.OBJ_ID
    AND I.BO_ID = BO.OBJ_ID
    AND O.OWNER_ID = U.USER_ID 
    AND (O.OWNER_ID = USERENV('SCHEMAID') OR 
         exists (
                select * from x$user_role where user_id in (select user_id from sys._dd_user where name = 'DBA' or name = 'SYS') 
                ));
         
CREATE OR REPLACE PUBLIC SYNONYM V$OBJECT_USAGE FOR V$OBJECT_USAGE;
GRANT SELECT ON V$OBJECT_USAGE TO PUBLIC;


create or replace view dba_profiles as
select  pname.name as profile, rmap.name as resource_name,
        decode(pinfo.type_no, 0, 'PASSWORD', 'UNKNOWN') as resource_type,
        case rmap.name
        when ('PASSWORD_VERIFY_FUNCTION')
        then
            (select object_name from dba_objects where object_id=pinfo.limit_no)
        else
            decode(pinfo.limit_no,
                   999999999, 'UNLIMITED',
                   pinfo.limit_no)
        end as limit
from  sys._profile_name pname, sys._profile_info pinfo, sys._resource_map rmap
where pname.profile_no = pinfo.profile_no and
      pinfo.resource_no = rmap.resource_no and
      pinfo.type_no = rmap.type_no order by pname.name, pinfo.resource_no;

create or replace public synonym dba_profiles for dba_profiles;


create or replace view session_context as select * from sys._vt_context;
create or replace public synonym session_context for session_context;
grant select on session_context to public;

create or replace view _sv_policies
(object_owner, object_name, policy_name, pf_owner, package, function,
 sel, ins, upd, del, idx, chk_option, enable, static_policy, policy_type,
 owner_id, obj_id)
as
select
    u.name, o.name, pname, pfschma, ppname, pfname,
    decode (bitand (stmt_type, 1), 0, 'NO', 'YES'),
    decode (bitand (stmt_type, 2), 0, 'NO', 'YES'),
    decode (bitand (stmt_type, 4), 0, 'NO', 'YES'),
    decode (bitand (stmt_type, 8), 0, 'NO', 'YES'),
    decode (bitand (stmt_type, 32), 0, 'NO', 'YES'),
    decode (check_opt, 1, 'YES', 'NO'),
    decode (enable_flag, 1, 'YES', 'NO'),
    decode (ptype, 1, 'YES', 'NO'),
    decode (ptype, 2, 'SHARED_STATIC',
                   3, 'CONTEXT_SENSITIVE',
                   4, 'SHARED_CONTEXT_SENSITIVE',
                   5, 'DYNAMIC',
                   'STATIC'),
    o.owner_id, o.obj_id
from sys._dd_obj o, sys._dd_user u, sys._dd_rls r
where o.obj_id = r.obj_id
  and o.owner_id = u.user_id;

create or replace view dba_policies
as
select
    object_owner, object_name, policy_name, pf_owner, package, function,
    sel, ins, upd, del, idx, chk_option, enable, static_policy, policy_type
from _sv_policies;

create or replace view all_policies
as
select
    object_owner, object_name, policy_name, pf_owner, package, function,
    sel, ins, upd, del, idx, chk_option, enable, static_policy, policy_type
from _sv_policies
where owner_id = USERENV('SCHEMAID') or owner_id = 1
      
   or (exists (SELECT NULL
               FROM   (SELECT SAU2.PRIV_NO
                       FROM   SYS._DD_SYSAUTH SAU2
                       START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                       CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                      ) SAU
               WHERE (SAU.PRIV_NO    = -483
                       OR SAU.PRIV_NO = -482
                       OR SAU.PRIV_NO = -481
                       OR SAU.PRIV_NO = -480
                       OR SAU.PRIV_NO = -485
                       OR SAU.PRIV_NO = -473
                       OR SAU.PRIV_NO IN (
                             SELECT USER_ID FROM SYS._DD_USER
                             WHERE NAME = 'DBA')
                      )
              )
      )
   or
      
       (OBJ_ID IN (
            SELECT OBJ_ID
            FROM   SYS._DD_OBJAUTH
            WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
          )
       );

create or replace view user_policies
as
select
    object_owner, object_name, policy_name, pf_owner, package, function,
    sel, ins, upd, del, idx, chk_option, enable, static_policy, policy_type
from _sv_policies
where owner_id = USERENV('SCHEMAID');

create or replace public synonym dba_policies for dba_policies;
create or replace public synonym all_policies for all_policies;
create or replace public synonym user_policies for user_policies;

grant select on all_policies to public;
grant select on user_policies to public;




CREATE OR REPLACE VIEW DBA_TS_QUOTAS
(TABLESPACE_NAME, USERNAME, BYTES, MAX_BYTES, BLOCKS, MAX_BLOCKS, DROPPED)
AS
    SELECT /*+ no_merge */ VT_TS.NAME, DDU.NAME,
           BLOCKS * VT_TS.BLKSIZE,
           CASE
              WHEN MAXBLOCKS = -1 THEN -1
           ELSE
              MAXBLOCKS * VT_TS.BLKSIZE
           END,
           BLOCKS, MAXBLOCKS,
           DECODE(BITAND(FLAGS, 8),
                         8, 'YES', 'NO')
      FROM SYS._TS_QUOTA TQ, SYS._VT_TABLESPACE VT_TS, SYS._DD_USER DDU
     WHERE TQ.TS_ID = VT_TS.TSNO
       AND TQ.USER_ID = DDU.USER_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_TS_QUOTAS FOR DBA_TS_QUOTAS;

-- USER_TS_QUOTAS

CREATE OR REPLACE VIEW USER_TS_QUOTAS
(TABLESPACE_NAME, BYTES, MAX_BYTES, BLOCKS, MAX_BLOCKS, DROPPED)
AS
    SELECT /*+ no_merge */ TABLESPACE_NAME, 
           BYTES, MAX_BYTES, BLOCKS, MAX_BLOCKS, DROPPED
      FROM DBA_TS_QUOTAS
     WHERE USERNAME = USERENV('SCHEMA')
;

CREATE OR REPLACE PUBLIC SYNONYM USER_TS_QUOTAS FOR USER_TS_QUOTAS;
GRANT SELECT ON USER_TS_QUOTAS TO PUBLIC;

CREATE OR REPLACE VIEW PROXY_USERS
(PROXY, CLIENT, AUTHENTICATION, FLAGS)
AS
    SELECT /*+ no_merge */ U1.NAME, U2.NAME,
           DECODE(P.CREDENTIAL_TYPE, 0, 'NO', 5, 'YES'),
           DECODE(P.FLAGS, 0, NULL,
                  1, 'PROXY MAY ACTIVATE ALL CLIENT ROLES',
                  2, 'NO CLIENT ROLES MAY BE ACTIVATED',
                  4, 'PROXY MAY ACTIVATE ROLE',
                  5, 'PROXY MAY ACTIVATE ALL CLIENT ROLES',
                  8, 'PROXY MAY NOT ACTIVATE ROLE')
      FROM SYS._DD_USER U1, SYS._DD_USER U2, SYS._PROXY_INFO P
     WHERE U1.USER_ID = P.PROXY_ID AND U2.USER_ID = P.CLIENT_ID
;

CREATE OR REPLACE PUBLIC SYNONYM PROXY_USERS FOR PROXY_USERS;



CREATE OR REPLACE VIEW DBA_WORKSPACES
(WORKSPACE, PARENT_WORKSPACE)
AS
    SELECT /*+ no_merge +*/ WS.WS_NAME, WS.PARENT_WS
     FROM SYS.TBL_FOR_WM WS
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_WORKSPACES FOR DBA_WORKSPACES;

CREATE OR REPLACE VIEW USER_WORKSPACES
(WORKSPACE, PARENT_WORKSPACE)
AS
    SELECT /*+ no_merge +*/ WORKSPACE, PARENT_WORKSPACE
     FROM DBA_WORKSPACES
;

CREATE OR REPLACE PUBLIC SYNONYM USER_WORKSPACES FOR USER_WORKSPACES;
GRANT SELECT ON USER_WORKSPACES TO PUBLIC;

CREATE OR REPLACE VIEW DBA_RSRC_PLANS AS
    SELECT /*+ no_merge */
        PLAN, COMMENTS, IS_ACTIVE_PLAN
    FROM
        SYS._RESOURCE_MANAGER_RESOURCE_PLANS
;

CREATE OR REPLACE VIEW DBA_RSRC_CONSUMER_GROUPS AS
    SELECT /*+ no_merge */
        CONSUMER_GROUP, COMMENTS, ATTRIBUTE, VALUE
    FROM
        SYS._RESOURCE_MANAGER_CONSUMER_GROUPS
;

CREATE OR REPLACE VIEW DBA_RSRC_PLAN_DIRECTIVES AS
    SELECT /*+ no_merge */
        PLAN, GROUP_OR_SUBPLAN, COMMENTS, MGMT_P1
    FROM
        SYS._RESOURCE_MANAGER_PLAN_DIRECTIVES
;

CREATE OR REPLACE
    PUBLIC SYNONYM DBA_RSRC_PLANS FOR DBA_RSRC_PLANS;
CREATE OR REPLACE
    PUBLIC SYNONYM DBA_RSRC_CONSUMER_GROUPS FOR DBA_RSRC_CONSUMER_GROUPS;
CREATE OR REPLACE
    PUBLIC SYNONYM DBA_RSRC_PLAN_DIRECTIVES FOR DBA_RSRC_PLAN_DIRECTIVES;



CREATE OR REPLACE VIEW DBA_HIST_SNAPSHOT
(SNAP_ID, INSTANCE_NUMBER, BEGIN_INTERVAL_TIME, END_INTERVAL_TIME)
AS
    SELECT SN.SNAP_ID, SN.INSTANCE_NUMBER,
           SN.BEGIN_INTERVAL_TIME, SN.END_INTERVAL_TIME
      FROM SYS._TPR_SNAPSHOT SN
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_SNAPSHOT FOR DBA_HIST_SNAPSHOT;



CREATE OR REPLACE VIEW DBA_HIST_SQLSTAT
(SNAP_ID, INSTANCE_NUMBER, SQL_HASH_VALUE, PLAN_HASH_VALUE, 
 LAST_ACTIVE_TIME, PARSE_CALLS,
 FETCHES, EXECUTIONS, BUFFER_GETS, ROWS_PROCESSED, ELAPSED_TIME,
 DISK_READ_TIME, TEMP_SGMT_READ_TIME, TEMP_SGMT_WRITE_TIME)
AS
    SELECT SN.SNAP_ID, SN.INSTANCE_NUMBER, ST.SQL_HASH_VALUE, ST.PLAN_HASH_VALUE,
           ST.LAST_ACTIVE_TIME, ST.PARSE_CALLS, 
           ST.FETCHES, ST.EXECUTIONS,
           ST.BUFFER_GETS, ST.ROWS_PROCESSED, ST.ELAPSED_TIME,
           ST.DISK_READ_TIME, ST.TEMP_SGMT_READ_TIME, ST.TEMP_SGMT_WRITE_TIME
      FROM SYS._TPR_SQLSTATS ST, SYS._TPR_SNAPSHOT SN
     WHERE SN.SNAP_ID = ST.SNAP_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_SQLSTAT FOR DBA_HIST_SQLSTAT;


     

CREATE OR REPLACE VIEW DBA_HIST_SQL_PLAN
(SQL_HASH_VALUE, PLAN_HASH_VALUE, ID, OPERATION, 
 OBJECT_ID, OBJECT_OWNER, OBJECT_NAME, OBJECT_TYPE, PARENT_ID,
 DEPTH, POSITION, COST, CARDINALITY, PARTITION_START, PARTITION_STOP, 
 OTHER, CPU_COST, IO_COST, ACCESS_PREDICATES, FILTER_PREDICATES)
AS 
    SELECT P.SQL_HASH_VALUE, P.PLAN_HASH_VALUE, P.ID, P.OPERATION, 
           O.OBJECT_ID, O.OWNER, O.OBJECT_NAME, O.OBJECT_TYPE, 
           P.PARENT_ID, P.DEPTH, P.POSITION, P.COST, P.CARDINALITY, P.PSTART, 
           P.PEND, P.OTHERS, P.CPU_COST, P.IO_COST, P.ACCESS_PREDICATES, 
           P.FILTER_PREDICATES
      FROM SYS._TPR_SQL_PLAN P, SYSCAT.DBA_OBJECTS O
     WHERE P.OBJECT_NAME = O.OBJECT_NAME
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_SQL_PLAN FOR DBA_HIST_SQL_PLAN;



CREATE OR REPLACE VIEW DBA_HIST_SQLTEXT
(SQL_HASH_VALUE, SQL_TEXT, COMMAND_TYPE)
AS
    SELECT TXT.SQL_HASH_VALUE, TXT.SQL_TEXT, TXT.COMMAND_TYPE
      FROM SYS._TPR_SQLTEXT TXT
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_SQLTEXT FOR DBA_HIST_SQLTEXT;


CREATE OR REPLACE VIEW DBA_HIST_SEG_STAT
(SNAP_ID, OBJ_ID, STATISTICS#, STATISTICS_NAME, VALUE)
AS
    SELECT SG.SNAP_ID, SG.OBJ_ID, SG.STATISTICS#, SG.STATISTICS_NAME, SG.VALUE
      FROM SYS._TPR_SEGMENTSTAT SG
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_SEG_STAT FOR DBA_HIST_SEG_STAT;



CREATE OR REPLACE VIEW DBA_HIST_SYSTEM_EVENT
(SNAP_ID, INSTANCE_NUMBER, EVENT_NUMBER, TOTAL_WAITS, TIME_WAITED, 
 AVERAGE_WAIT, MAX_WAIT, TOTAL_TIMEOUTS) 
AS
    SELECT SN.SNAP_ID, SN.INSTANCE_NUMBER, E.IDX, E.TOTAL_WAITS, E.TIME_WAITED,
           E.AVERAGE_WAIT, E.MAX_WAIT, E.TOTAL_TIMEOUTS 
      FROM SYS._TPR_SYSTEM_EVENT E, SYS._TPR_SNAPSHOT SN
     WHERE E.SNAP_ID = SN.SNAP_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_SYSTEM_EVENT
FOR DBA_HIST_SYSTEM_EVENT;



CREATE OR REPLACE VIEW DBA_HIST_WAITSTAT
(SNAP_ID, INSTANCE_NUMBER, CLASS, WAIT_COUNT, TIME)
AS
    SELECT SN.SNAP_ID, SN.INSTANCE_NUMBER, W.CLASS, W.COUNT, W.TIME
      FROM SYS._TPR_WAITSTAT W, SYS._TPR_SNAPSHOT SN
     WHERE W.SNAP_ID = SN.SNAP_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_WAITSTAT FOR DBA_HIST_WAITSTAT;



CREATE OR REPLACE VIEW DBA_HIST_LATCH
(SNAP_ID, INSTANCE_NUMBER, LATCH#, GETS, MISSES, SLEEPS,
 IMMEDIATE_GETS, IMMEDIATE_MISSES, SPIN_GETS, WAIT_TIME, SLEEPS_CNT)
AS
    SELECT SN.SNAP_ID, SN.INSTANCE_NUMBER, L.LATCH#, L.GETS, L.MISSES,
           L.SLEEPS, L.IMMEDIATE_GETS, L.IMMEDIATE_MISSES, L.SPIN_GETS,
           L.WAIT_TIME, L.SLEEPS_CNT
      FROM SYS._TPR_LATCH L, SYS._TPR_SNAPSHOT SN
     WHERE L.SNAP_ID = SN.SNAP_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_LATCH FOR DBA_HIST_LATCH;



CREATE OR REPLACE VIEW DBA_HIST_SGASTAT
(SNAP_ID, INSTANCE_NUMBER, NAME, "SIZE")
AS
    SELECT SN.SNAP_ID, SN.INSTANCE_NUMBER, SGA.NAME, SGA."SIZE"
      FROM SYS._TPR_SGASTAT SGA, SYS._TPR_SNAPSHOT SN
     WHERE SGA.SNAP_ID = SN.SNAP_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_SGASTAT FOR DBA_HIST_SGASTAT;



CREATE OR REPLACE VIEW DBA_HIST_PGASTAT
(SNAP_ID, INSTANCE_NUMBER, NAME, VALUE, SNAP_TIME)
AS
    SELECT SN.SNAP_ID, SN.INSTANCE_NUMBER, PGA.NAME, PGA.VALUE, PGA.SNAP_TIME
      FROM SYS._TPR_PGASTAT PGA, SYS._TPR_SNAPSHOT SN
     WHERE PGA.SNAP_ID = SN.SNAP_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_PGASTAT FOR DBA_HIST_PGASTAT;



CREATE OR REPLACE VIEW DBA_HIST_LIBRARYCACHE
(SNAP_ID, INSTANCE_NUMBER, NAMESPACE, GETS, GETHITS)
AS
    SELECT SN.SNAP_ID, SN.INSTANCE_NUMBER, LIB.NAMESPACE, LIB.GETS, LIB.GETHITS
      FROM SYS._TPR_LIBRARYCACHE LIB, SYS._TPR_SNAPSHOT SN
     WHERE LIB.SNAP_ID = SN.SNAP_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_LIBRARYCACHE
FOR DBA_HIST_LIBRARYCACHE;



CREATE OR REPLACE VIEW DBA_HIST_UNDOSTAT
(END_TIME, INSTANCE_NUMBER, SNAP_ID, UNDO_TSNO, UNDOBLKS, TXCOUNT,
 MAXCONCURRENCY, SNAP_TOO_OLD_CNT, NOSPACEERRCNT, ACTIVEBLKS,
 UNEXPIREDBLKS, EXPIREDBLKS)
AS
    SELECT UD.END_TIME, SN.INSTANCE_NUMBER, SN.SNAP_ID, UD.UNDO_TSNO, 
           UD.UNDOBLKS, UD.TXCOUNT, UD.MAXCONCURRENCY, UD.SNAP_TOO_OLD_CNT,
           UD.NOSPACEERRCNT, UD.ACTIVEBLKS, UD.UNEXPIREDBLKS, UD.EXPIREDBLKS
      FROM SYS._TPR_UNDOSTAT UD, SYS._TPR_SNAPSHOT SN
     WHERE UD.SNAP_ID = SN.SNAP_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_UNDOSTAT FOR DBA_HIST_UNDOSTAT;



CREATE OR REPLACE VIEW DBA_HIST_OSSTAT
(SNAP_ID, INSTANCE_NUMBER, STAT_ID, VALUE)
AS
    SELECT SN.SNAP_ID, SN.INSTANCE_NUMBER, OS.ID, OS.VALUE
      FROM SYS._TPR_OSSTAT2 OS, SYS._TPR_SNAPSHOT SN
     WHERE OS.SNAP_ID = SN.SNAP_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_OSSTAT FOR DBA_HIST_OSSTAT;



CREATE OR REPLACE VIEW DBA_HIST_PROCESS_MEM_SUMMARY
(SNAP_ID, INSTANCE_NUMBER, NUM_PROCESSES, NON_ZERO_USES, USED_TOTAL, USED_AVG, USED_STDDEV, USED_MAX)
AS
    SELECT SN.SNAP_ID, SN.INSTANCE_NUMBER, COUNT(P.PID), 
           SUM(CASE NVL(P.PGA_USED_MEM, 0) WHEN 0 THEN 0 ELSE 1 END), 
           SUM(P.PGA_USED_MEM), AVG(P.PGA_USED_MEM), STDDEV(P.PGA_USED_MEM), MAX(P.PGA_USED_MEM)
      FROM SYS._TPR_PROCESS P, SYS._TPR_SNAPSHOT SN
     WHERE P.SNAP_ID = SN.SNAP_ID
  GROUP BY SN.SNAP_ID, SN.INSTANCE_NUMBER
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_PROCESS_MEM_SUMMARY
FOR DBA_HIST_PROCESS_MEM_SUMMARY;



CREATE OR REPLACE VIEW DBA_HIST_FILESTAT
(SNAP_ID, INSTANCE_NUMBER, FILE#, PHYRDS, PHYWRTS, 
 READTIM, WRITETIM, PHYBLKRD, PHYBLKWRT)
AS
    SELECT SN.SNAP_ID, SN.INSTANCE_NUMBER, F.FILE#, F.PHYRDS, F.PHYWRTS,
           F.READTIM, F.WRITETIM, F.PHYBLKRD, F.PHYBLKWRT
      FROM SYS._TPR_SNAPSHOT SN, SYS._TPR_FILESTAT F
     WHERE SN.SNAP_ID = F.SNAP_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_FILESTAT FOR DBA_HIST_FILESTAT;



CREATE OR REPLACE VIEW DBA_HIST_SQL_WORKAREA_HSTGRM
(SNAP_ID, INSTANCE_NUMBER, LOW_OPTIMAL_SIZE, HIGH_OPTIMAL_SIZE, 
 OPTIMAL_EXECUTIONS, ONEPASS_EXECUTIONS, MULTIPASSES_EXECUTIONS,
 TOTAL_EXECUTIONS)
AS
    SELECT SN.SNAP_ID, SN.INSTANCE_NUMBER, W.LOW_OPTIMAL_SIZE, 
           W.HIGH_OPTIMAL_SIZE, W.OPTIMAL_EXECUTIONS, W.ONEPASS_EXECUTIONS,
           W.MULTIPASSES_EXECUTIONS, W.TOTAL_EXECUTIONS
      FROM SYS._TPR_SQLWA_HIST W, SYS._TPR_SNAPSHOT SN
     WHERE W.SNAP_ID = SN.SNAP_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_SQL_WORKAREA_HSTGRM
FOR DBA_HIST_WORKAREA_HSTGRM;



CREATE OR REPLACE VIEW DBA_HIST_ACTIVE_SESS_HISTORY
(SNAP_ID, INSTANCE_NUMBER, SESSION_ID, SESSION_TYPE, 
 USER#, USERNAME, STATUS, SQL_ID, PREV_SQL_ID, STATE, WAIT_EVENT,
 WAIT_TIME, PGA_USED_MEM, PROG_NAME, ID1, ID2)
AS
    SELECT SN.SNAP_ID, SN.INSTANCE_NUMBER, SE.SID, SE."TYPE",
           SE.USER#, SE.USERNAME, SE.STATUS, SE.SQL_ID,
           SE.PREV_SQL_ID, SE.STATE, SE.WAIT_EVENT, SE.WAIT_TIME,
           SE.PGA_USED_MEM, SE.PROG_NAME, SE.ID1, SE.ID2
      FROM SYS._TPR_SESSION SE, SYS._TPR_SNAPSHOT SN 
     WHERE SE.SNAP_ID = SN.SNAP_ID
;

CREATE OR REPLACE PUBLIC SYNONYM DBA_HIST_ACTIVE_SESS_HISTORY
FOR DBA_HIST_ACTIVE_SESS_HISTORY;



CREATE OR REPLACE VIEW ALL_TYPE_VERSIONS
(OWNER, TYPE_NAME, VERSION#, TYPECODE, STATUS, LINE, TEXT)
AS
    SELECT u.name, o.name, t.version_no, o.name,
           decode(bitand(o.flags, 128),
                  0, 'VALID', 128, 'INVALID', 'N/A'),
           s.line_no, s.src
      FROM sys._dd_obj o, sys._dd_oid oid, sys._dd_src s,
           sys._dd_type t, sys._dd_user u
     WHERE o.obj_id = s.obj_id and o.obj_id = oid.obj_id and
           oid.oid = t.tvoid and o.type_no = 22 and
           o.owner_id = u.user_id and
           (o.OWNER_ID = USERENV('SCHEMAID')
            OR   o.OWNER_ID = 1
            OR   EXISTS (SELECT NULL
                FROM   (SELECT SAU2.PRIV_NO
                        FROM   SYS._DD_SYSAUTH SAU2
                        START WITH SAU2.GRANTEE_ID = USERENV('SCHEMAID')
                        CONNECT BY PRIOR SAU2.PRIV_NO = SAU2.GRANTEE_ID
                       ) SAU
                WHERE (SAU.PRIV_NO    = -483
                        OR SAU.PRIV_NO = -482
                        OR SAU.PRIV_NO = -481
                        OR SAU.PRIV_NO = -480
                        OR SAU.PRIV_NO = -485
                        OR SAU.PRIV_NO = -473
                        OR SAU.PRIV_NO IN (
                              SELECT USER_ID FROM SYS._DD_USER
                              WHERE NAME = 'DBA')
                       )
               )
            OR   o.OBJ_ID IN (
                SELECT o.OBJ_ID
                    FROM   SYS._DD_OBJAUTH
                    WHERE  GRANTEE_ID in (SELECT USER_ID FROM X$USER_ROLE)
                           )
           );

CREATE OR REPLACE VIEW USER_TYPE_VERSIONS
(TYPE_NAME, VERSION#, TYPECODE, STATUS, LINE, TEXT)
AS
    SELECT o.name, t.version_no, o.name,
           decode(bitand(o.flags, 128),
                  0, 'VALID', 128, 'INVALID', 'N/A'),
           s.line_no, s.src
      FROM sys._dd_obj o, sys._dd_oid oid, sys._dd_src s,
           sys._dd_type t
     WHERE o.obj_id = s.obj_id and o.obj_id = oid.obj_id and
           oid.oid = t.tvoid and o.type_no = 22 and
           o.OWNER_ID = USERENV('SCHEMAID');

CREATE OR REPLACE VIEW DBA_TYPE_VERSIONS
(OWNER, TYPE_NAME, VERSION#, TYPECODE, STATUS, LINE, TEXT)
AS
    SELECT u.name, o.name, t.version_no, o.name,
           decode(bitand(o.flags, 128),
                  0, 'VALID', 128, 'INVALID', 'N/A'),
           s.line_no, s.src
      FROM sys._dd_obj o, sys._dd_oid oid, sys._dd_src s,
           sys._dd_type t, sys._dd_user u
     WHERE o.obj_id = s.obj_id and o.obj_id = oid.obj_id and
           oid.oid = t.tvoid and o.type_no = 22 and
           o.owner_id = u.user_id;

CREATE OR REPLACE PUBLIC SYNONYM ALL_TYPE_VERSIONS
FOR ALL_TYPE_VERSIONS;
GRANT SELECT ON ALL_TYPES TO PUBLIC;
CREATE OR REPLACE PUBLIC SYNONYM USER_TYPE_VERSIONS
FOR USER_TYPE_VERSIONS;
GRANT SELECT ON USER_TYPES TO PUBLIC;
CREATE OR REPLACE PUBLIC SYNONYM DBA_TYPE_VERSIONS
FOR DBA_TYPE_VERSIONS;

